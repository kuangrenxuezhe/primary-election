// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/protobuf/any.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Action;
class AlgorithmCategory;
class AlgorithmPower;
class CandidateSet;
class CandidateSetBase;
class CandidateSetPayload;
class Category;
class Feedback;
class FeedbackRespond;
class HeartBeat;
class Item;
class ItemSource;
class ItemTag;
class ItemWord;
class Recommend;
class Subscribe;
class TopInfo;
class TransferRequest;
class TransferRespond;
class User;
class UserStatus;

enum ActionType {
  ACTION_TYPE_NONE = 0,
  ACTION_TYPE_CLICK = 1,
  ACTION_TYPE_LIKE = 2,
  ACTION_TYPE_COMMENT = 3,
  ACTION_TYPE_FAVORITE = 4,
  ACTION_TYPE_SHARE = 5,
  ACTION_TYPE_DISLIKE = 6,
  ACTION_TYPE_CLOSE_PAGE = 7,
  ActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ActionType_IsValid(int value);
const ActionType ActionType_MIN = ACTION_TYPE_NONE;
const ActionType ActionType_MAX = ACTION_TYPE_CLOSE_PAGE;
const int ActionType_ARRAYSIZE = ActionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionType_descriptor();
inline const ::std::string& ActionType_Name(ActionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionType_descriptor(), value);
}
inline bool ActionType_Parse(
    const ::std::string& name, ActionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionType>(
    ActionType_descriptor(), name, value);
}
enum ItemType {
  ITEM_TYPE_NONE = 0,
  ITEM_TYPE_NEWS = 1,
  ITEM_TYPE_VIDEO = 2,
  ITEM_TYPE_CIRCLE = 3,
  ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ItemType_IsValid(int value);
const ItemType ItemType_MIN = ITEM_TYPE_NONE;
const ItemType ItemType_MAX = ITEM_TYPE_CIRCLE;
const int ItemType_ARRAYSIZE = ItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ItemType_descriptor();
inline const ::std::string& ItemType_Name(ItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ItemType_descriptor(), value);
}
inline bool ItemType_Parse(
    const ::std::string& name, ItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ItemType>(
    ItemType_descriptor(), name, value);
}
enum TopType {
  TOP_TYPE_NONE = 0,
  TOP_TYPE_GLOBAL = 1,
  TOP_TYPE_PARTIAL = 2,
  TopType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TopType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TopType_IsValid(int value);
const TopType TopType_MIN = TOP_TYPE_NONE;
const TopType TopType_MAX = TOP_TYPE_PARTIAL;
const int TopType_ARRAYSIZE = TopType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TopType_descriptor();
inline const ::std::string& TopType_Name(TopType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TopType_descriptor(), value);
}
inline bool TopType_Parse(
    const ::std::string& name, TopType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TopType>(
    TopType_descriptor(), name, value);
}
enum RecommendType {
  RECOMMEND_TYPE_REC = 0,
  RECOMMEND_TYPE_SUB = 1,
  RecommendType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecommendType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecommendType_IsValid(int value);
const RecommendType RecommendType_MIN = RECOMMEND_TYPE_REC;
const RecommendType RecommendType_MAX = RECOMMEND_TYPE_SUB;
const int RecommendType_ARRAYSIZE = RecommendType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecommendType_descriptor();
inline const ::std::string& RecommendType_Name(RecommendType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecommendType_descriptor(), value);
}
inline bool RecommendType_Parse(
    const ::std::string& name, RecommendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecommendType>(
    RecommendType_descriptor(), name, value);
}
enum RecommendNetwork {
  RECOMMEND_NETWORK_WIFI = 0,
  RECOMMEND_NETWORK_MOBILE = 1,
  RecommendNetwork_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RecommendNetwork_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RecommendNetwork_IsValid(int value);
const RecommendNetwork RecommendNetwork_MIN = RECOMMEND_NETWORK_WIFI;
const RecommendNetwork RecommendNetwork_MAX = RECOMMEND_NETWORK_MOBILE;
const int RecommendNetwork_ARRAYSIZE = RecommendNetwork_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecommendNetwork_descriptor();
inline const ::std::string& RecommendNetwork_Name(RecommendNetwork value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecommendNetwork_descriptor(), value);
}
inline bool RecommendNetwork_Parse(
    const ::std::string& name, RecommendNetwork* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecommendNetwork>(
    RecommendNetwork_descriptor(), name, value);
}
enum CandidateType {
  CANDIDATE_TYPE_NORMAL = 0,
  CANDIDATE_TYPE_ZONE = 1,
  CANDIDATE_TYPE_VIDEO = 2,
  CANDIDATE_TYPE_TOP = 3,
  CandidateType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CandidateType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CandidateType_IsValid(int value);
const CandidateType CandidateType_MIN = CANDIDATE_TYPE_NORMAL;
const CandidateType CandidateType_MAX = CANDIDATE_TYPE_TOP;
const int CandidateType_ARRAYSIZE = CandidateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CandidateType_descriptor();
inline const ::std::string& CandidateType_Name(CandidateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CandidateType_descriptor(), value);
}
inline bool CandidateType_Parse(
    const ::std::string& name, CandidateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CandidateType>(
    CandidateType_descriptor(), name, value);
}
// ===================================================================

class Action : public ::google::protobuf::Message {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  void Swap(Action* other);

  // implements Message ----------------------------------------------

  inline Action* New() const { return New(NULL); }

  Action* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 click_time = 1;
  void clear_click_time();
  static const int kClickTimeFieldNumber = 1;
  ::google::protobuf::int32 click_time() const;
  void set_click_time(::google::protobuf::int32 value);

  // optional uint64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional fixed64 item_id = 3;
  void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // optional int32 stay_time = 4;
  void clear_stay_time();
  static const int kStayTimeFieldNumber = 4;
  ::google::protobuf::int32 stay_time() const;
  void set_stay_time(::google::protobuf::int32 value);

  // optional .ActionType action = 5;
  void clear_action();
  static const int kActionFieldNumber = 5;
  ::ActionType action() const;
  void set_action(::ActionType value);

  // optional bytes location = 6;
  void clear_location();
  static const int kLocationFieldNumber = 6;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  void set_location(const char* value);
  void set_location(const void* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // optional bytes srp_id = 7;
  void clear_srp_id();
  static const int kSrpIdFieldNumber = 7;
  const ::std::string& srp_id() const;
  void set_srp_id(const ::std::string& value);
  void set_srp_id(const char* value);
  void set_srp_id(const void* value, size_t size);
  ::std::string* mutable_srp_id();
  ::std::string* release_srp_id();
  void set_allocated_srp_id(::std::string* srp_id);

  // optional int32 click_source = 8;
  void clear_click_source();
  static const int kClickSourceFieldNumber = 8;
  ::google::protobuf::int32 click_source() const;
  void set_click_source(::google::protobuf::int32 value);

  // optional bytes dislike = 9;
  void clear_dislike();
  static const int kDislikeFieldNumber = 9;
  const ::std::string& dislike() const;
  void set_dislike(const ::std::string& value);
  void set_dislike(const char* value);
  void set_dislike(const void* value, size_t size);
  ::std::string* mutable_dislike();
  ::std::string* release_dislike();
  void set_allocated_dislike(::std::string* dislike);

  // optional bytes zone = 10;
  void clear_zone();
  static const int kZoneFieldNumber = 10;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const void* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // repeated fixed64 history_id = 11;
  int history_id_size() const;
  void clear_history_id();
  static const int kHistoryIdFieldNumber = 11;
  ::google::protobuf::uint64 history_id(int index) const;
  void set_history_id(int index, ::google::protobuf::uint64 value);
  void add_history_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      history_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_history_id();

  // @@protoc_insertion_point(class_scope:Action)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 click_time_;
  ::google::protobuf::int32 stay_time_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  int action_;
  ::google::protobuf::int32 click_source_;
  ::google::protobuf::internal::ArenaStringPtr srp_id_;
  ::google::protobuf::internal::ArenaStringPtr dislike_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > history_id_;
  mutable int _history_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Action* default_instance_;
};
// -------------------------------------------------------------------

class ItemTag : public ::google::protobuf::Message {
 public:
  ItemTag();
  virtual ~ItemTag();

  ItemTag(const ItemTag& from);

  inline ItemTag& operator=(const ItemTag& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemTag& default_instance();

  void Swap(ItemTag* other);

  // implements Message ----------------------------------------------

  inline ItemTag* New() const { return New(NULL); }

  ItemTag* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemTag& from);
  void MergeFrom(const ItemTag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemTag* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tag_id = 1;
  void clear_tag_id();
  static const int kTagIdFieldNumber = 1;
  ::google::protobuf::int32 tag_id() const;
  void set_tag_id(::google::protobuf::int32 value);

  // optional bytes tag_name = 2;
  void clear_tag_name();
  static const int kTagNameFieldNumber = 2;
  const ::std::string& tag_name() const;
  void set_tag_name(const ::std::string& value);
  void set_tag_name(const char* value);
  void set_tag_name(const void* value, size_t size);
  ::std::string* mutable_tag_name();
  ::std::string* release_tag_name();
  void set_allocated_tag_name(::std::string* tag_name);

  // optional float tag_power = 3;
  void clear_tag_power();
  static const int kTagPowerFieldNumber = 3;
  float tag_power() const;
  void set_tag_power(float value);

  // @@protoc_insertion_point(class_scope:ItemTag)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr tag_name_;
  ::google::protobuf::int32 tag_id_;
  float tag_power_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ItemTag* default_instance_;
};
// -------------------------------------------------------------------

class ItemWord : public ::google::protobuf::Message {
 public:
  ItemWord();
  virtual ~ItemWord();

  ItemWord(const ItemWord& from);

  inline ItemWord& operator=(const ItemWord& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemWord& default_instance();

  void Swap(ItemWord* other);

  // implements Message ----------------------------------------------

  inline ItemWord* New() const { return New(NULL); }

  ItemWord* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemWord& from);
  void MergeFrom(const ItemWord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemWord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes word = 1;
  void clear_word();
  static const int kWordFieldNumber = 1;
  const ::std::string& word() const;
  void set_word(const ::std::string& value);
  void set_word(const char* value);
  void set_word(const void* value, size_t size);
  ::std::string* mutable_word();
  ::std::string* release_word();
  void set_allocated_word(::std::string* word);

  // optional int32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::google::protobuf::int32 count() const;
  void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ItemWord)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr word_;
  ::google::protobuf::int32 count_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ItemWord* default_instance_;
};
// -------------------------------------------------------------------

class TopInfo : public ::google::protobuf::Message {
 public:
  TopInfo();
  virtual ~TopInfo();

  TopInfo(const TopInfo& from);

  inline TopInfo& operator=(const TopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopInfo& default_instance();

  void Swap(TopInfo* other);

  // implements Message ----------------------------------------------

  inline TopInfo* New() const { return New(NULL); }

  TopInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopInfo& from);
  void MergeFrom(const TopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TopType top_type = 1;
  void clear_top_type();
  static const int kTopTypeFieldNumber = 1;
  ::TopType top_type() const;
  void set_top_type(::TopType value);

  // repeated bytes top_srp_id = 2;
  int top_srp_id_size() const;
  void clear_top_srp_id();
  static const int kTopSrpIdFieldNumber = 2;
  const ::std::string& top_srp_id(int index) const;
  ::std::string* mutable_top_srp_id(int index);
  void set_top_srp_id(int index, const ::std::string& value);
  void set_top_srp_id(int index, const char* value);
  void set_top_srp_id(int index, const void* value, size_t size);
  ::std::string* add_top_srp_id();
  void add_top_srp_id(const ::std::string& value);
  void add_top_srp_id(const char* value);
  void add_top_srp_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top_srp_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top_srp_id();

  // repeated bytes top_circle_id = 3;
  int top_circle_id_size() const;
  void clear_top_circle_id();
  static const int kTopCircleIdFieldNumber = 3;
  const ::std::string& top_circle_id(int index) const;
  ::std::string* mutable_top_circle_id(int index);
  void set_top_circle_id(int index, const ::std::string& value);
  void set_top_circle_id(int index, const char* value);
  void set_top_circle_id(int index, const void* value, size_t size);
  ::std::string* add_top_circle_id();
  void add_top_circle_id(const ::std::string& value);
  void add_top_circle_id(const char* value);
  void add_top_circle_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& top_circle_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_top_circle_id();

  // @@protoc_insertion_point(class_scope:TopInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_srp_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> top_circle_id_;
  int top_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static TopInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemSource : public ::google::protobuf::Message {
 public:
  ItemSource();
  virtual ~ItemSource();

  ItemSource(const ItemSource& from);

  inline ItemSource& operator=(const ItemSource& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSource& default_instance();

  void Swap(ItemSource* other);

  // implements Message ----------------------------------------------

  inline ItemSource* New() const { return New(NULL); }

  ItemSource* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSource& from);
  void MergeFrom(const ItemSource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ItemSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 source_id = 1;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 1;
  ::google::protobuf::uint64 source_id() const;
  void set_source_id(::google::protobuf::uint64 value);

  // optional bytes source_name = 2;
  void clear_source_name();
  static const int kSourceNameFieldNumber = 2;
  const ::std::string& source_name() const;
  void set_source_name(const ::std::string& value);
  void set_source_name(const char* value);
  void set_source_name(const void* value, size_t size);
  ::std::string* mutable_source_name();
  ::std::string* release_source_name();
  void set_allocated_source_name(::std::string* source_name);

  // @@protoc_insertion_point(class_scope:ItemSource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 source_id_;
  ::google::protobuf::internal::ArenaStringPtr source_name_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static ItemSource* default_instance_;
};
// -------------------------------------------------------------------

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  inline Item* New() const { return New(NULL); }

  Item* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Item* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 item_id = 1;
  void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  ::google::protobuf::uint64 item_id() const;
  void set_item_id(::google::protobuf::uint64 value);

  // optional int32 publish_time = 2;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 2;
  ::google::protobuf::int32 publish_time() const;
  void set_publish_time(::google::protobuf::int32 value);

  // optional int32 push_time = 3;
  void clear_push_time();
  static const int kPushTimeFieldNumber = 3;
  ::google::protobuf::int32 push_time() const;
  void set_push_time(::google::protobuf::int32 value);

  // optional int32 picture_num = 4;
  void clear_picture_num();
  static const int kPictureNumFieldNumber = 4;
  ::google::protobuf::int32 picture_num() const;
  void set_picture_num(::google::protobuf::int32 value);

  // optional float power = 5;
  void clear_power();
  static const int kPowerFieldNumber = 5;
  float power() const;
  void set_power(float value);

  // optional .ItemType item_type = 6;
  void clear_item_type();
  static const int kItemTypeFieldNumber = 6;
  ::ItemType item_type() const;
  void set_item_type(::ItemType value);

  // repeated .ItemTag category = 7;
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 7;
  const ::ItemTag& category(int index) const;
  ::ItemTag* mutable_category(int index);
  ::ItemTag* add_category();
  ::google::protobuf::RepeatedPtrField< ::ItemTag >*
      mutable_category();
  const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
      category() const;

  // repeated .ItemWord word = 8;
  int word_size() const;
  void clear_word();
  static const int kWordFieldNumber = 8;
  const ::ItemWord& word(int index) const;
  ::ItemWord* mutable_word(int index);
  ::ItemWord* add_word();
  ::google::protobuf::RepeatedPtrField< ::ItemWord >*
      mutable_word();
  const ::google::protobuf::RepeatedPtrField< ::ItemWord >&
      word() const;

  // repeated .ItemTag srp = 9;
  int srp_size() const;
  void clear_srp();
  static const int kSrpFieldNumber = 9;
  const ::ItemTag& srp(int index) const;
  ::ItemTag* mutable_srp(int index);
  ::ItemTag* add_srp();
  ::google::protobuf::RepeatedPtrField< ::ItemTag >*
      mutable_srp();
  const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
      srp() const;

  // repeated .ItemTag circle = 10;
  int circle_size() const;
  void clear_circle();
  static const int kCircleFieldNumber = 10;
  const ::ItemTag& circle(int index) const;
  ::ItemTag* mutable_circle(int index);
  ::ItemTag* add_circle();
  ::google::protobuf::RepeatedPtrField< ::ItemTag >*
      mutable_circle();
  const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
      circle() const;

  // optional .TopInfo top_info = 11;
  bool has_top_info() const;
  void clear_top_info();
  static const int kTopInfoFieldNumber = 11;
  const ::TopInfo& top_info() const;
  ::TopInfo* mutable_top_info();
  ::TopInfo* release_top_info();
  void set_allocated_top_info(::TopInfo* top_info);

  // repeated bytes zone = 12;
  int zone_size() const;
  void clear_zone();
  static const int kZoneFieldNumber = 12;
  const ::std::string& zone(int index) const;
  ::std::string* mutable_zone(int index);
  void set_zone(int index, const ::std::string& value);
  void set_zone(int index, const char* value);
  void set_zone(int index, const void* value, size_t size);
  ::std::string* add_zone();
  void add_zone(const ::std::string& value);
  void add_zone(const char* value);
  void add_zone(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& zone() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_zone();

  // optional .ItemSource data_source = 13;
  bool has_data_source() const;
  void clear_data_source();
  static const int kDataSourceFieldNumber = 13;
  const ::ItemSource& data_source() const;
  ::ItemSource* mutable_data_source();
  ::ItemSource* release_data_source();
  void set_allocated_data_source(::ItemSource* data_source);

  // @@protoc_insertion_point(class_scope:Item)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 item_id_;
  ::google::protobuf::int32 publish_time_;
  ::google::protobuf::int32 push_time_;
  ::google::protobuf::int32 picture_num_;
  float power_;
  ::google::protobuf::RepeatedPtrField< ::ItemTag > category_;
  ::google::protobuf::RepeatedPtrField< ::ItemWord > word_;
  ::google::protobuf::RepeatedPtrField< ::ItemTag > srp_;
  ::google::protobuf::RepeatedPtrField< ::ItemTag > circle_;
  ::TopInfo* top_info_;
  ::google::protobuf::RepeatedPtrField< ::std::string> zone_;
  ::ItemSource* data_source_;
  int item_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class Subscribe : public ::google::protobuf::Message {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscribe& default_instance();

  void Swap(Subscribe* other);

  // implements Message ----------------------------------------------

  inline Subscribe* New() const { return New(NULL); }

  Subscribe* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // repeated bytes srp_id = 2;
  int srp_id_size() const;
  void clear_srp_id();
  static const int kSrpIdFieldNumber = 2;
  const ::std::string& srp_id(int index) const;
  ::std::string* mutable_srp_id(int index);
  void set_srp_id(int index, const ::std::string& value);
  void set_srp_id(int index, const char* value);
  void set_srp_id(int index, const void* value, size_t size);
  ::std::string* add_srp_id();
  void add_srp_id(const ::std::string& value);
  void add_srp_id(const char* value);
  void add_srp_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& srp_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_srp_id();

  // repeated bytes circle_id = 3;
  int circle_id_size() const;
  void clear_circle_id();
  static const int kCircleIdFieldNumber = 3;
  const ::std::string& circle_id(int index) const;
  ::std::string* mutable_circle_id(int index);
  void set_circle_id(int index, const ::std::string& value);
  void set_circle_id(int index, const char* value);
  void set_circle_id(int index, const void* value, size_t size);
  ::std::string* add_circle_id();
  void add_circle_id(const ::std::string& value);
  void add_circle_id(const char* value);
  void add_circle_id(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& circle_id() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_circle_id();

  // @@protoc_insertion_point(class_scope:Subscribe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> srp_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> circle_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Subscribe* default_instance_;
};
// -------------------------------------------------------------------

class Recommend : public ::google::protobuf::Message {
 public:
  Recommend();
  virtual ~Recommend();

  Recommend(const Recommend& from);

  inline Recommend& operator=(const Recommend& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Recommend& default_instance();

  void Swap(Recommend* other);

  // implements Message ----------------------------------------------

  inline Recommend* New() const { return New(NULL); }

  Recommend* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Recommend& from);
  void MergeFrom(const Recommend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Recommend* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 log = 1;
  void clear_log();
  static const int kLogFieldNumber = 1;
  ::google::protobuf::int32 log() const;
  void set_log(::google::protobuf::int32 value);

  // optional uint64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional int32 request_num = 3;
  void clear_request_num();
  static const int kRequestNumFieldNumber = 3;
  ::google::protobuf::int32 request_num() const;
  void set_request_num(::google::protobuf::int32 value);

  // optional .RecommendType recommend_type = 4;
  void clear_recommend_type();
  static const int kRecommendTypeFieldNumber = 4;
  ::RecommendType recommend_type() const;
  void set_recommend_type(::RecommendType value);

  // optional int32 beg_time = 5;
  void clear_beg_time();
  static const int kBegTimeFieldNumber = 5;
  ::google::protobuf::int32 beg_time() const;
  void set_beg_time(::google::protobuf::int32 value);

  // optional int32 end_time = 6;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 6;
  ::google::protobuf::int32 end_time() const;
  void set_end_time(::google::protobuf::int32 value);

  // optional bytes zone = 7;
  void clear_zone();
  static const int kZoneFieldNumber = 7;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  void set_zone(const char* value);
  void set_zone(const void* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // optional .RecommendNetwork network = 8;
  void clear_network();
  static const int kNetworkFieldNumber = 8;
  ::RecommendNetwork network() const;
  void set_network(::RecommendNetwork value);

  // @@protoc_insertion_point(class_scope:Recommend)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 log_;
  ::google::protobuf::int32 request_num_;
  int recommend_type_;
  ::google::protobuf::int32 beg_time_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::int32 end_time_;
  int network_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Recommend* default_instance_;
};
// -------------------------------------------------------------------

class CandidateSetBase : public ::google::protobuf::Message {
 public:
  CandidateSetBase();
  virtual ~CandidateSetBase();

  CandidateSetBase(const CandidateSetBase& from);

  inline CandidateSetBase& operator=(const CandidateSetBase& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CandidateSetBase& default_instance();

  void Swap(CandidateSetBase* other);

  // implements Message ----------------------------------------------

  inline CandidateSetBase* New() const { return New(NULL); }

  CandidateSetBase* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CandidateSetBase& from);
  void MergeFrom(const CandidateSetBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CandidateSetBase* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // repeated fixed64 item_id = 2;
  int item_id_size() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::uint64 item_id(int index) const;
  void set_item_id(int index, ::google::protobuf::uint64 value);
  void add_item_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_item_id();

  // repeated fixed64 history_id = 3;
  int history_id_size() const;
  void clear_history_id();
  static const int kHistoryIdFieldNumber = 3;
  ::google::protobuf::uint64 history_id(int index) const;
  void set_history_id(int index, ::google::protobuf::uint64 value);
  void add_history_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      history_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_history_id();

  // @@protoc_insertion_point(class_scope:CandidateSetBase)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > item_id_;
  mutable int _item_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > history_id_;
  mutable int _history_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CandidateSetBase* default_instance_;
};
// -------------------------------------------------------------------

class CandidateSetPayload : public ::google::protobuf::Message {
 public:
  CandidateSetPayload();
  virtual ~CandidateSetPayload();

  CandidateSetPayload(const CandidateSetPayload& from);

  inline CandidateSetPayload& operator=(const CandidateSetPayload& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CandidateSetPayload& default_instance();

  void Swap(CandidateSetPayload* other);

  // implements Message ----------------------------------------------

  inline CandidateSetPayload* New() const { return New(NULL); }

  CandidateSetPayload* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CandidateSetPayload& from);
  void MergeFrom(const CandidateSetPayload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CandidateSetPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float power = 1;
  int power_size() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power(int index) const;
  void set_power(int index, float value);
  void add_power(float value);
  const ::google::protobuf::RepeatedField< float >&
      power() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_power();

  // repeated int32 publish_time = 2 [packed = true];
  int publish_time_size() const;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 2;
  ::google::protobuf::int32 publish_time(int index) const;
  void set_publish_time(int index, ::google::protobuf::int32 value);
  void add_publish_time(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      publish_time() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_publish_time();

  // repeated int32 category_id = 3 [packed = true];
  int category_id_size() const;
  void clear_category_id();
  static const int kCategoryIdFieldNumber = 3;
  ::google::protobuf::int32 category_id(int index) const;
  void set_category_id(int index, ::google::protobuf::int32 value);
  void add_category_id(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category_id();

  // repeated int32 picture_num = 4 [packed = true];
  int picture_num_size() const;
  void clear_picture_num();
  static const int kPictureNumFieldNumber = 4;
  ::google::protobuf::int32 picture_num(int index) const;
  void set_picture_num(int index, ::google::protobuf::int32 value);
  void add_picture_num(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      picture_num() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_picture_num();

  // repeated .CandidateType type = 5 [packed = true];
  int type_size() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  ::CandidateType type(int index) const;
  void set_type(int index, ::CandidateType value);
  void add_type(::CandidateType value);
  const ::google::protobuf::RepeatedField<int>& type() const;
  ::google::protobuf::RepeatedField<int>* mutable_type();

  // @@protoc_insertion_point(class_scope:CandidateSetPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > power_;
  mutable int _power_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > publish_time_;
  mutable int _publish_time_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_id_;
  mutable int _category_id_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > picture_num_;
  mutable int _picture_num_cached_byte_size_;
  ::google::protobuf::RepeatedField<int> type_;
  mutable int _type_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CandidateSetPayload* default_instance_;
};
// -------------------------------------------------------------------

class CandidateSet : public ::google::protobuf::Message {
 public:
  CandidateSet();
  virtual ~CandidateSet();

  CandidateSet(const CandidateSet& from);

  inline CandidateSet& operator=(const CandidateSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CandidateSet& default_instance();

  void Swap(CandidateSet* other);

  // implements Message ----------------------------------------------

  inline CandidateSet* New() const { return New(NULL); }

  CandidateSet* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CandidateSet& from);
  void MergeFrom(const CandidateSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CandidateSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CandidateSetBase base = 1;
  bool has_base() const;
  void clear_base();
  static const int kBaseFieldNumber = 1;
  const ::CandidateSetBase& base() const;
  ::CandidateSetBase* mutable_base();
  ::CandidateSetBase* release_base();
  void set_allocated_base(::CandidateSetBase* base);

  // optional .CandidateSetPayload payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::CandidateSetPayload& payload() const;
  ::CandidateSetPayload* mutable_payload();
  ::CandidateSetPayload* release_payload();
  void set_allocated_payload(::CandidateSetPayload* payload);

  // @@protoc_insertion_point(class_scope:CandidateSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::CandidateSetBase* base_;
  ::CandidateSetPayload* payload_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static CandidateSet* default_instance_;
};
// -------------------------------------------------------------------

class User : public ::google::protobuf::Message {
 public:
  User();
  virtual ~User();

  User(const User& from);

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const User& default_instance();

  void Swap(User* other);

  // implements Message ----------------------------------------------

  inline User* New() const { return New(NULL); }

  User* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(User* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:User)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static User* default_instance_;
};
// -------------------------------------------------------------------

class UserStatus : public ::google::protobuf::Message {
 public:
  UserStatus();
  virtual ~UserStatus();

  UserStatus(const UserStatus& from);

  inline UserStatus& operator=(const UserStatus& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStatus& default_instance();

  void Swap(UserStatus* other);

  // implements Message ----------------------------------------------

  inline UserStatus* New() const { return New(NULL); }

  UserStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserStatus& from);
  void MergeFrom(const UserStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 is_new_user = 1;
  void clear_is_new_user();
  static const int kIsNewUserFieldNumber = 1;
  ::google::protobuf::int32 is_new_user() const;
  void set_is_new_user(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:UserStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 is_new_user_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static UserStatus* default_instance_;
};
// -------------------------------------------------------------------

class Feedback : public ::google::protobuf::Message {
 public:
  Feedback();
  virtual ~Feedback();

  Feedback(const Feedback& from);

  inline Feedback& operator=(const Feedback& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Feedback& default_instance();

  void Swap(Feedback* other);

  // implements Message ----------------------------------------------

  inline Feedback* New() const { return New(NULL); }

  Feedback* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Feedback& from);
  void MergeFrom(const Feedback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feedback* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // repeated fixed64 item_id = 2;
  int item_id_size() const;
  void clear_item_id();
  static const int kItemIdFieldNumber = 2;
  ::google::protobuf::uint64 item_id(int index) const;
  void set_item_id(int index, ::google::protobuf::uint64 value);
  void add_item_id(::google::protobuf::uint64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      item_id() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_item_id();

  // @@protoc_insertion_point(class_scope:Feedback)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > item_id_;
  mutable int _item_id_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Feedback* default_instance_;
};
// -------------------------------------------------------------------

class FeedbackRespond : public ::google::protobuf::Message {
 public:
  FeedbackRespond();
  virtual ~FeedbackRespond();

  FeedbackRespond(const FeedbackRespond& from);

  inline FeedbackRespond& operator=(const FeedbackRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeedbackRespond& default_instance();

  void Swap(FeedbackRespond* other);

  // implements Message ----------------------------------------------

  inline FeedbackRespond* New() const { return New(NULL); }

  FeedbackRespond* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FeedbackRespond& from);
  void MergeFrom(const FeedbackRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedbackRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 respond = 1;
  void clear_respond();
  static const int kRespondFieldNumber = 1;
  ::google::protobuf::int32 respond() const;
  void set_respond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:FeedbackRespond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 respond_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static FeedbackRespond* default_instance_;
};
// -------------------------------------------------------------------

class AlgorithmPower : public ::google::protobuf::Message {
 public:
  AlgorithmPower();
  virtual ~AlgorithmPower();

  AlgorithmPower(const AlgorithmPower& from);

  inline AlgorithmPower& operator=(const AlgorithmPower& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgorithmPower& default_instance();

  void Swap(AlgorithmPower* other);

  // implements Message ----------------------------------------------

  inline AlgorithmPower* New() const { return New(NULL); }

  AlgorithmPower* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlgorithmPower& from);
  void MergeFrom(const AlgorithmPower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlgorithmPower* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float power = 1;
  int power_size() const;
  void clear_power();
  static const int kPowerFieldNumber = 1;
  float power(int index) const;
  void set_power(int index, float value);
  void add_power(float value);
  const ::google::protobuf::RepeatedField< float >&
      power() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_power();

  // @@protoc_insertion_point(class_scope:AlgorithmPower)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > power_;
  mutable int _power_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AlgorithmPower* default_instance_;
};
// -------------------------------------------------------------------

class Category : public ::google::protobuf::Message {
 public:
  Category();
  virtual ~Category();

  Category(const Category& from);

  inline Category& operator=(const Category& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Category& default_instance();

  void Swap(Category* other);

  // implements Message ----------------------------------------------

  inline Category* New() const { return New(NULL); }

  Category* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Category& from);
  void MergeFrom(const Category& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Category* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::uint64 user_id() const;
  void set_user_id(::google::protobuf::uint64 value);

  // optional int32 request_num = 2;
  void clear_request_num();
  static const int kRequestNumFieldNumber = 2;
  ::google::protobuf::int32 request_num() const;
  void set_request_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Category)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint64 user_id_;
  ::google::protobuf::int32 request_num_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Category* default_instance_;
};
// -------------------------------------------------------------------

class AlgorithmCategory : public ::google::protobuf::Message {
 public:
  AlgorithmCategory();
  virtual ~AlgorithmCategory();

  AlgorithmCategory(const AlgorithmCategory& from);

  inline AlgorithmCategory& operator=(const AlgorithmCategory& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AlgorithmCategory& default_instance();

  void Swap(AlgorithmCategory* other);

  // implements Message ----------------------------------------------

  inline AlgorithmCategory* New() const { return New(NULL); }

  AlgorithmCategory* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AlgorithmCategory& from);
  void MergeFrom(const AlgorithmCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AlgorithmCategory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 category = 1 [packed = true];
  int category_size() const;
  void clear_category();
  static const int kCategoryFieldNumber = 1;
  ::google::protobuf::int32 category(int index) const;
  void set_category(int index, ::google::protobuf::int32 value);
  void add_category(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      category() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_category();

  // @@protoc_insertion_point(class_scope:AlgorithmCategory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > category_;
  mutable int _category_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static AlgorithmCategory* default_instance_;
};
// -------------------------------------------------------------------

class TransferRequest : public ::google::protobuf::Message {
 public:
  TransferRequest();
  virtual ~TransferRequest();

  TransferRequest(const TransferRequest& from);

  inline TransferRequest& operator=(const TransferRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferRequest& default_instance();

  void Swap(TransferRequest* other);

  // implements Message ----------------------------------------------

  inline TransferRequest* New() const { return New(NULL); }

  TransferRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferRequest& from);
  void MergeFrom(const TransferRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 main_protocol = 1;
  void clear_main_protocol();
  static const int kMainProtocolFieldNumber = 1;
  ::google::protobuf::int32 main_protocol() const;
  void set_main_protocol(::google::protobuf::int32 value);

  // optional int32 sub_protocol = 2;
  void clear_sub_protocol();
  static const int kSubProtocolFieldNumber = 2;
  ::google::protobuf::int32 sub_protocol() const;
  void set_sub_protocol(::google::protobuf::int32 value);

  // optional .google.protobuf.Any protocol = 3;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 3;
  const ::google::protobuf::Any& protocol() const;
  ::google::protobuf::Any* mutable_protocol();
  ::google::protobuf::Any* release_protocol();
  void set_allocated_protocol(::google::protobuf::Any* protocol);

  // @@protoc_insertion_point(class_scope:TransferRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 main_protocol_;
  ::google::protobuf::int32 sub_protocol_;
  ::google::protobuf::Any* protocol_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static TransferRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransferRespond : public ::google::protobuf::Message {
 public:
  TransferRespond();
  virtual ~TransferRespond();

  TransferRespond(const TransferRespond& from);

  inline TransferRespond& operator=(const TransferRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TransferRespond& default_instance();

  void Swap(TransferRespond* other);

  // implements Message ----------------------------------------------

  inline TransferRespond* New() const { return New(NULL); }

  TransferRespond* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransferRespond& from);
  void MergeFrom(const TransferRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TransferRespond* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 respond_code = 1;
  void clear_respond_code();
  static const int kRespondCodeFieldNumber = 1;
  ::google::protobuf::int32 respond_code() const;
  void set_respond_code(::google::protobuf::int32 value);

  // optional .google.protobuf.Any protocol = 2;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 2;
  const ::google::protobuf::Any& protocol() const;
  ::google::protobuf::Any* mutable_protocol();
  ::google::protobuf::Any* release_protocol();
  void set_allocated_protocol(::google::protobuf::Any* protocol);

  // @@protoc_insertion_point(class_scope:TransferRespond)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::Any* protocol_;
  ::google::protobuf::int32 respond_code_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static TransferRespond* default_instance_;
};
// -------------------------------------------------------------------

class HeartBeat : public ::google::protobuf::Message {
 public:
  HeartBeat();
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeartBeat& default_instance();

  void Swap(HeartBeat* other);

  // implements Message ----------------------------------------------

  inline HeartBeat* New() const { return New(NULL); }

  HeartBeat* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeartBeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes heartbeat = 1;
  void clear_heartbeat();
  static const int kHeartbeatFieldNumber = 1;
  const ::std::string& heartbeat() const;
  void set_heartbeat(const ::std::string& value);
  void set_heartbeat(const char* value);
  void set_heartbeat(const void* value, size_t size);
  ::std::string* mutable_heartbeat();
  ::std::string* release_heartbeat();
  void set_allocated_heartbeat(::std::string* heartbeat);

  // @@protoc_insertion_point(class_scope:HeartBeat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr heartbeat_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static HeartBeat* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// optional int32 click_time = 1;
inline void Action::clear_click_time() {
  click_time_ = 0;
}
inline ::google::protobuf::int32 Action::click_time() const {
  // @@protoc_insertion_point(field_get:Action.click_time)
  return click_time_;
}
inline void Action::set_click_time(::google::protobuf::int32 value) {
  
  click_time_ = value;
  // @@protoc_insertion_point(field_set:Action.click_time)
}

// optional uint64 user_id = 2;
inline void Action::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Action::user_id() const {
  // @@protoc_insertion_point(field_get:Action.user_id)
  return user_id_;
}
inline void Action::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Action.user_id)
}

// optional fixed64 item_id = 3;
inline void Action::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Action::item_id() const {
  // @@protoc_insertion_point(field_get:Action.item_id)
  return item_id_;
}
inline void Action::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Action.item_id)
}

// optional int32 stay_time = 4;
inline void Action::clear_stay_time() {
  stay_time_ = 0;
}
inline ::google::protobuf::int32 Action::stay_time() const {
  // @@protoc_insertion_point(field_get:Action.stay_time)
  return stay_time_;
}
inline void Action::set_stay_time(::google::protobuf::int32 value) {
  
  stay_time_ = value;
  // @@protoc_insertion_point(field_set:Action.stay_time)
}

// optional .ActionType action = 5;
inline void Action::clear_action() {
  action_ = 0;
}
inline ::ActionType Action::action() const {
  // @@protoc_insertion_point(field_get:Action.action)
  return static_cast< ::ActionType >(action_);
}
inline void Action::set_action(::ActionType value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Action.action)
}

// optional bytes location = 6;
inline void Action::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::location() const {
  // @@protoc_insertion_point(field_get:Action.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.location)
}
inline void Action::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.location)
}
inline void Action::set_location(const void* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.location)
}
inline ::std::string* Action::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:Action.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_location() {
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:Action.location)
}

// optional bytes srp_id = 7;
inline void Action::clear_srp_id() {
  srp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::srp_id() const {
  // @@protoc_insertion_point(field_get:Action.srp_id)
  return srp_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_srp_id(const ::std::string& value) {
  
  srp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.srp_id)
}
inline void Action::set_srp_id(const char* value) {
  
  srp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.srp_id)
}
inline void Action::set_srp_id(const void* value, size_t size) {
  
  srp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.srp_id)
}
inline ::std::string* Action::mutable_srp_id() {
  
  // @@protoc_insertion_point(field_mutable:Action.srp_id)
  return srp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_srp_id() {
  
  return srp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_srp_id(::std::string* srp_id) {
  if (srp_id != NULL) {
    
  } else {
    
  }
  srp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srp_id);
  // @@protoc_insertion_point(field_set_allocated:Action.srp_id)
}

// optional int32 click_source = 8;
inline void Action::clear_click_source() {
  click_source_ = 0;
}
inline ::google::protobuf::int32 Action::click_source() const {
  // @@protoc_insertion_point(field_get:Action.click_source)
  return click_source_;
}
inline void Action::set_click_source(::google::protobuf::int32 value) {
  
  click_source_ = value;
  // @@protoc_insertion_point(field_set:Action.click_source)
}

// optional bytes dislike = 9;
inline void Action::clear_dislike() {
  dislike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::dislike() const {
  // @@protoc_insertion_point(field_get:Action.dislike)
  return dislike_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_dislike(const ::std::string& value) {
  
  dislike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.dislike)
}
inline void Action::set_dislike(const char* value) {
  
  dislike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.dislike)
}
inline void Action::set_dislike(const void* value, size_t size) {
  
  dislike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.dislike)
}
inline ::std::string* Action::mutable_dislike() {
  
  // @@protoc_insertion_point(field_mutable:Action.dislike)
  return dislike_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_dislike() {
  
  return dislike_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_dislike(::std::string* dislike) {
  if (dislike != NULL) {
    
  } else {
    
  }
  dislike_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dislike);
  // @@protoc_insertion_point(field_set_allocated:Action.dislike)
}

// optional bytes zone = 10;
inline void Action::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Action::zone() const {
  // @@protoc_insertion_point(field_get:Action.zone)
  return zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.zone)
}
inline void Action::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.zone)
}
inline void Action::set_zone(const void* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.zone)
}
inline ::std::string* Action::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:Action.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_zone() {
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:Action.zone)
}

// repeated fixed64 history_id = 11;
inline int Action::history_id_size() const {
  return history_id_.size();
}
inline void Action::clear_history_id() {
  history_id_.Clear();
}
inline ::google::protobuf::uint64 Action::history_id(int index) const {
  // @@protoc_insertion_point(field_get:Action.history_id)
  return history_id_.Get(index);
}
inline void Action::set_history_id(int index, ::google::protobuf::uint64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Action.history_id)
}
inline void Action::add_history_id(::google::protobuf::uint64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:Action.history_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Action::history_id() const {
  // @@protoc_insertion_point(field_list:Action.history_id)
  return history_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Action::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:Action.history_id)
  return &history_id_;
}

// -------------------------------------------------------------------

// ItemTag

// optional int32 tag_id = 1;
inline void ItemTag::clear_tag_id() {
  tag_id_ = 0;
}
inline ::google::protobuf::int32 ItemTag::tag_id() const {
  // @@protoc_insertion_point(field_get:ItemTag.tag_id)
  return tag_id_;
}
inline void ItemTag::set_tag_id(::google::protobuf::int32 value) {
  
  tag_id_ = value;
  // @@protoc_insertion_point(field_set:ItemTag.tag_id)
}

// optional bytes tag_name = 2;
inline void ItemTag::clear_tag_name() {
  tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemTag::tag_name() const {
  // @@protoc_insertion_point(field_get:ItemTag.tag_name)
  return tag_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemTag::set_tag_name(const ::std::string& value) {
  
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemTag.tag_name)
}
inline void ItemTag::set_tag_name(const char* value) {
  
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemTag.tag_name)
}
inline void ItemTag::set_tag_name(const void* value, size_t size) {
  
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemTag.tag_name)
}
inline ::std::string* ItemTag::mutable_tag_name() {
  
  // @@protoc_insertion_point(field_mutable:ItemTag.tag_name)
  return tag_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemTag::release_tag_name() {
  
  return tag_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemTag::set_allocated_tag_name(::std::string* tag_name) {
  if (tag_name != NULL) {
    
  } else {
    
  }
  tag_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag_name);
  // @@protoc_insertion_point(field_set_allocated:ItemTag.tag_name)
}

// optional float tag_power = 3;
inline void ItemTag::clear_tag_power() {
  tag_power_ = 0;
}
inline float ItemTag::tag_power() const {
  // @@protoc_insertion_point(field_get:ItemTag.tag_power)
  return tag_power_;
}
inline void ItemTag::set_tag_power(float value) {
  
  tag_power_ = value;
  // @@protoc_insertion_point(field_set:ItemTag.tag_power)
}

// -------------------------------------------------------------------

// ItemWord

// optional bytes word = 1;
inline void ItemWord::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemWord::word() const {
  // @@protoc_insertion_point(field_get:ItemWord.word)
  return word_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemWord::set_word(const ::std::string& value) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemWord.word)
}
inline void ItemWord::set_word(const char* value) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemWord.word)
}
inline void ItemWord::set_word(const void* value, size_t size) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemWord.word)
}
inline ::std::string* ItemWord::mutable_word() {
  
  // @@protoc_insertion_point(field_mutable:ItemWord.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemWord::release_word() {
  
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemWord::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    
  } else {
    
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:ItemWord.word)
}

// optional int32 count = 2;
inline void ItemWord::clear_count() {
  count_ = 0;
}
inline ::google::protobuf::int32 ItemWord::count() const {
  // @@protoc_insertion_point(field_get:ItemWord.count)
  return count_;
}
inline void ItemWord::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ItemWord.count)
}

// -------------------------------------------------------------------

// TopInfo

// optional .TopType top_type = 1;
inline void TopInfo::clear_top_type() {
  top_type_ = 0;
}
inline ::TopType TopInfo::top_type() const {
  // @@protoc_insertion_point(field_get:TopInfo.top_type)
  return static_cast< ::TopType >(top_type_);
}
inline void TopInfo::set_top_type(::TopType value) {
  
  top_type_ = value;
  // @@protoc_insertion_point(field_set:TopInfo.top_type)
}

// repeated bytes top_srp_id = 2;
inline int TopInfo::top_srp_id_size() const {
  return top_srp_id_.size();
}
inline void TopInfo::clear_top_srp_id() {
  top_srp_id_.Clear();
}
inline const ::std::string& TopInfo::top_srp_id(int index) const {
  // @@protoc_insertion_point(field_get:TopInfo.top_srp_id)
  return top_srp_id_.Get(index);
}
inline ::std::string* TopInfo::mutable_top_srp_id(int index) {
  // @@protoc_insertion_point(field_mutable:TopInfo.top_srp_id)
  return top_srp_id_.Mutable(index);
}
inline void TopInfo::set_top_srp_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TopInfo.top_srp_id)
  top_srp_id_.Mutable(index)->assign(value);
}
inline void TopInfo::set_top_srp_id(int index, const char* value) {
  top_srp_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TopInfo.top_srp_id)
}
inline void TopInfo::set_top_srp_id(int index, const void* value, size_t size) {
  top_srp_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TopInfo.top_srp_id)
}
inline ::std::string* TopInfo::add_top_srp_id() {
  return top_srp_id_.Add();
}
inline void TopInfo::add_top_srp_id(const ::std::string& value) {
  top_srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TopInfo.top_srp_id)
}
inline void TopInfo::add_top_srp_id(const char* value) {
  top_srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TopInfo.top_srp_id)
}
inline void TopInfo::add_top_srp_id(const void* value, size_t size) {
  top_srp_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TopInfo.top_srp_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopInfo::top_srp_id() const {
  // @@protoc_insertion_point(field_list:TopInfo.top_srp_id)
  return top_srp_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopInfo::mutable_top_srp_id() {
  // @@protoc_insertion_point(field_mutable_list:TopInfo.top_srp_id)
  return &top_srp_id_;
}

// repeated bytes top_circle_id = 3;
inline int TopInfo::top_circle_id_size() const {
  return top_circle_id_.size();
}
inline void TopInfo::clear_top_circle_id() {
  top_circle_id_.Clear();
}
inline const ::std::string& TopInfo::top_circle_id(int index) const {
  // @@protoc_insertion_point(field_get:TopInfo.top_circle_id)
  return top_circle_id_.Get(index);
}
inline ::std::string* TopInfo::mutable_top_circle_id(int index) {
  // @@protoc_insertion_point(field_mutable:TopInfo.top_circle_id)
  return top_circle_id_.Mutable(index);
}
inline void TopInfo::set_top_circle_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TopInfo.top_circle_id)
  top_circle_id_.Mutable(index)->assign(value);
}
inline void TopInfo::set_top_circle_id(int index, const char* value) {
  top_circle_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TopInfo.top_circle_id)
}
inline void TopInfo::set_top_circle_id(int index, const void* value, size_t size) {
  top_circle_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TopInfo.top_circle_id)
}
inline ::std::string* TopInfo::add_top_circle_id() {
  return top_circle_id_.Add();
}
inline void TopInfo::add_top_circle_id(const ::std::string& value) {
  top_circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TopInfo.top_circle_id)
}
inline void TopInfo::add_top_circle_id(const char* value) {
  top_circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TopInfo.top_circle_id)
}
inline void TopInfo::add_top_circle_id(const void* value, size_t size) {
  top_circle_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TopInfo.top_circle_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopInfo::top_circle_id() const {
  // @@protoc_insertion_point(field_list:TopInfo.top_circle_id)
  return top_circle_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopInfo::mutable_top_circle_id() {
  // @@protoc_insertion_point(field_mutable_list:TopInfo.top_circle_id)
  return &top_circle_id_;
}

// -------------------------------------------------------------------

// ItemSource

// optional fixed64 source_id = 1;
inline void ItemSource::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ItemSource::source_id() const {
  // @@protoc_insertion_point(field_get:ItemSource.source_id)
  return source_id_;
}
inline void ItemSource::set_source_id(::google::protobuf::uint64 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:ItemSource.source_id)
}

// optional bytes source_name = 2;
inline void ItemSource::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemSource::source_name() const {
  // @@protoc_insertion_point(field_get:ItemSource.source_name)
  return source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemSource::set_source_name(const ::std::string& value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemSource.source_name)
}
inline void ItemSource::set_source_name(const char* value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemSource.source_name)
}
inline void ItemSource::set_source_name(const void* value, size_t size) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemSource.source_name)
}
inline ::std::string* ItemSource::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:ItemSource.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemSource::release_source_name() {
  
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemSource::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:ItemSource.source_name)
}

// -------------------------------------------------------------------

// Item

// optional fixed64 item_id = 1;
inline void Item::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Item::item_id() const {
  // @@protoc_insertion_point(field_get:Item.item_id)
  return item_id_;
}
inline void Item::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Item.item_id)
}

// optional int32 publish_time = 2;
inline void Item::clear_publish_time() {
  publish_time_ = 0;
}
inline ::google::protobuf::int32 Item::publish_time() const {
  // @@protoc_insertion_point(field_get:Item.publish_time)
  return publish_time_;
}
inline void Item::set_publish_time(::google::protobuf::int32 value) {
  
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:Item.publish_time)
}

// optional int32 push_time = 3;
inline void Item::clear_push_time() {
  push_time_ = 0;
}
inline ::google::protobuf::int32 Item::push_time() const {
  // @@protoc_insertion_point(field_get:Item.push_time)
  return push_time_;
}
inline void Item::set_push_time(::google::protobuf::int32 value) {
  
  push_time_ = value;
  // @@protoc_insertion_point(field_set:Item.push_time)
}

// optional int32 picture_num = 4;
inline void Item::clear_picture_num() {
  picture_num_ = 0;
}
inline ::google::protobuf::int32 Item::picture_num() const {
  // @@protoc_insertion_point(field_get:Item.picture_num)
  return picture_num_;
}
inline void Item::set_picture_num(::google::protobuf::int32 value) {
  
  picture_num_ = value;
  // @@protoc_insertion_point(field_set:Item.picture_num)
}

// optional float power = 5;
inline void Item::clear_power() {
  power_ = 0;
}
inline float Item::power() const {
  // @@protoc_insertion_point(field_get:Item.power)
  return power_;
}
inline void Item::set_power(float value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:Item.power)
}

// optional .ItemType item_type = 6;
inline void Item::clear_item_type() {
  item_type_ = 0;
}
inline ::ItemType Item::item_type() const {
  // @@protoc_insertion_point(field_get:Item.item_type)
  return static_cast< ::ItemType >(item_type_);
}
inline void Item::set_item_type(::ItemType value) {
  
  item_type_ = value;
  // @@protoc_insertion_point(field_set:Item.item_type)
}

// repeated .ItemTag category = 7;
inline int Item::category_size() const {
  return category_.size();
}
inline void Item::clear_category() {
  category_.Clear();
}
inline const ::ItemTag& Item::category(int index) const {
  // @@protoc_insertion_point(field_get:Item.category)
  return category_.Get(index);
}
inline ::ItemTag* Item::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:Item.category)
  return category_.Mutable(index);
}
inline ::ItemTag* Item::add_category() {
  // @@protoc_insertion_point(field_add:Item.category)
  return category_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ItemTag >*
Item::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:Item.category)
  return &category_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
Item::category() const {
  // @@protoc_insertion_point(field_list:Item.category)
  return category_;
}

// repeated .ItemWord word = 8;
inline int Item::word_size() const {
  return word_.size();
}
inline void Item::clear_word() {
  word_.Clear();
}
inline const ::ItemWord& Item::word(int index) const {
  // @@protoc_insertion_point(field_get:Item.word)
  return word_.Get(index);
}
inline ::ItemWord* Item::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:Item.word)
  return word_.Mutable(index);
}
inline ::ItemWord* Item::add_word() {
  // @@protoc_insertion_point(field_add:Item.word)
  return word_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ItemWord >*
Item::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:Item.word)
  return &word_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemWord >&
Item::word() const {
  // @@protoc_insertion_point(field_list:Item.word)
  return word_;
}

// repeated .ItemTag srp = 9;
inline int Item::srp_size() const {
  return srp_.size();
}
inline void Item::clear_srp() {
  srp_.Clear();
}
inline const ::ItemTag& Item::srp(int index) const {
  // @@protoc_insertion_point(field_get:Item.srp)
  return srp_.Get(index);
}
inline ::ItemTag* Item::mutable_srp(int index) {
  // @@protoc_insertion_point(field_mutable:Item.srp)
  return srp_.Mutable(index);
}
inline ::ItemTag* Item::add_srp() {
  // @@protoc_insertion_point(field_add:Item.srp)
  return srp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ItemTag >*
Item::mutable_srp() {
  // @@protoc_insertion_point(field_mutable_list:Item.srp)
  return &srp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
Item::srp() const {
  // @@protoc_insertion_point(field_list:Item.srp)
  return srp_;
}

// repeated .ItemTag circle = 10;
inline int Item::circle_size() const {
  return circle_.size();
}
inline void Item::clear_circle() {
  circle_.Clear();
}
inline const ::ItemTag& Item::circle(int index) const {
  // @@protoc_insertion_point(field_get:Item.circle)
  return circle_.Get(index);
}
inline ::ItemTag* Item::mutable_circle(int index) {
  // @@protoc_insertion_point(field_mutable:Item.circle)
  return circle_.Mutable(index);
}
inline ::ItemTag* Item::add_circle() {
  // @@protoc_insertion_point(field_add:Item.circle)
  return circle_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ItemTag >*
Item::mutable_circle() {
  // @@protoc_insertion_point(field_mutable_list:Item.circle)
  return &circle_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
Item::circle() const {
  // @@protoc_insertion_point(field_list:Item.circle)
  return circle_;
}

// optional .TopInfo top_info = 11;
inline bool Item::has_top_info() const {
  return !_is_default_instance_ && top_info_ != NULL;
}
inline void Item::clear_top_info() {
  if (GetArenaNoVirtual() == NULL && top_info_ != NULL) delete top_info_;
  top_info_ = NULL;
}
inline const ::TopInfo& Item::top_info() const {
  // @@protoc_insertion_point(field_get:Item.top_info)
  return top_info_ != NULL ? *top_info_ : *default_instance_->top_info_;
}
inline ::TopInfo* Item::mutable_top_info() {
  
  if (top_info_ == NULL) {
    top_info_ = new ::TopInfo;
  }
  // @@protoc_insertion_point(field_mutable:Item.top_info)
  return top_info_;
}
inline ::TopInfo* Item::release_top_info() {
  
  ::TopInfo* temp = top_info_;
  top_info_ = NULL;
  return temp;
}
inline void Item::set_allocated_top_info(::TopInfo* top_info) {
  delete top_info_;
  top_info_ = top_info;
  if (top_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Item.top_info)
}

// repeated bytes zone = 12;
inline int Item::zone_size() const {
  return zone_.size();
}
inline void Item::clear_zone() {
  zone_.Clear();
}
inline const ::std::string& Item::zone(int index) const {
  // @@protoc_insertion_point(field_get:Item.zone)
  return zone_.Get(index);
}
inline ::std::string* Item::mutable_zone(int index) {
  // @@protoc_insertion_point(field_mutable:Item.zone)
  return zone_.Mutable(index);
}
inline void Item::set_zone(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Item.zone)
  zone_.Mutable(index)->assign(value);
}
inline void Item::set_zone(int index, const char* value) {
  zone_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Item.zone)
}
inline void Item::set_zone(int index, const void* value, size_t size) {
  zone_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Item.zone)
}
inline ::std::string* Item::add_zone() {
  return zone_.Add();
}
inline void Item::add_zone(const ::std::string& value) {
  zone_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Item.zone)
}
inline void Item::add_zone(const char* value) {
  zone_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Item.zone)
}
inline void Item::add_zone(const void* value, size_t size) {
  zone_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Item.zone)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Item::zone() const {
  // @@protoc_insertion_point(field_list:Item.zone)
  return zone_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Item::mutable_zone() {
  // @@protoc_insertion_point(field_mutable_list:Item.zone)
  return &zone_;
}

// optional .ItemSource data_source = 13;
inline bool Item::has_data_source() const {
  return !_is_default_instance_ && data_source_ != NULL;
}
inline void Item::clear_data_source() {
  if (GetArenaNoVirtual() == NULL && data_source_ != NULL) delete data_source_;
  data_source_ = NULL;
}
inline const ::ItemSource& Item::data_source() const {
  // @@protoc_insertion_point(field_get:Item.data_source)
  return data_source_ != NULL ? *data_source_ : *default_instance_->data_source_;
}
inline ::ItemSource* Item::mutable_data_source() {
  
  if (data_source_ == NULL) {
    data_source_ = new ::ItemSource;
  }
  // @@protoc_insertion_point(field_mutable:Item.data_source)
  return data_source_;
}
inline ::ItemSource* Item::release_data_source() {
  
  ::ItemSource* temp = data_source_;
  data_source_ = NULL;
  return temp;
}
inline void Item::set_allocated_data_source(::ItemSource* data_source) {
  delete data_source_;
  data_source_ = data_source;
  if (data_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Item.data_source)
}

// -------------------------------------------------------------------

// Subscribe

// optional uint64 user_id = 1;
inline void Subscribe::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Subscribe::user_id() const {
  // @@protoc_insertion_point(field_get:Subscribe.user_id)
  return user_id_;
}
inline void Subscribe::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Subscribe.user_id)
}

// repeated bytes srp_id = 2;
inline int Subscribe::srp_id_size() const {
  return srp_id_.size();
}
inline void Subscribe::clear_srp_id() {
  srp_id_.Clear();
}
inline const ::std::string& Subscribe::srp_id(int index) const {
  // @@protoc_insertion_point(field_get:Subscribe.srp_id)
  return srp_id_.Get(index);
}
inline ::std::string* Subscribe::mutable_srp_id(int index) {
  // @@protoc_insertion_point(field_mutable:Subscribe.srp_id)
  return srp_id_.Mutable(index);
}
inline void Subscribe::set_srp_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subscribe.srp_id)
  srp_id_.Mutable(index)->assign(value);
}
inline void Subscribe::set_srp_id(int index, const char* value) {
  srp_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subscribe.srp_id)
}
inline void Subscribe::set_srp_id(int index, const void* value, size_t size) {
  srp_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subscribe.srp_id)
}
inline ::std::string* Subscribe::add_srp_id() {
  return srp_id_.Add();
}
inline void Subscribe::add_srp_id(const ::std::string& value) {
  srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subscribe.srp_id)
}
inline void Subscribe::add_srp_id(const char* value) {
  srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subscribe.srp_id)
}
inline void Subscribe::add_srp_id(const void* value, size_t size) {
  srp_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subscribe.srp_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Subscribe::srp_id() const {
  // @@protoc_insertion_point(field_list:Subscribe.srp_id)
  return srp_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Subscribe::mutable_srp_id() {
  // @@protoc_insertion_point(field_mutable_list:Subscribe.srp_id)
  return &srp_id_;
}

// repeated bytes circle_id = 3;
inline int Subscribe::circle_id_size() const {
  return circle_id_.size();
}
inline void Subscribe::clear_circle_id() {
  circle_id_.Clear();
}
inline const ::std::string& Subscribe::circle_id(int index) const {
  // @@protoc_insertion_point(field_get:Subscribe.circle_id)
  return circle_id_.Get(index);
}
inline ::std::string* Subscribe::mutable_circle_id(int index) {
  // @@protoc_insertion_point(field_mutable:Subscribe.circle_id)
  return circle_id_.Mutable(index);
}
inline void Subscribe::set_circle_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subscribe.circle_id)
  circle_id_.Mutable(index)->assign(value);
}
inline void Subscribe::set_circle_id(int index, const char* value) {
  circle_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subscribe.circle_id)
}
inline void Subscribe::set_circle_id(int index, const void* value, size_t size) {
  circle_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subscribe.circle_id)
}
inline ::std::string* Subscribe::add_circle_id() {
  return circle_id_.Add();
}
inline void Subscribe::add_circle_id(const ::std::string& value) {
  circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subscribe.circle_id)
}
inline void Subscribe::add_circle_id(const char* value) {
  circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subscribe.circle_id)
}
inline void Subscribe::add_circle_id(const void* value, size_t size) {
  circle_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subscribe.circle_id)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Subscribe::circle_id() const {
  // @@protoc_insertion_point(field_list:Subscribe.circle_id)
  return circle_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Subscribe::mutable_circle_id() {
  // @@protoc_insertion_point(field_mutable_list:Subscribe.circle_id)
  return &circle_id_;
}

// -------------------------------------------------------------------

// Recommend

// optional int32 log = 1;
inline void Recommend::clear_log() {
  log_ = 0;
}
inline ::google::protobuf::int32 Recommend::log() const {
  // @@protoc_insertion_point(field_get:Recommend.log)
  return log_;
}
inline void Recommend::set_log(::google::protobuf::int32 value) {
  
  log_ = value;
  // @@protoc_insertion_point(field_set:Recommend.log)
}

// optional uint64 user_id = 2;
inline void Recommend::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Recommend::user_id() const {
  // @@protoc_insertion_point(field_get:Recommend.user_id)
  return user_id_;
}
inline void Recommend::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Recommend.user_id)
}

// optional int32 request_num = 3;
inline void Recommend::clear_request_num() {
  request_num_ = 0;
}
inline ::google::protobuf::int32 Recommend::request_num() const {
  // @@protoc_insertion_point(field_get:Recommend.request_num)
  return request_num_;
}
inline void Recommend::set_request_num(::google::protobuf::int32 value) {
  
  request_num_ = value;
  // @@protoc_insertion_point(field_set:Recommend.request_num)
}

// optional .RecommendType recommend_type = 4;
inline void Recommend::clear_recommend_type() {
  recommend_type_ = 0;
}
inline ::RecommendType Recommend::recommend_type() const {
  // @@protoc_insertion_point(field_get:Recommend.recommend_type)
  return static_cast< ::RecommendType >(recommend_type_);
}
inline void Recommend::set_recommend_type(::RecommendType value) {
  
  recommend_type_ = value;
  // @@protoc_insertion_point(field_set:Recommend.recommend_type)
}

// optional int32 beg_time = 5;
inline void Recommend::clear_beg_time() {
  beg_time_ = 0;
}
inline ::google::protobuf::int32 Recommend::beg_time() const {
  // @@protoc_insertion_point(field_get:Recommend.beg_time)
  return beg_time_;
}
inline void Recommend::set_beg_time(::google::protobuf::int32 value) {
  
  beg_time_ = value;
  // @@protoc_insertion_point(field_set:Recommend.beg_time)
}

// optional int32 end_time = 6;
inline void Recommend::clear_end_time() {
  end_time_ = 0;
}
inline ::google::protobuf::int32 Recommend::end_time() const {
  // @@protoc_insertion_point(field_get:Recommend.end_time)
  return end_time_;
}
inline void Recommend::set_end_time(::google::protobuf::int32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:Recommend.end_time)
}

// optional bytes zone = 7;
inline void Recommend::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Recommend::zone() const {
  // @@protoc_insertion_point(field_get:Recommend.zone)
  return zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recommend::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Recommend.zone)
}
inline void Recommend::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Recommend.zone)
}
inline void Recommend::set_zone(const void* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Recommend.zone)
}
inline ::std::string* Recommend::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:Recommend.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Recommend::release_zone() {
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Recommend::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:Recommend.zone)
}

// optional .RecommendNetwork network = 8;
inline void Recommend::clear_network() {
  network_ = 0;
}
inline ::RecommendNetwork Recommend::network() const {
  // @@protoc_insertion_point(field_get:Recommend.network)
  return static_cast< ::RecommendNetwork >(network_);
}
inline void Recommend::set_network(::RecommendNetwork value) {
  
  network_ = value;
  // @@protoc_insertion_point(field_set:Recommend.network)
}

// -------------------------------------------------------------------

// CandidateSetBase

// optional uint64 user_id = 1;
inline void CandidateSetBase::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 CandidateSetBase::user_id() const {
  // @@protoc_insertion_point(field_get:CandidateSetBase.user_id)
  return user_id_;
}
inline void CandidateSetBase::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:CandidateSetBase.user_id)
}

// repeated fixed64 item_id = 2;
inline int CandidateSetBase::item_id_size() const {
  return item_id_.size();
}
inline void CandidateSetBase::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::uint64 CandidateSetBase::item_id(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetBase.item_id)
  return item_id_.Get(index);
}
inline void CandidateSetBase::set_item_id(int index, ::google::protobuf::uint64 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetBase.item_id)
}
inline void CandidateSetBase::add_item_id(::google::protobuf::uint64 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetBase.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CandidateSetBase::item_id() const {
  // @@protoc_insertion_point(field_list:CandidateSetBase.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CandidateSetBase::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetBase.item_id)
  return &item_id_;
}

// repeated fixed64 history_id = 3;
inline int CandidateSetBase::history_id_size() const {
  return history_id_.size();
}
inline void CandidateSetBase::clear_history_id() {
  history_id_.Clear();
}
inline ::google::protobuf::uint64 CandidateSetBase::history_id(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetBase.history_id)
  return history_id_.Get(index);
}
inline void CandidateSetBase::set_history_id(int index, ::google::protobuf::uint64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetBase.history_id)
}
inline void CandidateSetBase::add_history_id(::google::protobuf::uint64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetBase.history_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CandidateSetBase::history_id() const {
  // @@protoc_insertion_point(field_list:CandidateSetBase.history_id)
  return history_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CandidateSetBase::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetBase.history_id)
  return &history_id_;
}

// -------------------------------------------------------------------

// CandidateSetPayload

// repeated float power = 1;
inline int CandidateSetPayload::power_size() const {
  return power_.size();
}
inline void CandidateSetPayload::clear_power() {
  power_.Clear();
}
inline float CandidateSetPayload::power(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.power)
  return power_.Get(index);
}
inline void CandidateSetPayload::set_power(int index, float value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.power)
}
inline void CandidateSetPayload::add_power(float value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.power)
}
inline const ::google::protobuf::RepeatedField< float >&
CandidateSetPayload::power() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.power)
  return power_;
}
inline ::google::protobuf::RepeatedField< float >*
CandidateSetPayload::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.power)
  return &power_;
}

// repeated int32 publish_time = 2 [packed = true];
inline int CandidateSetPayload::publish_time_size() const {
  return publish_time_.size();
}
inline void CandidateSetPayload::clear_publish_time() {
  publish_time_.Clear();
}
inline ::google::protobuf::int32 CandidateSetPayload::publish_time(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.publish_time)
  return publish_time_.Get(index);
}
inline void CandidateSetPayload::set_publish_time(int index, ::google::protobuf::int32 value) {
  publish_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.publish_time)
}
inline void CandidateSetPayload::add_publish_time(::google::protobuf::int32 value) {
  publish_time_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.publish_time)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CandidateSetPayload::publish_time() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.publish_time)
  return publish_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CandidateSetPayload::mutable_publish_time() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.publish_time)
  return &publish_time_;
}

// repeated int32 category_id = 3 [packed = true];
inline int CandidateSetPayload::category_id_size() const {
  return category_id_.size();
}
inline void CandidateSetPayload::clear_category_id() {
  category_id_.Clear();
}
inline ::google::protobuf::int32 CandidateSetPayload::category_id(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.category_id)
  return category_id_.Get(index);
}
inline void CandidateSetPayload::set_category_id(int index, ::google::protobuf::int32 value) {
  category_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.category_id)
}
inline void CandidateSetPayload::add_category_id(::google::protobuf::int32 value) {
  category_id_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.category_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CandidateSetPayload::category_id() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.category_id)
  return category_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CandidateSetPayload::mutable_category_id() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.category_id)
  return &category_id_;
}

// repeated int32 picture_num = 4 [packed = true];
inline int CandidateSetPayload::picture_num_size() const {
  return picture_num_.size();
}
inline void CandidateSetPayload::clear_picture_num() {
  picture_num_.Clear();
}
inline ::google::protobuf::int32 CandidateSetPayload::picture_num(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.picture_num)
  return picture_num_.Get(index);
}
inline void CandidateSetPayload::set_picture_num(int index, ::google::protobuf::int32 value) {
  picture_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.picture_num)
}
inline void CandidateSetPayload::add_picture_num(::google::protobuf::int32 value) {
  picture_num_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.picture_num)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CandidateSetPayload::picture_num() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.picture_num)
  return picture_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CandidateSetPayload::mutable_picture_num() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.picture_num)
  return &picture_num_;
}

// repeated .CandidateType type = 5 [packed = true];
inline int CandidateSetPayload::type_size() const {
  return type_.size();
}
inline void CandidateSetPayload::clear_type() {
  type_.Clear();
}
inline ::CandidateType CandidateSetPayload::type(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.type)
  return static_cast< ::CandidateType >(type_.Get(index));
}
inline void CandidateSetPayload::set_type(int index, ::CandidateType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.type)
}
inline void CandidateSetPayload::add_type(::CandidateType value) {
  type_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.type)
}
inline const ::google::protobuf::RepeatedField<int>&
CandidateSetPayload::type() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.type)
  return type_;
}
inline ::google::protobuf::RepeatedField<int>*
CandidateSetPayload::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.type)
  return &type_;
}

// -------------------------------------------------------------------

// CandidateSet

// optional .CandidateSetBase base = 1;
inline bool CandidateSet::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
inline void CandidateSet::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
inline const ::CandidateSetBase& CandidateSet::base() const {
  // @@protoc_insertion_point(field_get:CandidateSet.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::CandidateSetBase* CandidateSet::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::CandidateSetBase;
  }
  // @@protoc_insertion_point(field_mutable:CandidateSet.base)
  return base_;
}
inline ::CandidateSetBase* CandidateSet::release_base() {
  
  ::CandidateSetBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void CandidateSet::set_allocated_base(::CandidateSetBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CandidateSet.base)
}

// optional .CandidateSetPayload payload = 2;
inline bool CandidateSet::has_payload() const {
  return !_is_default_instance_ && payload_ != NULL;
}
inline void CandidateSet::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
inline const ::CandidateSetPayload& CandidateSet::payload() const {
  // @@protoc_insertion_point(field_get:CandidateSet.payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
inline ::CandidateSetPayload* CandidateSet::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::CandidateSetPayload;
  }
  // @@protoc_insertion_point(field_mutable:CandidateSet.payload)
  return payload_;
}
inline ::CandidateSetPayload* CandidateSet::release_payload() {
  
  ::CandidateSetPayload* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void CandidateSet::set_allocated_payload(::CandidateSetPayload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CandidateSet.payload)
}

// -------------------------------------------------------------------

// User

// optional uint64 user_id = 1;
inline void User::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 User::user_id() const {
  // @@protoc_insertion_point(field_get:User.user_id)
  return user_id_;
}
inline void User::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:User.user_id)
}

// -------------------------------------------------------------------

// UserStatus

// optional int32 is_new_user = 1;
inline void UserStatus::clear_is_new_user() {
  is_new_user_ = 0;
}
inline ::google::protobuf::int32 UserStatus::is_new_user() const {
  // @@protoc_insertion_point(field_get:UserStatus.is_new_user)
  return is_new_user_;
}
inline void UserStatus::set_is_new_user(::google::protobuf::int32 value) {
  
  is_new_user_ = value;
  // @@protoc_insertion_point(field_set:UserStatus.is_new_user)
}

// -------------------------------------------------------------------

// Feedback

// optional uint64 user_id = 1;
inline void Feedback::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Feedback::user_id() const {
  // @@protoc_insertion_point(field_get:Feedback.user_id)
  return user_id_;
}
inline void Feedback::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Feedback.user_id)
}

// repeated fixed64 item_id = 2;
inline int Feedback::item_id_size() const {
  return item_id_.size();
}
inline void Feedback::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::uint64 Feedback::item_id(int index) const {
  // @@protoc_insertion_point(field_get:Feedback.item_id)
  return item_id_.Get(index);
}
inline void Feedback::set_item_id(int index, ::google::protobuf::uint64 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Feedback.item_id)
}
inline void Feedback::add_item_id(::google::protobuf::uint64 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:Feedback.item_id)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Feedback::item_id() const {
  // @@protoc_insertion_point(field_list:Feedback.item_id)
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Feedback::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:Feedback.item_id)
  return &item_id_;
}

// -------------------------------------------------------------------

// FeedbackRespond

// optional int32 respond = 1;
inline void FeedbackRespond::clear_respond() {
  respond_ = 0;
}
inline ::google::protobuf::int32 FeedbackRespond::respond() const {
  // @@protoc_insertion_point(field_get:FeedbackRespond.respond)
  return respond_;
}
inline void FeedbackRespond::set_respond(::google::protobuf::int32 value) {
  
  respond_ = value;
  // @@protoc_insertion_point(field_set:FeedbackRespond.respond)
}

// -------------------------------------------------------------------

// AlgorithmPower

// repeated float power = 1;
inline int AlgorithmPower::power_size() const {
  return power_.size();
}
inline void AlgorithmPower::clear_power() {
  power_.Clear();
}
inline float AlgorithmPower::power(int index) const {
  // @@protoc_insertion_point(field_get:AlgorithmPower.power)
  return power_.Get(index);
}
inline void AlgorithmPower::set_power(int index, float value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:AlgorithmPower.power)
}
inline void AlgorithmPower::add_power(float value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:AlgorithmPower.power)
}
inline const ::google::protobuf::RepeatedField< float >&
AlgorithmPower::power() const {
  // @@protoc_insertion_point(field_list:AlgorithmPower.power)
  return power_;
}
inline ::google::protobuf::RepeatedField< float >*
AlgorithmPower::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:AlgorithmPower.power)
  return &power_;
}

// -------------------------------------------------------------------

// Category

// optional uint64 user_id = 1;
inline void Category::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Category::user_id() const {
  // @@protoc_insertion_point(field_get:Category.user_id)
  return user_id_;
}
inline void Category::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Category.user_id)
}

// optional int32 request_num = 2;
inline void Category::clear_request_num() {
  request_num_ = 0;
}
inline ::google::protobuf::int32 Category::request_num() const {
  // @@protoc_insertion_point(field_get:Category.request_num)
  return request_num_;
}
inline void Category::set_request_num(::google::protobuf::int32 value) {
  
  request_num_ = value;
  // @@protoc_insertion_point(field_set:Category.request_num)
}

// -------------------------------------------------------------------

// AlgorithmCategory

// repeated int32 category = 1 [packed = true];
inline int AlgorithmCategory::category_size() const {
  return category_.size();
}
inline void AlgorithmCategory::clear_category() {
  category_.Clear();
}
inline ::google::protobuf::int32 AlgorithmCategory::category(int index) const {
  // @@protoc_insertion_point(field_get:AlgorithmCategory.category)
  return category_.Get(index);
}
inline void AlgorithmCategory::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:AlgorithmCategory.category)
}
inline void AlgorithmCategory::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:AlgorithmCategory.category)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AlgorithmCategory::category() const {
  // @@protoc_insertion_point(field_list:AlgorithmCategory.category)
  return category_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AlgorithmCategory::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:AlgorithmCategory.category)
  return &category_;
}

// -------------------------------------------------------------------

// TransferRequest

// optional int32 main_protocol = 1;
inline void TransferRequest::clear_main_protocol() {
  main_protocol_ = 0;
}
inline ::google::protobuf::int32 TransferRequest::main_protocol() const {
  // @@protoc_insertion_point(field_get:TransferRequest.main_protocol)
  return main_protocol_;
}
inline void TransferRequest::set_main_protocol(::google::protobuf::int32 value) {
  
  main_protocol_ = value;
  // @@protoc_insertion_point(field_set:TransferRequest.main_protocol)
}

// optional int32 sub_protocol = 2;
inline void TransferRequest::clear_sub_protocol() {
  sub_protocol_ = 0;
}
inline ::google::protobuf::int32 TransferRequest::sub_protocol() const {
  // @@protoc_insertion_point(field_get:TransferRequest.sub_protocol)
  return sub_protocol_;
}
inline void TransferRequest::set_sub_protocol(::google::protobuf::int32 value) {
  
  sub_protocol_ = value;
  // @@protoc_insertion_point(field_set:TransferRequest.sub_protocol)
}

// optional .google.protobuf.Any protocol = 3;
inline bool TransferRequest::has_protocol() const {
  return !_is_default_instance_ && protocol_ != NULL;
}
inline void TransferRequest::clear_protocol() {
  if (GetArenaNoVirtual() == NULL && protocol_ != NULL) delete protocol_;
  protocol_ = NULL;
}
inline const ::google::protobuf::Any& TransferRequest::protocol() const {
  // @@protoc_insertion_point(field_get:TransferRequest.protocol)
  return protocol_ != NULL ? *protocol_ : *default_instance_->protocol_;
}
inline ::google::protobuf::Any* TransferRequest::mutable_protocol() {
  
  if (protocol_ == NULL) {
    protocol_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:TransferRequest.protocol)
  return protocol_;
}
inline ::google::protobuf::Any* TransferRequest::release_protocol() {
  
  ::google::protobuf::Any* temp = protocol_;
  protocol_ = NULL;
  return temp;
}
inline void TransferRequest::set_allocated_protocol(::google::protobuf::Any* protocol) {
  delete protocol_;
  protocol_ = protocol;
  if (protocol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TransferRequest.protocol)
}

// -------------------------------------------------------------------

// TransferRespond

// optional int32 respond_code = 1;
inline void TransferRespond::clear_respond_code() {
  respond_code_ = 0;
}
inline ::google::protobuf::int32 TransferRespond::respond_code() const {
  // @@protoc_insertion_point(field_get:TransferRespond.respond_code)
  return respond_code_;
}
inline void TransferRespond::set_respond_code(::google::protobuf::int32 value) {
  
  respond_code_ = value;
  // @@protoc_insertion_point(field_set:TransferRespond.respond_code)
}

// optional .google.protobuf.Any protocol = 2;
inline bool TransferRespond::has_protocol() const {
  return !_is_default_instance_ && protocol_ != NULL;
}
inline void TransferRespond::clear_protocol() {
  if (GetArenaNoVirtual() == NULL && protocol_ != NULL) delete protocol_;
  protocol_ = NULL;
}
inline const ::google::protobuf::Any& TransferRespond::protocol() const {
  // @@protoc_insertion_point(field_get:TransferRespond.protocol)
  return protocol_ != NULL ? *protocol_ : *default_instance_->protocol_;
}
inline ::google::protobuf::Any* TransferRespond::mutable_protocol() {
  
  if (protocol_ == NULL) {
    protocol_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:TransferRespond.protocol)
  return protocol_;
}
inline ::google::protobuf::Any* TransferRespond::release_protocol() {
  
  ::google::protobuf::Any* temp = protocol_;
  protocol_ = NULL;
  return temp;
}
inline void TransferRespond::set_allocated_protocol(::google::protobuf::Any* protocol) {
  delete protocol_;
  protocol_ = protocol;
  if (protocol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TransferRespond.protocol)
}

// -------------------------------------------------------------------

// HeartBeat

// optional bytes heartbeat = 1;
inline void HeartBeat::clear_heartbeat() {
  heartbeat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HeartBeat::heartbeat() const {
  // @@protoc_insertion_point(field_get:HeartBeat.heartbeat)
  return heartbeat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeat::set_heartbeat(const ::std::string& value) {
  
  heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeat.heartbeat)
}
inline void HeartBeat::set_heartbeat(const char* value) {
  
  heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeat.heartbeat)
}
inline void HeartBeat::set_heartbeat(const void* value, size_t size) {
  
  heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeat.heartbeat)
}
inline ::std::string* HeartBeat::mutable_heartbeat() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeat.heartbeat)
  return heartbeat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HeartBeat::release_heartbeat() {
  
  return heartbeat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HeartBeat::set_allocated_heartbeat(::std::string* heartbeat) {
  if (heartbeat != NULL) {
    
  } else {
    
  }
  heartbeat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heartbeat);
  // @@protoc_insertion_point(field_set_allocated:HeartBeat.heartbeat)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ActionType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ActionType>() {
  return ::ActionType_descriptor();
}
template <> struct is_proto_enum< ::ItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ItemType>() {
  return ::ItemType_descriptor();
}
template <> struct is_proto_enum< ::TopType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TopType>() {
  return ::TopType_descriptor();
}
template <> struct is_proto_enum< ::RecommendType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RecommendType>() {
  return ::RecommendType_descriptor();
}
template <> struct is_proto_enum< ::RecommendNetwork> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RecommendNetwork>() {
  return ::RecommendNetwork_descriptor();
}
template <> struct is_proto_enum< ::CandidateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CandidateType>() {
  return ::CandidateType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
