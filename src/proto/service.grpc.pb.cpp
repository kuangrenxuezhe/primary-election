// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: service.proto

#include "service.pb.h"
#include "service.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace proto {

static const char* PrimaryElection_method_names[] = {
  "/proto.PrimaryElection/queryUserInfo",
  "/proto.PrimaryElection/queryItemInfo",
  "/proto.PrimaryElection/queryUserStatus",
  "/proto.PrimaryElection/queryCandidateSet",
};

std::unique_ptr< PrimaryElection::Stub> PrimaryElection::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< PrimaryElection::Stub> stub(new PrimaryElection::Stub(channel));
  return stub;
}

PrimaryElection::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_queryUserInfo_(PrimaryElection_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryItemInfo_(PrimaryElection_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryUserStatus_(PrimaryElection_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_queryCandidateSet_(PrimaryElection_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PrimaryElection::Stub::queryUserInfo(::grpc::ClientContext* context, const ::UserQuery& request, ::UserInfo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_queryUserInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::UserInfo>* PrimaryElection::Stub::AsyncqueryUserInfoRaw(::grpc::ClientContext* context, const ::UserQuery& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::UserInfo>(channel_.get(), cq, rpcmethod_queryUserInfo_, context, request);
}

::grpc::Status PrimaryElection::Stub::queryItemInfo(::grpc::ClientContext* context, const ::ItemQuery& request, ::ItemInfo* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_queryItemInfo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::ItemInfo>* PrimaryElection::Stub::AsyncqueryItemInfoRaw(::grpc::ClientContext* context, const ::ItemQuery& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::ItemInfo>(channel_.get(), cq, rpcmethod_queryItemInfo_, context, request);
}

::grpc::Status PrimaryElection::Stub::queryUserStatus(::grpc::ClientContext* context, const ::User& request, ::UserStatus* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_queryUserStatus_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::UserStatus>* PrimaryElection::Stub::AsyncqueryUserStatusRaw(::grpc::ClientContext* context, const ::User& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::UserStatus>(channel_.get(), cq, rpcmethod_queryUserStatus_, context, request);
}

::grpc::Status PrimaryElection::Stub::queryCandidateSet(::grpc::ClientContext* context, const ::Recommend& request, ::CandidateSet* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_queryCandidateSet_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::CandidateSet>* PrimaryElection::Stub::AsyncqueryCandidateSetRaw(::grpc::ClientContext* context, const ::Recommend& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::CandidateSet>(channel_.get(), cq, rpcmethod_queryCandidateSet_, context, request);
}

PrimaryElection::AsyncService::AsyncService() : ::grpc::AsynchronousService(PrimaryElection_method_names, 4) {}

PrimaryElection::Service::Service() {
}

PrimaryElection::Service::~Service() {
}

::grpc::Status PrimaryElection::Service::queryUserInfo(::grpc::ServerContext* context, const ::UserQuery* request, ::UserInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PrimaryElection::AsyncService::RequestqueryUserInfo(::grpc::ServerContext* context, ::UserQuery* request, ::grpc::ServerAsyncResponseWriter< ::UserInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PrimaryElection::Service::queryItemInfo(::grpc::ServerContext* context, const ::ItemQuery* request, ::ItemInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PrimaryElection::AsyncService::RequestqueryItemInfo(::grpc::ServerContext* context, ::ItemQuery* request, ::grpc::ServerAsyncResponseWriter< ::ItemInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PrimaryElection::Service::queryUserStatus(::grpc::ServerContext* context, const ::User* request, ::UserStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PrimaryElection::AsyncService::RequestqueryUserStatus(::grpc::ServerContext* context, ::User* request, ::grpc::ServerAsyncResponseWriter< ::UserStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status PrimaryElection::Service::queryCandidateSet(::grpc::ServerContext* context, const ::Recommend* request, ::CandidateSet* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void PrimaryElection::AsyncService::RequestqueryCandidateSet(::grpc::ServerContext* context, ::Recommend* request, ::grpc::ServerAsyncResponseWriter< ::CandidateSet>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* PrimaryElection::Service::service() {
  if (service_) {
    return service_.get();
  }
  service_ = std::unique_ptr< ::grpc::RpcService>(new ::grpc::RpcService());
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PrimaryElection_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PrimaryElection::Service, ::UserQuery, ::UserInfo>(
          std::mem_fn(&PrimaryElection::Service::queryUserInfo), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PrimaryElection_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PrimaryElection::Service, ::ItemQuery, ::ItemInfo>(
          std::mem_fn(&PrimaryElection::Service::queryItemInfo), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PrimaryElection_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PrimaryElection::Service, ::User, ::UserStatus>(
          std::mem_fn(&PrimaryElection::Service::queryUserStatus), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      PrimaryElection_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< PrimaryElection::Service, ::Recommend, ::CandidateSet>(
          std::mem_fn(&PrimaryElection::Service::queryCandidateSet), this)));
  return service_.get();
}


}  // namespace proto

