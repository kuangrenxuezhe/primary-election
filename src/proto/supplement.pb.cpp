// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: supplement.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "supplement.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace module {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* UserQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemQuery_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_supplement_2eproto() {
  protobuf_AddDesc_supplement_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "supplement.proto");
  GOOGLE_CHECK(file != NULL);
  UserQuery_descriptor_ = file->message_type(0);
  static const int UserQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuery, user_id_),
  };
  UserQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserQuery_descriptor_,
      UserQuery::default_instance_,
      UserQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuery, _is_default_instance_));
  UserInfo_descriptor_ = file->message_type(1);
  static const int UserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, last_modified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, dislike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, readed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, recommended_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  ItemQuery_descriptor_ = file->message_type(2);
  static const int ItemQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemQuery, item_id_),
  };
  ItemQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemQuery_descriptor_,
      ItemQuery::default_instance_,
      ItemQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemQuery, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_supplement_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserQuery_descriptor_, &UserQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemQuery_descriptor_, &ItemQuery::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_supplement_2eproto() {
  delete UserQuery::default_instance_;
  delete UserQuery_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete ItemQuery::default_instance_;
  delete ItemQuery_reflection_;
}

void protobuf_AddDesc_supplement_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::module::protocol::protobuf_AddDesc_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020supplement.proto\022\017module.protocol\032\rmes"
    "sage.proto\"\034\n\tUserQuery\022\017\n\007user_id\030\001 \001(\006"
    "\"\341\001\n\010UserInfo\022\017\n\007user_id\030\001 \001(\006\022\025\n\rlast_m"
    "odified\030\002 \001(\005\022*\n\tsubscribe\030\003 \003(\0132\027.modul"
    "e.protocol.KeyStr\022(\n\007dislike\030\004 \003(\0132\027.mod"
    "ule.protocol.KeyStr\022(\n\006readed\030\005 \003(\0132\030.mo"
    "dule.protocol.KeyTime\022-\n\013recommended\030\006 \003"
    "(\0132\030.module.protocol.KeyTime\"\034\n\tItemQuer"
    "y\022\017\n\007item_id\030\001 \001(\006b\006proto3", 346);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "supplement.proto", &protobuf_RegisterTypes);
  UserQuery::default_instance_ = new UserQuery();
  UserInfo::default_instance_ = new UserInfo();
  ItemQuery::default_instance_ = new ItemQuery();
  UserQuery::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  ItemQuery::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_supplement_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_supplement_2eproto {
  StaticDescriptorInitializer_supplement_2eproto() {
    protobuf_AddDesc_supplement_2eproto();
  }
} static_descriptor_initializer_supplement_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int UserQuery::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserQuery::UserQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:module.protocol.UserQuery)
}

void UserQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserQuery::UserQuery(const UserQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:module.protocol.UserQuery)
}

void UserQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

UserQuery::~UserQuery() {
  // @@protoc_insertion_point(destructor:module.protocol.UserQuery)
  SharedDtor();
}

void UserQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserQuery_descriptor_;
}

const UserQuery& UserQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

UserQuery* UserQuery::default_instance_ = NULL;

UserQuery* UserQuery::New(::google::protobuf::Arena* arena) const {
  UserQuery* n = new UserQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserQuery::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool UserQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:module.protocol.UserQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:module.protocol.UserQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:module.protocol.UserQuery)
  return false;
#undef DO_
}

void UserQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:module.protocol.UserQuery)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:module.protocol.UserQuery)
}

::google::protobuf::uint8* UserQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:module.protocol.UserQuery)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:module.protocol.UserQuery)
  return target;
}

int UserQuery::ByteSize() const {
  int total_size = 0;

  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserQuery::MergeFrom(const UserQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void UserQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuery::CopyFrom(const UserQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuery::IsInitialized() const {

  return true;
}

void UserQuery::Swap(UserQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserQuery::InternalSwap(UserQuery* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserQuery_descriptor_;
  metadata.reflection = UserQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserQuery

// optional fixed64 user_id = 1;
void UserQuery::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserQuery::user_id() const {
  // @@protoc_insertion_point(field_get:module.protocol.UserQuery.user_id)
  return user_id_;
}
 void UserQuery::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:module.protocol.UserQuery.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kLastModifiedFieldNumber;
const int UserInfo::kSubscribeFieldNumber;
const int UserInfo::kDislikeFieldNumber;
const int UserInfo::kReadedFieldNumber;
const int UserInfo::kRecommendedFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:module.protocol.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:module.protocol.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  last_modified_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:module.protocol.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  last_modified_ = 0;
  subscribe_.Clear();
  dislike_.Clear();
  readed_.Clear();
  recommended_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:module.protocol.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_last_modified;
        break;
      }

      // optional int32 last_modified = 2;
      case 2: {
        if (tag == 16) {
         parse_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_modified_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subscribe;
        break;
      }

      // repeated .module.protocol.KeyStr subscribe = 3;
      case 3: {
        if (tag == 26) {
         parse_subscribe:
          DO_(input->IncrementRecursionDepth());
         parse_loop_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_subscribe;
        if (input->ExpectTag(34)) goto parse_loop_dislike;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .module.protocol.KeyStr dislike = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dislike:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dislike()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_dislike;
        if (input->ExpectTag(42)) goto parse_loop_readed;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .module.protocol.KeyTime readed = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_readed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_readed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_readed;
        if (input->ExpectTag(50)) goto parse_loop_recommended;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .module.protocol.KeyTime recommended = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_recommended:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recommended()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_recommended;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:module.protocol.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:module.protocol.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:module.protocol.UserInfo)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }

  // optional int32 last_modified = 2;
  if (this->last_modified() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->last_modified(), output);
  }

  // repeated .module.protocol.KeyStr subscribe = 3;
  for (unsigned int i = 0, n = this->subscribe_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subscribe(i), output);
  }

  // repeated .module.protocol.KeyStr dislike = 4;
  for (unsigned int i = 0, n = this->dislike_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dislike(i), output);
  }

  // repeated .module.protocol.KeyTime readed = 5;
  for (unsigned int i = 0, n = this->readed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->readed(i), output);
  }

  // repeated .module.protocol.KeyTime recommended = 6;
  for (unsigned int i = 0, n = this->recommended_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recommended(i), output);
  }

  // @@protoc_insertion_point(serialize_end:module.protocol.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:module.protocol.UserInfo)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }

  // optional int32 last_modified = 2;
  if (this->last_modified() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->last_modified(), target);
  }

  // repeated .module.protocol.KeyStr subscribe = 3;
  for (unsigned int i = 0, n = this->subscribe_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subscribe(i), target);
  }

  // repeated .module.protocol.KeyStr dislike = 4;
  for (unsigned int i = 0, n = this->dislike_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dislike(i), target);
  }

  // repeated .module.protocol.KeyTime readed = 5;
  for (unsigned int i = 0, n = this->readed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->readed(i), target);
  }

  // repeated .module.protocol.KeyTime recommended = 6;
  for (unsigned int i = 0, n = this->recommended_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recommended(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:module.protocol.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 last_modified = 2;
  if (this->last_modified() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->last_modified());
  }

  // repeated .module.protocol.KeyStr subscribe = 3;
  total_size += 1 * this->subscribe_size();
  for (int i = 0; i < this->subscribe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscribe(i));
  }

  // repeated .module.protocol.KeyStr dislike = 4;
  total_size += 1 * this->dislike_size();
  for (int i = 0; i < this->dislike_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dislike(i));
  }

  // repeated .module.protocol.KeyTime readed = 5;
  total_size += 1 * this->readed_size();
  for (int i = 0; i < this->readed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->readed(i));
  }

  // repeated .module.protocol.KeyTime recommended = 6;
  total_size += 1 * this->recommended_size();
  for (int i = 0; i < this->recommended_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommended(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  subscribe_.MergeFrom(from.subscribe_);
  dislike_.MergeFrom(from.dislike_);
  readed_.MergeFrom(from.readed_);
  recommended_.MergeFrom(from.recommended_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.last_modified() != 0) {
    set_last_modified(from.last_modified());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(last_modified_, other->last_modified_);
  subscribe_.UnsafeArenaSwap(&other->subscribe_);
  dislike_.UnsafeArenaSwap(&other->dislike_);
  readed_.UnsafeArenaSwap(&other->readed_);
  recommended_.UnsafeArenaSwap(&other->recommended_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional fixed64 user_id = 1;
void UserInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:module.protocol.UserInfo.user_id)
  return user_id_;
}
 void UserInfo::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:module.protocol.UserInfo.user_id)
}

// optional int32 last_modified = 2;
void UserInfo::clear_last_modified() {
  last_modified_ = 0;
}
 ::google::protobuf::int32 UserInfo::last_modified() const {
  // @@protoc_insertion_point(field_get:module.protocol.UserInfo.last_modified)
  return last_modified_;
}
 void UserInfo::set_last_modified(::google::protobuf::int32 value) {
  
  last_modified_ = value;
  // @@protoc_insertion_point(field_set:module.protocol.UserInfo.last_modified)
}

// repeated .module.protocol.KeyStr subscribe = 3;
int UserInfo::subscribe_size() const {
  return subscribe_.size();
}
void UserInfo::clear_subscribe() {
  subscribe_.Clear();
}
const ::module::protocol::KeyStr& UserInfo::subscribe(int index) const {
  // @@protoc_insertion_point(field_get:module.protocol.UserInfo.subscribe)
  return subscribe_.Get(index);
}
::module::protocol::KeyStr* UserInfo::mutable_subscribe(int index) {
  // @@protoc_insertion_point(field_mutable:module.protocol.UserInfo.subscribe)
  return subscribe_.Mutable(index);
}
::module::protocol::KeyStr* UserInfo::add_subscribe() {
  // @@protoc_insertion_point(field_add:module.protocol.UserInfo.subscribe)
  return subscribe_.Add();
}
::google::protobuf::RepeatedPtrField< ::module::protocol::KeyStr >*
UserInfo::mutable_subscribe() {
  // @@protoc_insertion_point(field_mutable_list:module.protocol.UserInfo.subscribe)
  return &subscribe_;
}
const ::google::protobuf::RepeatedPtrField< ::module::protocol::KeyStr >&
UserInfo::subscribe() const {
  // @@protoc_insertion_point(field_list:module.protocol.UserInfo.subscribe)
  return subscribe_;
}

// repeated .module.protocol.KeyStr dislike = 4;
int UserInfo::dislike_size() const {
  return dislike_.size();
}
void UserInfo::clear_dislike() {
  dislike_.Clear();
}
const ::module::protocol::KeyStr& UserInfo::dislike(int index) const {
  // @@protoc_insertion_point(field_get:module.protocol.UserInfo.dislike)
  return dislike_.Get(index);
}
::module::protocol::KeyStr* UserInfo::mutable_dislike(int index) {
  // @@protoc_insertion_point(field_mutable:module.protocol.UserInfo.dislike)
  return dislike_.Mutable(index);
}
::module::protocol::KeyStr* UserInfo::add_dislike() {
  // @@protoc_insertion_point(field_add:module.protocol.UserInfo.dislike)
  return dislike_.Add();
}
::google::protobuf::RepeatedPtrField< ::module::protocol::KeyStr >*
UserInfo::mutable_dislike() {
  // @@protoc_insertion_point(field_mutable_list:module.protocol.UserInfo.dislike)
  return &dislike_;
}
const ::google::protobuf::RepeatedPtrField< ::module::protocol::KeyStr >&
UserInfo::dislike() const {
  // @@protoc_insertion_point(field_list:module.protocol.UserInfo.dislike)
  return dislike_;
}

// repeated .module.protocol.KeyTime readed = 5;
int UserInfo::readed_size() const {
  return readed_.size();
}
void UserInfo::clear_readed() {
  readed_.Clear();
}
const ::module::protocol::KeyTime& UserInfo::readed(int index) const {
  // @@protoc_insertion_point(field_get:module.protocol.UserInfo.readed)
  return readed_.Get(index);
}
::module::protocol::KeyTime* UserInfo::mutable_readed(int index) {
  // @@protoc_insertion_point(field_mutable:module.protocol.UserInfo.readed)
  return readed_.Mutable(index);
}
::module::protocol::KeyTime* UserInfo::add_readed() {
  // @@protoc_insertion_point(field_add:module.protocol.UserInfo.readed)
  return readed_.Add();
}
::google::protobuf::RepeatedPtrField< ::module::protocol::KeyTime >*
UserInfo::mutable_readed() {
  // @@protoc_insertion_point(field_mutable_list:module.protocol.UserInfo.readed)
  return &readed_;
}
const ::google::protobuf::RepeatedPtrField< ::module::protocol::KeyTime >&
UserInfo::readed() const {
  // @@protoc_insertion_point(field_list:module.protocol.UserInfo.readed)
  return readed_;
}

// repeated .module.protocol.KeyTime recommended = 6;
int UserInfo::recommended_size() const {
  return recommended_.size();
}
void UserInfo::clear_recommended() {
  recommended_.Clear();
}
const ::module::protocol::KeyTime& UserInfo::recommended(int index) const {
  // @@protoc_insertion_point(field_get:module.protocol.UserInfo.recommended)
  return recommended_.Get(index);
}
::module::protocol::KeyTime* UserInfo::mutable_recommended(int index) {
  // @@protoc_insertion_point(field_mutable:module.protocol.UserInfo.recommended)
  return recommended_.Mutable(index);
}
::module::protocol::KeyTime* UserInfo::add_recommended() {
  // @@protoc_insertion_point(field_add:module.protocol.UserInfo.recommended)
  return recommended_.Add();
}
::google::protobuf::RepeatedPtrField< ::module::protocol::KeyTime >*
UserInfo::mutable_recommended() {
  // @@protoc_insertion_point(field_mutable_list:module.protocol.UserInfo.recommended)
  return &recommended_;
}
const ::google::protobuf::RepeatedPtrField< ::module::protocol::KeyTime >&
UserInfo::recommended() const {
  // @@protoc_insertion_point(field_list:module.protocol.UserInfo.recommended)
  return recommended_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ItemQuery::kItemIdFieldNumber;
#endif  // !_MSC_VER

ItemQuery::ItemQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:module.protocol.ItemQuery)
}

void ItemQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemQuery::ItemQuery(const ItemQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:module.protocol.ItemQuery)
}

void ItemQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
}

ItemQuery::~ItemQuery() {
  // @@protoc_insertion_point(destructor:module.protocol.ItemQuery)
  SharedDtor();
}

void ItemQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemQuery_descriptor_;
}

const ItemQuery& ItemQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_supplement_2eproto();
  return *default_instance_;
}

ItemQuery* ItemQuery::default_instance_ = NULL;

ItemQuery* ItemQuery::New(::google::protobuf::Arena* arena) const {
  ItemQuery* n = new ItemQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemQuery::Clear() {
  item_id_ = GOOGLE_ULONGLONG(0);
}

bool ItemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:module.protocol.ItemQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 item_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:module.protocol.ItemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:module.protocol.ItemQuery)
  return false;
#undef DO_
}

void ItemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:module.protocol.ItemQuery)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:module.protocol.ItemQuery)
}

::google::protobuf::uint8* ItemQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:module.protocol.ItemQuery)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:module.protocol.ItemQuery)
  return target;
}

int ItemQuery::ByteSize() const {
  int total_size = 0;

  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemQuery::MergeFrom(const ItemQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
}

void ItemQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemQuery::CopyFrom(const ItemQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemQuery::IsInitialized() const {

  return true;
}

void ItemQuery::Swap(ItemQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemQuery::InternalSwap(ItemQuery* other) {
  std::swap(item_id_, other->item_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemQuery_descriptor_;
  metadata.reflection = ItemQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemQuery

// optional fixed64 item_id = 1;
void ItemQuery::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:module.protocol.ItemQuery.item_id)
  return item_id_;
}
 void ItemQuery::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:module.protocol.ItemQuery.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace module

// @@protoc_insertion_point(global_scope)
