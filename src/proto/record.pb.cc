// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: record.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* Elimination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Elimination_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyStr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyStr_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Code_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_record_2eproto() {
  protobuf_AddDesc_record_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "record.proto");
  GOOGLE_CHECK(file != NULL);
  Status_descriptor_ = file->message_type(0);
  static const int Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, reason_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _is_default_instance_));
  Elimination_descriptor_ = file->message_type(1);
  static const int Elimination_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Elimination, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Elimination, etime_),
  };
  Elimination_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Elimination_descriptor_,
      Elimination::default_instance_,
      Elimination_offsets_,
      -1,
      -1,
      -1,
      sizeof(Elimination),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Elimination, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Elimination, _is_default_instance_));
  KeyStr_descriptor_ = file->message_type(2);
  static const int KeyStr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStr, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStr, str_),
  };
  KeyStr_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyStr_descriptor_,
      KeyStr::default_instance_,
      KeyStr_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyStr),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStr, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyStr, _is_default_instance_));
  KeyTime_descriptor_ = file->message_type(3);
  static const int KeyTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTime, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTime, ctime_),
  };
  KeyTime_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyTime_descriptor_,
      KeyTime::default_instance_,
      KeyTime_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyTime),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTime, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyTime, _is_default_instance_));
  KeyPair_descriptor_ = file->message_type(4);
  static const int KeyPair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPair, power_),
  };
  KeyPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KeyPair_descriptor_,
      KeyPair::default_instance_,
      KeyPair_offsets_,
      -1,
      -1,
      -1,
      sizeof(KeyPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPair, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyPair, _is_default_instance_));
  UserQuery_descriptor_ = file->message_type(5);
  static const int UserQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuery, user_id_),
  };
  UserQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserQuery_descriptor_,
      UserQuery::default_instance_,
      UserQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserQuery, _is_default_instance_));
  UserInfo_descriptor_ = file->message_type(6);
  static const int UserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, ctime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, subscribe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, dislike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, readed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, recommended_),
  };
  UserInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _is_default_instance_));
  ItemQuery_descriptor_ = file->message_type(7);
  static const int ItemQuery_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemQuery, item_id_),
  };
  ItemQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemQuery_descriptor_,
      ItemQuery::default_instance_,
      ItemQuery_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemQuery, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemQuery, _is_default_instance_));
  ItemInfo_descriptor_ = file->message_type(8);
  static const int ItemInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, publish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, picture_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, click_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, click_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, category_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, belongs_to_),
  };
  ItemInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _is_default_instance_));
  Code_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_record_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Elimination_descriptor_, &Elimination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyStr_descriptor_, &KeyStr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyTime_descriptor_, &KeyTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KeyPair_descriptor_, &KeyPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserQuery_descriptor_, &UserQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemQuery_descriptor_, &ItemQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemInfo_descriptor_, &ItemInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_record_2eproto() {
  delete Status::default_instance_;
  delete Status_reflection_;
  delete Elimination::default_instance_;
  delete Elimination_reflection_;
  delete KeyStr::default_instance_;
  delete KeyStr_reflection_;
  delete KeyTime::default_instance_;
  delete KeyTime_reflection_;
  delete KeyPair::default_instance_;
  delete KeyPair_reflection_;
  delete UserQuery::default_instance_;
  delete UserQuery_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete ItemQuery::default_instance_;
  delete ItemQuery_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
}

void protobuf_AddDesc_record_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014record.proto\022\005proto\"&\n\006Status\022\014\n\004code\030"
    "\001 \001(\005\022\016\n\006reason\030\002 \001(\t\"(\n\013Elimination\022\n\n\002"
    "id\030\001 \001(\006\022\r\n\005etime\030\002 \001(\005\"\"\n\006KeyStr\022\013\n\003key"
    "\030\001 \001(\006\022\013\n\003str\030\002 \001(\014\"%\n\007KeyTime\022\013\n\003key\030\001 "
    "\001(\006\022\r\n\005ctime\030\002 \001(\005\"3\n\007KeyPair\022\013\n\003key\030\001 \001"
    "(\006\022\014\n\004name\030\002 \001(\014\022\r\n\005power\030\003 \001(\002\"\034\n\tUserQ"
    "uery\022\017\n\007user_id\030\001 \001(\006\"\261\001\n\010UserInfo\022\017\n\007us"
    "er_id\030\001 \001(\006\022\r\n\005ctime\030\002 \001(\005\022 \n\tsubscribe\030"
    "\003 \003(\0132\r.proto.KeyStr\022\036\n\007dislike\030\004 \003(\0132\r."
    "proto.KeyStr\022\036\n\006readed\030\005 \003(\0132\016.proto.Key"
    "Time\022#\n\013recommended\030\006 \003(\0132\016.proto.KeyTim"
    "e\"\034\n\tItemQuery\022\017\n\007item_id\030\001 \001(\006\"\355\001\n\010Item"
    "Info\022\017\n\007item_id\030\001 \001(\006\022\r\n\005power\030\002 \001(\002\022\024\n\014"
    "publish_time\030\003 \001(\005\022\021\n\titem_type\030\004 \001(\005\022\023\n"
    "\013picture_num\030\005 \001(\005\022\023\n\013click_count\030\006 \001(\005\022"
    "\022\n\nclick_time\030\007 \001(\005\022\023\n\013category_id\030\010 \001(\005"
    "\022!\n\tregion_id\030\t \003(\0132\016.proto.KeyPair\022\"\n\nb"
    "elongs_to\030\n \003(\0132\016.proto.KeyPair*\202\001\n\004Code"
    "\022\013\n\007CODE_OK\020\000\022\022\n\016CODE_NOT_FOUND\020\001\022\023\n\017COD"
    "E_CORRUPTION\020\002\022\026\n\022CODE_NOT_SUPPORTED\020\003\022\031"
    "\n\025CODE_INVALID_ARGUMENT\020\004\022\021\n\rCODE_IO_ERR"
    "OR\020\005b\006proto3", 852);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "record.proto", &protobuf_RegisterTypes);
  Status::default_instance_ = new Status();
  Elimination::default_instance_ = new Elimination();
  KeyStr::default_instance_ = new KeyStr();
  KeyTime::default_instance_ = new KeyTime();
  KeyPair::default_instance_ = new KeyPair();
  UserQuery::default_instance_ = new UserQuery();
  UserInfo::default_instance_ = new UserInfo();
  ItemQuery::default_instance_ = new ItemQuery();
  ItemInfo::default_instance_ = new ItemInfo();
  Status::default_instance_->InitAsDefaultInstance();
  Elimination::default_instance_->InitAsDefaultInstance();
  KeyStr::default_instance_->InitAsDefaultInstance();
  KeyTime::default_instance_->InitAsDefaultInstance();
  KeyPair::default_instance_->InitAsDefaultInstance();
  UserQuery::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  ItemQuery::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_record_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_record_2eproto {
  StaticDescriptorInitializer_record_2eproto() {
    protobuf_AddDesc_record_2eproto();
  }
} static_descriptor_initializer_record_2eproto_;
const ::google::protobuf::EnumDescriptor* Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Code_descriptor_;
}
bool Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Status::kCodeFieldNumber;
const int Status::kReasonFieldNumber;
#endif  // !_MSC_VER

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Status)
}

void Status::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Status)
}

void Status::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:proto.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
  code_ = 0;
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_reason;
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (tag == 18) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Status.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Status)
  // optional int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Status.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Status)
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Status)
  // optional int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Status.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Status)
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  // optional int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // optional string reason = 2;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(code_, other->code_);
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional int32 code = 1;
void Status::clear_code() {
  code_ = 0;
}
 ::google::protobuf::int32 Status::code() const {
  // @@protoc_insertion_point(field_get:proto.Status.code)
  return code_;
}
 void Status::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto.Status.code)
}

// optional string reason = 2;
void Status::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Status::reason() const {
  // @@protoc_insertion_point(field_get:proto.Status.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Status.reason)
}
 void Status::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Status.reason)
}
 void Status::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Status.reason)
}
 ::std::string* Status::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:proto.Status.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_reason() {
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:proto.Status.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Elimination::kIdFieldNumber;
const int Elimination::kEtimeFieldNumber;
#endif  // !_MSC_VER

Elimination::Elimination()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Elimination)
}

void Elimination::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Elimination::Elimination(const Elimination& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.Elimination)
}

void Elimination::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  etime_ = 0;
}

Elimination::~Elimination() {
  // @@protoc_insertion_point(destructor:proto.Elimination)
  SharedDtor();
}

void Elimination::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Elimination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Elimination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Elimination_descriptor_;
}

const Elimination& Elimination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

Elimination* Elimination::default_instance_ = NULL;

Elimination* Elimination::New(::google::protobuf::Arena* arena) const {
  Elimination* n = new Elimination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Elimination::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Elimination*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(id_, etime_);

#undef ZR_HELPER_
#undef ZR_

}

bool Elimination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Elimination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_etime;
        break;
      }

      // optional int32 etime = 2;
      case 2: {
        if (tag == 16) {
         parse_etime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &etime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Elimination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Elimination)
  return false;
#undef DO_
}

void Elimination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Elimination)
  // optional fixed64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->id(), output);
  }

  // optional int32 etime = 2;
  if (this->etime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->etime(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Elimination)
}

::google::protobuf::uint8* Elimination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.Elimination)
  // optional fixed64 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->id(), target);
  }

  // optional int32 etime = 2;
  if (this->etime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->etime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.Elimination)
  return target;
}

int Elimination::ByteSize() const {
  int total_size = 0;

  // optional fixed64 id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 etime = 2;
  if (this->etime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->etime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Elimination::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Elimination* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Elimination>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Elimination::MergeFrom(const Elimination& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.etime() != 0) {
    set_etime(from.etime());
  }
}

void Elimination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Elimination::CopyFrom(const Elimination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Elimination::IsInitialized() const {

  return true;
}

void Elimination::Swap(Elimination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Elimination::InternalSwap(Elimination* other) {
  std::swap(id_, other->id_);
  std::swap(etime_, other->etime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Elimination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Elimination_descriptor_;
  metadata.reflection = Elimination_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Elimination

// optional fixed64 id = 1;
void Elimination::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Elimination::id() const {
  // @@protoc_insertion_point(field_get:proto.Elimination.id)
  return id_;
}
 void Elimination::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Elimination.id)
}

// optional int32 etime = 2;
void Elimination::clear_etime() {
  etime_ = 0;
}
 ::google::protobuf::int32 Elimination::etime() const {
  // @@protoc_insertion_point(field_get:proto.Elimination.etime)
  return etime_;
}
 void Elimination::set_etime(::google::protobuf::int32 value) {
  
  etime_ = value;
  // @@protoc_insertion_point(field_set:proto.Elimination.etime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int KeyStr::kKeyFieldNumber;
const int KeyStr::kStrFieldNumber;
#endif  // !_MSC_VER

KeyStr::KeyStr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.KeyStr)
}

void KeyStr::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeyStr::KeyStr(const KeyStr& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.KeyStr)
}

void KeyStr::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  str_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeyStr::~KeyStr() {
  // @@protoc_insertion_point(destructor:proto.KeyStr)
  SharedDtor();
}

void KeyStr::SharedDtor() {
  str_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyStr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyStr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyStr_descriptor_;
}

const KeyStr& KeyStr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

KeyStr* KeyStr::default_instance_ = NULL;

KeyStr* KeyStr::New(::google::protobuf::Arena* arena) const {
  KeyStr* n = new KeyStr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyStr::Clear() {
  key_ = GOOGLE_ULONGLONG(0);
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool KeyStr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.KeyStr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 key = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_str;
        break;
      }

      // optional bytes str = 2;
      case 2: {
        if (tag == 18) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.KeyStr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.KeyStr)
  return false;
#undef DO_
}

void KeyStr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.KeyStr)
  // optional fixed64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->key(), output);
  }

  // optional bytes str = 2;
  if (this->str().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->str(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.KeyStr)
}

::google::protobuf::uint8* KeyStr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeyStr)
  // optional fixed64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->key(), target);
  }

  // optional bytes str = 2;
  if (this->str().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.KeyStr)
  return target;
}

int KeyStr::ByteSize() const {
  int total_size = 0;

  // optional fixed64 key = 1;
  if (this->key() != 0) {
    total_size += 1 + 8;
  }

  // optional bytes str = 2;
  if (this->str().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->str());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyStr::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyStr* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyStr>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyStr::MergeFrom(const KeyStr& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.str().size() > 0) {

    str_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.str_);
  }
}

void KeyStr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyStr::CopyFrom(const KeyStr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyStr::IsInitialized() const {

  return true;
}

void KeyStr::Swap(KeyStr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyStr::InternalSwap(KeyStr* other) {
  std::swap(key_, other->key_);
  str_.Swap(&other->str_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyStr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyStr_descriptor_;
  metadata.reflection = KeyStr_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyStr

// optional fixed64 key = 1;
void KeyStr::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 KeyStr::key() const {
  // @@protoc_insertion_point(field_get:proto.KeyStr.key)
  return key_;
}
 void KeyStr::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyStr.key)
}

// optional bytes str = 2;
void KeyStr::clear_str() {
  str_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyStr::str() const {
  // @@protoc_insertion_point(field_get:proto.KeyStr.str)
  return str_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyStr::set_str(const ::std::string& value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.KeyStr.str)
}
 void KeyStr::set_str(const char* value) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.KeyStr.str)
}
 void KeyStr::set_str(const void* value, size_t size) {
  
  str_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.KeyStr.str)
}
 ::std::string* KeyStr::mutable_str() {
  
  // @@protoc_insertion_point(field_mutable:proto.KeyStr.str)
  return str_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyStr::release_str() {
  
  return str_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyStr::set_allocated_str(::std::string* str) {
  if (str != NULL) {
    
  } else {
    
  }
  str_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), str);
  // @@protoc_insertion_point(field_set_allocated:proto.KeyStr.str)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int KeyTime::kKeyFieldNumber;
const int KeyTime::kCtimeFieldNumber;
#endif  // !_MSC_VER

KeyTime::KeyTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.KeyTime)
}

void KeyTime::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeyTime::KeyTime(const KeyTime& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.KeyTime)
}

void KeyTime::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  ctime_ = 0;
}

KeyTime::~KeyTime() {
  // @@protoc_insertion_point(destructor:proto.KeyTime)
  SharedDtor();
}

void KeyTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyTime_descriptor_;
}

const KeyTime& KeyTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

KeyTime* KeyTime::default_instance_ = NULL;

KeyTime* KeyTime::New(::google::protobuf::Arena* arena) const {
  KeyTime* n = new KeyTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyTime::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KeyTime*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(key_, ctime_);

#undef ZR_HELPER_
#undef ZR_

}

bool KeyTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.KeyTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 key = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ctime;
        break;
      }

      // optional int32 ctime = 2;
      case 2: {
        if (tag == 16) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.KeyTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.KeyTime)
  return false;
#undef DO_
}

void KeyTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.KeyTime)
  // optional fixed64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->key(), output);
  }

  // optional int32 ctime = 2;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctime(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.KeyTime)
}

::google::protobuf::uint8* KeyTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeyTime)
  // optional fixed64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->key(), target);
  }

  // optional int32 ctime = 2;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctime(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.KeyTime)
  return target;
}

int KeyTime::ByteSize() const {
  int total_size = 0;

  // optional fixed64 key = 1;
  if (this->key() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 ctime = 2;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ctime());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyTime::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyTime* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyTime>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyTime::MergeFrom(const KeyTime& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
}

void KeyTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyTime::CopyFrom(const KeyTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyTime::IsInitialized() const {

  return true;
}

void KeyTime::Swap(KeyTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyTime::InternalSwap(KeyTime* other) {
  std::swap(key_, other->key_);
  std::swap(ctime_, other->ctime_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyTime_descriptor_;
  metadata.reflection = KeyTime_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyTime

// optional fixed64 key = 1;
void KeyTime::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 KeyTime::key() const {
  // @@protoc_insertion_point(field_get:proto.KeyTime.key)
  return key_;
}
 void KeyTime::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyTime.key)
}

// optional int32 ctime = 2;
void KeyTime::clear_ctime() {
  ctime_ = 0;
}
 ::google::protobuf::int32 KeyTime::ctime() const {
  // @@protoc_insertion_point(field_get:proto.KeyTime.ctime)
  return ctime_;
}
 void KeyTime::set_ctime(::google::protobuf::int32 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyTime.ctime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int KeyPair::kKeyFieldNumber;
const int KeyPair::kNameFieldNumber;
const int KeyPair::kPowerFieldNumber;
#endif  // !_MSC_VER

KeyPair::KeyPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.KeyPair)
}

void KeyPair::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

KeyPair::KeyPair(const KeyPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.KeyPair)
}

void KeyPair::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = 0;
}

KeyPair::~KeyPair() {
  // @@protoc_insertion_point(destructor:proto.KeyPair)
  SharedDtor();
}

void KeyPair::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KeyPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyPair_descriptor_;
}

const KeyPair& KeyPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

KeyPair* KeyPair::default_instance_ = NULL;

KeyPair* KeyPair::New(::google::protobuf::Arena* arena) const {
  KeyPair* n = new KeyPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyPair::Clear() {
  key_ = GOOGLE_ULONGLONG(0);
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  power_ = 0;
}

bool KeyPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.KeyPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 key = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &key_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_power;
        break;
      }

      // optional float power = 3;
      case 3: {
        if (tag == 29) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.KeyPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.KeyPair)
  return false;
#undef DO_
}

void KeyPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.KeyPair)
  // optional fixed64 key = 1;
  if (this->key() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->key(), output);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->name(), output);
  }

  // optional float power = 3;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->power(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.KeyPair)
}

::google::protobuf::uint8* KeyPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.KeyPair)
  // optional fixed64 key = 1;
  if (this->key() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->key(), target);
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional float power = 3;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->power(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.KeyPair)
  return target;
}

int KeyPair::ByteSize() const {
  int total_size = 0;

  // optional fixed64 key = 1;
  if (this->key() != 0) {
    total_size += 1 + 8;
  }

  // optional bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // optional float power = 3;
  if (this->power() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyPair::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const KeyPair* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyPair>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyPair::MergeFrom(const KeyPair& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.key() != 0) {
    set_key(from.key());
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
}

void KeyPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPair::CopyFrom(const KeyPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPair::IsInitialized() const {

  return true;
}

void KeyPair::Swap(KeyPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyPair::InternalSwap(KeyPair* other) {
  std::swap(key_, other->key_);
  name_.Swap(&other->name_);
  std::swap(power_, other->power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KeyPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyPair_descriptor_;
  metadata.reflection = KeyPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyPair

// optional fixed64 key = 1;
void KeyPair::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 KeyPair::key() const {
  // @@protoc_insertion_point(field_get:proto.KeyPair.key)
  return key_;
}
 void KeyPair::set_key(::google::protobuf::uint64 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyPair.key)
}

// optional bytes name = 2;
void KeyPair::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& KeyPair::name() const {
  // @@protoc_insertion_point(field_get:proto.KeyPair.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.KeyPair.name)
}
 void KeyPair::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.KeyPair.name)
}
 void KeyPair::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.KeyPair.name)
}
 ::std::string* KeyPair::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.KeyPair.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KeyPair::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KeyPair::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.KeyPair.name)
}

// optional float power = 3;
void KeyPair::clear_power() {
  power_ = 0;
}
 float KeyPair::power() const {
  // @@protoc_insertion_point(field_get:proto.KeyPair.power)
  return power_;
}
 void KeyPair::set_power(float value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyPair.power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserQuery::kUserIdFieldNumber;
#endif  // !_MSC_VER

UserQuery::UserQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserQuery)
}

void UserQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserQuery::UserQuery(const UserQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.UserQuery)
}

void UserQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

UserQuery::~UserQuery() {
  // @@protoc_insertion_point(destructor:proto.UserQuery)
  SharedDtor();
}

void UserQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserQuery_descriptor_;
}

const UserQuery& UserQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

UserQuery* UserQuery::default_instance_ = NULL;

UserQuery* UserQuery::New(::google::protobuf::Arena* arena) const {
  UserQuery* n = new UserQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserQuery::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool UserQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserQuery)
  return false;
#undef DO_
}

void UserQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserQuery)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserQuery)
}

::google::protobuf::uint8* UserQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserQuery)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.UserQuery)
  return target;
}

int UserQuery::ByteSize() const {
  int total_size = 0;

  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserQuery::MergeFrom(const UserQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void UserQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserQuery::CopyFrom(const UserQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserQuery::IsInitialized() const {

  return true;
}

void UserQuery::Swap(UserQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserQuery::InternalSwap(UserQuery* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserQuery_descriptor_;
  metadata.reflection = UserQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserQuery

// optional fixed64 user_id = 1;
void UserQuery::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserQuery::user_id() const {
  // @@protoc_insertion_point(field_get:proto.UserQuery.user_id)
  return user_id_;
}
 void UserQuery::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.UserQuery.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUserIdFieldNumber;
const int UserInfo::kCtimeFieldNumber;
const int UserInfo::kSubscribeFieldNumber;
const int UserInfo::kDislikeFieldNumber;
const int UserInfo::kReadedFieldNumber;
const int UserInfo::kRecommendedFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.UserInfo)
}

void UserInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ctime_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:proto.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ctime_ = 0;
  subscribe_.Clear();
  dislike_.Clear();
  readed_.Clear();
  recommended_.Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 user_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ctime;
        break;
      }

      // optional int32 ctime = 2;
      case 2: {
        if (tag == 16) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctime_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_subscribe;
        break;
      }

      // repeated .proto.KeyStr subscribe = 3;
      case 3: {
        if (tag == 26) {
         parse_subscribe:
          DO_(input->IncrementRecursionDepth());
         parse_loop_subscribe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subscribe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_subscribe;
        if (input->ExpectTag(34)) goto parse_loop_dislike;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto.KeyStr dislike = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_dislike:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dislike()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_dislike;
        if (input->ExpectTag(42)) goto parse_loop_readed;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto.KeyTime readed = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_readed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_readed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_readed;
        if (input->ExpectTag(50)) goto parse_loop_recommended;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto.KeyTime recommended = 6;
      case 6: {
        if (tag == 50) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_recommended:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_recommended()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_recommended;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserInfo)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->user_id(), output);
  }

  // optional int32 ctime = 2;
  if (this->ctime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ctime(), output);
  }

  // repeated .proto.KeyStr subscribe = 3;
  for (unsigned int i = 0, n = this->subscribe_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->subscribe(i), output);
  }

  // repeated .proto.KeyStr dislike = 4;
  for (unsigned int i = 0, n = this->dislike_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dislike(i), output);
  }

  // repeated .proto.KeyTime readed = 5;
  for (unsigned int i = 0, n = this->readed_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->readed(i), output);
  }

  // repeated .proto.KeyTime recommended = 6;
  for (unsigned int i = 0, n = this->recommended_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->recommended(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.UserInfo)
  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->user_id(), target);
  }

  // optional int32 ctime = 2;
  if (this->ctime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ctime(), target);
  }

  // repeated .proto.KeyStr subscribe = 3;
  for (unsigned int i = 0, n = this->subscribe_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->subscribe(i), target);
  }

  // repeated .proto.KeyStr dislike = 4;
  for (unsigned int i = 0, n = this->dislike_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dislike(i), target);
  }

  // repeated .proto.KeyTime readed = 5;
  for (unsigned int i = 0, n = this->readed_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->readed(i), target);
  }

  // repeated .proto.KeyTime recommended = 6;
  for (unsigned int i = 0, n = this->recommended_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->recommended(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  // optional fixed64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 ctime = 2;
  if (this->ctime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ctime());
  }

  // repeated .proto.KeyStr subscribe = 3;
  total_size += 1 * this->subscribe_size();
  for (int i = 0; i < this->subscribe_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subscribe(i));
  }

  // repeated .proto.KeyStr dislike = 4;
  total_size += 1 * this->dislike_size();
  for (int i = 0; i < this->dislike_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dislike(i));
  }

  // repeated .proto.KeyTime readed = 5;
  total_size += 1 * this->readed_size();
  for (int i = 0; i < this->readed_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->readed(i));
  }

  // repeated .proto.KeyTime recommended = 6;
  total_size += 1 * this->recommended_size();
  for (int i = 0; i < this->recommended_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recommended(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  subscribe_.MergeFrom(from.subscribe_);
  dislike_.MergeFrom(from.dislike_);
  readed_.MergeFrom(from.readed_);
  recommended_.MergeFrom(from.recommended_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.ctime() != 0) {
    set_ctime(from.ctime());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(ctime_, other->ctime_);
  subscribe_.UnsafeArenaSwap(&other->subscribe_);
  dislike_.UnsafeArenaSwap(&other->dislike_);
  readed_.UnsafeArenaSwap(&other->readed_);
  recommended_.UnsafeArenaSwap(&other->recommended_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// optional fixed64 user_id = 1;
void UserInfo::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:proto.UserInfo.user_id)
  return user_id_;
}
 void UserInfo::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:proto.UserInfo.user_id)
}

// optional int32 ctime = 2;
void UserInfo::clear_ctime() {
  ctime_ = 0;
}
 ::google::protobuf::int32 UserInfo::ctime() const {
  // @@protoc_insertion_point(field_get:proto.UserInfo.ctime)
  return ctime_;
}
 void UserInfo::set_ctime(::google::protobuf::int32 value) {
  
  ctime_ = value;
  // @@protoc_insertion_point(field_set:proto.UserInfo.ctime)
}

// repeated .proto.KeyStr subscribe = 3;
int UserInfo::subscribe_size() const {
  return subscribe_.size();
}
void UserInfo::clear_subscribe() {
  subscribe_.Clear();
}
const ::proto::KeyStr& UserInfo::subscribe(int index) const {
  // @@protoc_insertion_point(field_get:proto.UserInfo.subscribe)
  return subscribe_.Get(index);
}
::proto::KeyStr* UserInfo::mutable_subscribe(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UserInfo.subscribe)
  return subscribe_.Mutable(index);
}
::proto::KeyStr* UserInfo::add_subscribe() {
  // @@protoc_insertion_point(field_add:proto.UserInfo.subscribe)
  return subscribe_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::KeyStr >*
UserInfo::mutable_subscribe() {
  // @@protoc_insertion_point(field_mutable_list:proto.UserInfo.subscribe)
  return &subscribe_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::KeyStr >&
UserInfo::subscribe() const {
  // @@protoc_insertion_point(field_list:proto.UserInfo.subscribe)
  return subscribe_;
}

// repeated .proto.KeyStr dislike = 4;
int UserInfo::dislike_size() const {
  return dislike_.size();
}
void UserInfo::clear_dislike() {
  dislike_.Clear();
}
const ::proto::KeyStr& UserInfo::dislike(int index) const {
  // @@protoc_insertion_point(field_get:proto.UserInfo.dislike)
  return dislike_.Get(index);
}
::proto::KeyStr* UserInfo::mutable_dislike(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UserInfo.dislike)
  return dislike_.Mutable(index);
}
::proto::KeyStr* UserInfo::add_dislike() {
  // @@protoc_insertion_point(field_add:proto.UserInfo.dislike)
  return dislike_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::KeyStr >*
UserInfo::mutable_dislike() {
  // @@protoc_insertion_point(field_mutable_list:proto.UserInfo.dislike)
  return &dislike_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::KeyStr >&
UserInfo::dislike() const {
  // @@protoc_insertion_point(field_list:proto.UserInfo.dislike)
  return dislike_;
}

// repeated .proto.KeyTime readed = 5;
int UserInfo::readed_size() const {
  return readed_.size();
}
void UserInfo::clear_readed() {
  readed_.Clear();
}
const ::proto::KeyTime& UserInfo::readed(int index) const {
  // @@protoc_insertion_point(field_get:proto.UserInfo.readed)
  return readed_.Get(index);
}
::proto::KeyTime* UserInfo::mutable_readed(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UserInfo.readed)
  return readed_.Mutable(index);
}
::proto::KeyTime* UserInfo::add_readed() {
  // @@protoc_insertion_point(field_add:proto.UserInfo.readed)
  return readed_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::KeyTime >*
UserInfo::mutable_readed() {
  // @@protoc_insertion_point(field_mutable_list:proto.UserInfo.readed)
  return &readed_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::KeyTime >&
UserInfo::readed() const {
  // @@protoc_insertion_point(field_list:proto.UserInfo.readed)
  return readed_;
}

// repeated .proto.KeyTime recommended = 6;
int UserInfo::recommended_size() const {
  return recommended_.size();
}
void UserInfo::clear_recommended() {
  recommended_.Clear();
}
const ::proto::KeyTime& UserInfo::recommended(int index) const {
  // @@protoc_insertion_point(field_get:proto.UserInfo.recommended)
  return recommended_.Get(index);
}
::proto::KeyTime* UserInfo::mutable_recommended(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UserInfo.recommended)
  return recommended_.Mutable(index);
}
::proto::KeyTime* UserInfo::add_recommended() {
  // @@protoc_insertion_point(field_add:proto.UserInfo.recommended)
  return recommended_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::KeyTime >*
UserInfo::mutable_recommended() {
  // @@protoc_insertion_point(field_mutable_list:proto.UserInfo.recommended)
  return &recommended_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::KeyTime >&
UserInfo::recommended() const {
  // @@protoc_insertion_point(field_list:proto.UserInfo.recommended)
  return recommended_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ItemQuery::kItemIdFieldNumber;
#endif  // !_MSC_VER

ItemQuery::ItemQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ItemQuery)
}

void ItemQuery::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemQuery::ItemQuery(const ItemQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ItemQuery)
}

void ItemQuery::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
}

ItemQuery::~ItemQuery() {
  // @@protoc_insertion_point(destructor:proto.ItemQuery)
  SharedDtor();
}

void ItemQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemQuery_descriptor_;
}

const ItemQuery& ItemQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

ItemQuery* ItemQuery::default_instance_ = NULL;

ItemQuery* ItemQuery::New(::google::protobuf::Arena* arena) const {
  ItemQuery* n = new ItemQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemQuery::Clear() {
  item_id_ = GOOGLE_ULONGLONG(0);
}

bool ItemQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ItemQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 item_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ItemQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ItemQuery)
  return false;
#undef DO_
}

void ItemQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ItemQuery)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ItemQuery)
}

::google::protobuf::uint8* ItemQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ItemQuery)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.ItemQuery)
  return target;
}

int ItemQuery::ByteSize() const {
  int total_size = 0;

  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemQuery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemQuery>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemQuery::MergeFrom(const ItemQuery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
}

void ItemQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemQuery::CopyFrom(const ItemQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemQuery::IsInitialized() const {

  return true;
}

void ItemQuery::Swap(ItemQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemQuery::InternalSwap(ItemQuery* other) {
  std::swap(item_id_, other->item_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemQuery_descriptor_;
  metadata.reflection = ItemQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemQuery

// optional fixed64 item_id = 1;
void ItemQuery::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ItemQuery::item_id() const {
  // @@protoc_insertion_point(field_get:proto.ItemQuery.item_id)
  return item_id_;
}
 void ItemQuery::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemQuery.item_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kItemIdFieldNumber;
const int ItemInfo::kPowerFieldNumber;
const int ItemInfo::kPublishTimeFieldNumber;
const int ItemInfo::kItemTypeFieldNumber;
const int ItemInfo::kPictureNumFieldNumber;
const int ItemInfo::kClickCountFieldNumber;
const int ItemInfo::kClickTimeFieldNumber;
const int ItemInfo::kCategoryIdFieldNumber;
const int ItemInfo::kRegionIdFieldNumber;
const int ItemInfo::kBelongsToFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ItemInfo)
}

void ItemInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:proto.ItemInfo)
}

void ItemInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  power_ = 0;
  publish_time_ = 0;
  item_type_ = 0;
  picture_num_ = 0;
  click_count_ = 0;
  click_time_ = 0;
  category_id_ = 0;
}

ItemInfo::~ItemInfo() {
  // @@protoc_insertion_point(destructor:proto.ItemInfo)
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_record_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New(::google::protobuf::Arena* arena) const {
  ItemInfo* n = new ItemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemInfo::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ItemInfo*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, click_time_);
  category_id_ = 0;

#undef ZR_HELPER_
#undef ZR_

  region_id_.Clear();
  belongs_to_.Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 item_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_power;
        break;
      }

      // optional float power = 2;
      case 2: {
        if (tag == 21) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_publish_time;
        break;
      }

      // optional int32 publish_time = 3;
      case 3: {
        if (tag == 24) {
         parse_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_item_type;
        break;
      }

      // optional int32 item_type = 4;
      case 4: {
        if (tag == 32) {
         parse_item_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_picture_num;
        break;
      }

      // optional int32 picture_num = 5;
      case 5: {
        if (tag == 40) {
         parse_picture_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_click_count;
        break;
      }

      // optional int32 click_count = 6;
      case 6: {
        if (tag == 48) {
         parse_click_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &click_count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_click_time;
        break;
      }

      // optional int32 click_time = 7;
      case 7: {
        if (tag == 56) {
         parse_click_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &click_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_category_id;
        break;
      }

      // optional int32 category_id = 8;
      case 8: {
        if (tag == 64) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &category_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_region_id;
        break;
      }

      // repeated .proto.KeyPair region_id = 9;
      case 9: {
        if (tag == 74) {
         parse_region_id:
          DO_(input->IncrementRecursionDepth());
         parse_loop_region_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_region_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_region_id;
        if (input->ExpectTag(82)) goto parse_loop_belongs_to;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .proto.KeyPair belongs_to = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_belongs_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_belongs_to()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_belongs_to;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ItemInfo)
  return false;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ItemInfo)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_id(), output);
  }

  // optional float power = 2;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->power(), output);
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->publish_time(), output);
  }

  // optional int32 item_type = 4;
  if (this->item_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->item_type(), output);
  }

  // optional int32 picture_num = 5;
  if (this->picture_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->picture_num(), output);
  }

  // optional int32 click_count = 6;
  if (this->click_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->click_count(), output);
  }

  // optional int32 click_time = 7;
  if (this->click_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->click_time(), output);
  }

  // optional int32 category_id = 8;
  if (this->category_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->category_id(), output);
  }

  // repeated .proto.KeyPair region_id = 9;
  for (unsigned int i = 0, n = this->region_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->region_id(i), output);
  }

  // repeated .proto.KeyPair belongs_to = 10;
  for (unsigned int i = 0, n = this->belongs_to_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->belongs_to(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ItemInfo)
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.ItemInfo)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_id(), target);
  }

  // optional float power = 2;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->power(), target);
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->publish_time(), target);
  }

  // optional int32 item_type = 4;
  if (this->item_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->item_type(), target);
  }

  // optional int32 picture_num = 5;
  if (this->picture_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->picture_num(), target);
  }

  // optional int32 click_count = 6;
  if (this->click_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->click_count(), target);
  }

  // optional int32 click_time = 7;
  if (this->click_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->click_time(), target);
  }

  // optional int32 category_id = 8;
  if (this->category_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->category_id(), target);
  }

  // repeated .proto.KeyPair region_id = 9;
  for (unsigned int i = 0, n = this->region_id_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->region_id(i), target);
  }

  // repeated .proto.KeyPair belongs_to = 10;
  for (unsigned int i = 0, n = this->belongs_to_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->belongs_to(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto.ItemInfo)
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 + 8;
  }

  // optional float power = 2;
  if (this->power() != 0) {
    total_size += 1 + 4;
  }

  // optional int32 publish_time = 3;
  if (this->publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->publish_time());
  }

  // optional int32 item_type = 4;
  if (this->item_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->item_type());
  }

  // optional int32 picture_num = 5;
  if (this->picture_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_num());
  }

  // optional int32 click_count = 6;
  if (this->click_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->click_count());
  }

  // optional int32 click_time = 7;
  if (this->click_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->click_time());
  }

  // optional int32 category_id = 8;
  if (this->category_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->category_id());
  }

  // repeated .proto.KeyPair region_id = 9;
  total_size += 1 * this->region_id_size();
  for (int i = 0; i < this->region_id_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->region_id(i));
  }

  // repeated .proto.KeyPair belongs_to = 10;
  total_size += 1 * this->belongs_to_size();
  for (int i = 0; i < this->belongs_to_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->belongs_to(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  region_id_.MergeFrom(from.region_id_);
  belongs_to_.MergeFrom(from.belongs_to_);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
  if (from.publish_time() != 0) {
    set_publish_time(from.publish_time());
  }
  if (from.item_type() != 0) {
    set_item_type(from.item_type());
  }
  if (from.picture_num() != 0) {
    set_picture_num(from.picture_num());
  }
  if (from.click_count() != 0) {
    set_click_count(from.click_count());
  }
  if (from.click_time() != 0) {
    set_click_time(from.click_time());
  }
  if (from.category_id() != 0) {
    set_category_id(from.category_id());
  }
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemInfo::InternalSwap(ItemInfo* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(power_, other->power_);
  std::swap(publish_time_, other->publish_time_);
  std::swap(item_type_, other->item_type_);
  std::swap(picture_num_, other->picture_num_);
  std::swap(click_count_, other->click_count_);
  std::swap(click_time_, other->click_time_);
  std::swap(category_id_, other->category_id_);
  region_id_.UnsafeArenaSwap(&other->region_id_);
  belongs_to_.UnsafeArenaSwap(&other->belongs_to_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemInfo

// optional fixed64 item_id = 1;
void ItemInfo::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ItemInfo::item_id() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.item_id)
  return item_id_;
}
 void ItemInfo::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.item_id)
}

// optional float power = 2;
void ItemInfo::clear_power() {
  power_ = 0;
}
 float ItemInfo::power() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.power)
  return power_;
}
 void ItemInfo::set_power(float value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.power)
}

// optional int32 publish_time = 3;
void ItemInfo::clear_publish_time() {
  publish_time_ = 0;
}
 ::google::protobuf::int32 ItemInfo::publish_time() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.publish_time)
  return publish_time_;
}
 void ItemInfo::set_publish_time(::google::protobuf::int32 value) {
  
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.publish_time)
}

// optional int32 item_type = 4;
void ItemInfo::clear_item_type() {
  item_type_ = 0;
}
 ::google::protobuf::int32 ItemInfo::item_type() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.item_type)
  return item_type_;
}
 void ItemInfo::set_item_type(::google::protobuf::int32 value) {
  
  item_type_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.item_type)
}

// optional int32 picture_num = 5;
void ItemInfo::clear_picture_num() {
  picture_num_ = 0;
}
 ::google::protobuf::int32 ItemInfo::picture_num() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.picture_num)
  return picture_num_;
}
 void ItemInfo::set_picture_num(::google::protobuf::int32 value) {
  
  picture_num_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.picture_num)
}

// optional int32 click_count = 6;
void ItemInfo::clear_click_count() {
  click_count_ = 0;
}
 ::google::protobuf::int32 ItemInfo::click_count() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.click_count)
  return click_count_;
}
 void ItemInfo::set_click_count(::google::protobuf::int32 value) {
  
  click_count_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.click_count)
}

// optional int32 click_time = 7;
void ItemInfo::clear_click_time() {
  click_time_ = 0;
}
 ::google::protobuf::int32 ItemInfo::click_time() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.click_time)
  return click_time_;
}
 void ItemInfo::set_click_time(::google::protobuf::int32 value) {
  
  click_time_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.click_time)
}

// optional int32 category_id = 8;
void ItemInfo::clear_category_id() {
  category_id_ = 0;
}
 ::google::protobuf::int32 ItemInfo::category_id() const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.category_id)
  return category_id_;
}
 void ItemInfo::set_category_id(::google::protobuf::int32 value) {
  
  category_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ItemInfo.category_id)
}

// repeated .proto.KeyPair region_id = 9;
int ItemInfo::region_id_size() const {
  return region_id_.size();
}
void ItemInfo::clear_region_id() {
  region_id_.Clear();
}
const ::proto::KeyPair& ItemInfo::region_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.region_id)
  return region_id_.Get(index);
}
::proto::KeyPair* ItemInfo::mutable_region_id(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ItemInfo.region_id)
  return region_id_.Mutable(index);
}
::proto::KeyPair* ItemInfo::add_region_id() {
  // @@protoc_insertion_point(field_add:proto.ItemInfo.region_id)
  return region_id_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::KeyPair >*
ItemInfo::mutable_region_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.ItemInfo.region_id)
  return &region_id_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::KeyPair >&
ItemInfo::region_id() const {
  // @@protoc_insertion_point(field_list:proto.ItemInfo.region_id)
  return region_id_;
}

// repeated .proto.KeyPair belongs_to = 10;
int ItemInfo::belongs_to_size() const {
  return belongs_to_.size();
}
void ItemInfo::clear_belongs_to() {
  belongs_to_.Clear();
}
const ::proto::KeyPair& ItemInfo::belongs_to(int index) const {
  // @@protoc_insertion_point(field_get:proto.ItemInfo.belongs_to)
  return belongs_to_.Get(index);
}
::proto::KeyPair* ItemInfo::mutable_belongs_to(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ItemInfo.belongs_to)
  return belongs_to_.Mutable(index);
}
::proto::KeyPair* ItemInfo::add_belongs_to() {
  // @@protoc_insertion_point(field_add:proto.ItemInfo.belongs_to)
  return belongs_to_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::KeyPair >*
ItemInfo::mutable_belongs_to() {
  // @@protoc_insertion_point(field_mutable_list:proto.ItemInfo.belongs_to)
  return &belongs_to_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::KeyPair >&
ItemInfo::belongs_to() const {
  // @@protoc_insertion_point(field_list:proto.ItemInfo.belongs_to)
  return belongs_to_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
