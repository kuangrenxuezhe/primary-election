// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemTag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemTag_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemWord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemWord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSource_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSource_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Recommend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Recommend_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateSetBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateSetBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateSetPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateSetPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandidateSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandidateSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  User_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Feedback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Feedback_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeedbackRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeedbackRespond_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlgorithmPower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlgorithmPower_reflection_ = NULL;
const ::google::protobuf::Descriptor* Category_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Category_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlgorithmCategory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlgorithmCategory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferRespond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferRespond_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TopType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecommendType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RecommendNetwork_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CandidateType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Action_descriptor_ = file->message_type(0);
  static const int Action_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, click_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, stay_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, srp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, click_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, dislike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, history_id_),
  };
  Action_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      -1,
      -1,
      -1,
      sizeof(Action),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _is_default_instance_));
  ItemTag_descriptor_ = file->message_type(1);
  static const int ItemTag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTag, tag_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTag, tag_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTag, tag_power_),
  };
  ItemTag_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemTag_descriptor_,
      ItemTag::default_instance_,
      ItemTag_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemTag),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTag, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemTag, _is_default_instance_));
  ItemWord_descriptor_ = file->message_type(2);
  static const int ItemWord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemWord, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemWord, count_),
  };
  ItemWord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemWord_descriptor_,
      ItemWord::default_instance_,
      ItemWord_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemWord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemWord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemWord, _is_default_instance_));
  TopInfo_descriptor_ = file->message_type(3);
  static const int TopInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, top_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, top_srp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, top_circle_id_),
  };
  TopInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopInfo_descriptor_,
      TopInfo::default_instance_,
      TopInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopInfo, _is_default_instance_));
  ItemSource_descriptor_ = file->message_type(4);
  static const int ItemSource_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSource, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSource, source_name_),
  };
  ItemSource_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ItemSource_descriptor_,
      ItemSource::default_instance_,
      ItemSource_offsets_,
      -1,
      -1,
      -1,
      sizeof(ItemSource),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSource, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSource, _is_default_instance_));
  Item_descriptor_ = file->message_type(5);
  static const int Item_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, publish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, push_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, picture_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, srp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, circle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, top_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, data_source_),
  };
  Item_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      -1,
      -1,
      -1,
      sizeof(Item),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _is_default_instance_));
  Subscribe_descriptor_ = file->message_type(6);
  static const int Subscribe_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, srp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, circle_id_),
  };
  Subscribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subscribe_descriptor_,
      Subscribe::default_instance_,
      Subscribe_offsets_,
      -1,
      -1,
      -1,
      sizeof(Subscribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _is_default_instance_));
  Recommend_descriptor_ = file->message_type(7);
  static const int Recommend_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, request_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, recommend_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, beg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, network_),
  };
  Recommend_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Recommend_descriptor_,
      Recommend::default_instance_,
      Recommend_offsets_,
      -1,
      -1,
      -1,
      sizeof(Recommend),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Recommend, _is_default_instance_));
  CandidateSetBase_descriptor_ = file->message_type(8);
  static const int CandidateSetBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetBase, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetBase, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetBase, history_id_),
  };
  CandidateSetBase_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CandidateSetBase_descriptor_,
      CandidateSetBase::default_instance_,
      CandidateSetBase_offsets_,
      -1,
      -1,
      -1,
      sizeof(CandidateSetBase),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetBase, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetBase, _is_default_instance_));
  CandidateSetPayload_descriptor_ = file->message_type(9);
  static const int CandidateSetPayload_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, publish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, category_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, picture_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, type_),
  };
  CandidateSetPayload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CandidateSetPayload_descriptor_,
      CandidateSetPayload::default_instance_,
      CandidateSetPayload_offsets_,
      -1,
      -1,
      -1,
      sizeof(CandidateSetPayload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSetPayload, _is_default_instance_));
  CandidateSet_descriptor_ = file->message_type(10);
  static const int CandidateSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSet, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSet, payload_),
  };
  CandidateSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CandidateSet_descriptor_,
      CandidateSet::default_instance_,
      CandidateSet_offsets_,
      -1,
      -1,
      -1,
      sizeof(CandidateSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSet, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandidateSet, _is_default_instance_));
  User_descriptor_ = file->message_type(11);
  static const int User_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, user_id_),
  };
  User_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      User_descriptor_,
      User::default_instance_,
      User_offsets_,
      -1,
      -1,
      -1,
      sizeof(User),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(User, _is_default_instance_));
  UserStatus_descriptor_ = file->message_type(12);
  static const int UserStatus_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, is_new_user_),
  };
  UserStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserStatus_descriptor_,
      UserStatus::default_instance_,
      UserStatus_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatus, _is_default_instance_));
  Feedback_descriptor_ = file->message_type(13);
  static const int Feedback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, item_id_),
  };
  Feedback_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Feedback_descriptor_,
      Feedback::default_instance_,
      Feedback_offsets_,
      -1,
      -1,
      -1,
      sizeof(Feedback),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Feedback, _is_default_instance_));
  FeedbackRespond_descriptor_ = file->message_type(14);
  static const int FeedbackRespond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRespond, respond_),
  };
  FeedbackRespond_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeedbackRespond_descriptor_,
      FeedbackRespond::default_instance_,
      FeedbackRespond_offsets_,
      -1,
      -1,
      -1,
      sizeof(FeedbackRespond),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRespond, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeedbackRespond, _is_default_instance_));
  AlgorithmPower_descriptor_ = file->message_type(15);
  static const int AlgorithmPower_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmPower, power_),
  };
  AlgorithmPower_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlgorithmPower_descriptor_,
      AlgorithmPower::default_instance_,
      AlgorithmPower_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlgorithmPower),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmPower, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmPower, _is_default_instance_));
  Category_descriptor_ = file->message_type(16);
  static const int Category_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, request_num_),
  };
  Category_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Category_descriptor_,
      Category::default_instance_,
      Category_offsets_,
      -1,
      -1,
      -1,
      sizeof(Category),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Category, _is_default_instance_));
  AlgorithmCategory_descriptor_ = file->message_type(17);
  static const int AlgorithmCategory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmCategory, category_),
  };
  AlgorithmCategory_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AlgorithmCategory_descriptor_,
      AlgorithmCategory::default_instance_,
      AlgorithmCategory_offsets_,
      -1,
      -1,
      -1,
      sizeof(AlgorithmCategory),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmCategory, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlgorithmCategory, _is_default_instance_));
  TransferRequest_descriptor_ = file->message_type(18);
  static const int TransferRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, main_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, sub_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, protocol_),
  };
  TransferRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferRequest_descriptor_,
      TransferRequest::default_instance_,
      TransferRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRequest, _is_default_instance_));
  TransferRespond_descriptor_ = file->message_type(19);
  static const int TransferRespond_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRespond, respond_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRespond, protocol_),
  };
  TransferRespond_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TransferRespond_descriptor_,
      TransferRespond::default_instance_,
      TransferRespond_offsets_,
      -1,
      -1,
      -1,
      sizeof(TransferRespond),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRespond, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferRespond, _is_default_instance_));
  HeartBeat_descriptor_ = file->message_type(20);
  static const int HeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, heartbeat_),
  };
  HeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      -1,
      -1,
      -1,
      sizeof(HeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _is_default_instance_));
  ActionType_descriptor_ = file->enum_type(0);
  ItemType_descriptor_ = file->enum_type(1);
  TopType_descriptor_ = file->enum_type(2);
  RecommendType_descriptor_ = file->enum_type(3);
  RecommendNetwork_descriptor_ = file->enum_type(4);
  CandidateType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemTag_descriptor_, &ItemTag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemWord_descriptor_, &ItemWord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopInfo_descriptor_, &TopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ItemSource_descriptor_, &ItemSource::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subscribe_descriptor_, &Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Recommend_descriptor_, &Recommend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CandidateSetBase_descriptor_, &CandidateSetBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CandidateSetPayload_descriptor_, &CandidateSetPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CandidateSet_descriptor_, &CandidateSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      User_descriptor_, &User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserStatus_descriptor_, &UserStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Feedback_descriptor_, &Feedback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeedbackRespond_descriptor_, &FeedbackRespond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlgorithmPower_descriptor_, &AlgorithmPower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Category_descriptor_, &Category::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AlgorithmCategory_descriptor_, &AlgorithmCategory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferRequest_descriptor_, &TransferRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TransferRespond_descriptor_, &TransferRespond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeat_descriptor_, &HeartBeat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Action::default_instance_;
  delete Action_reflection_;
  delete ItemTag::default_instance_;
  delete ItemTag_reflection_;
  delete ItemWord::default_instance_;
  delete ItemWord_reflection_;
  delete TopInfo::default_instance_;
  delete TopInfo_reflection_;
  delete ItemSource::default_instance_;
  delete ItemSource_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Subscribe::default_instance_;
  delete Subscribe_reflection_;
  delete Recommend::default_instance_;
  delete Recommend_reflection_;
  delete CandidateSetBase::default_instance_;
  delete CandidateSetBase_reflection_;
  delete CandidateSetPayload::default_instance_;
  delete CandidateSetPayload_reflection_;
  delete CandidateSet::default_instance_;
  delete CandidateSet_reflection_;
  delete User::default_instance_;
  delete User_reflection_;
  delete UserStatus::default_instance_;
  delete UserStatus_reflection_;
  delete Feedback::default_instance_;
  delete Feedback_reflection_;
  delete FeedbackRespond::default_instance_;
  delete FeedbackRespond_reflection_;
  delete AlgorithmPower::default_instance_;
  delete AlgorithmPower_reflection_;
  delete Category::default_instance_;
  delete Category_reflection_;
  delete AlgorithmCategory::default_instance_;
  delete AlgorithmCategory_reflection_;
  delete TransferRequest::default_instance_;
  delete TransferRequest_reflection_;
  delete TransferRespond::default_instance_;
  delete TransferRespond_reflection_;
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fany_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\032\031google/protobuf/any.pro"
    "to\"\331\001\n\006Action\022\022\n\nclick_time\030\001 \001(\005\022\017\n\007use"
    "r_id\030\002 \001(\004\022\017\n\007item_id\030\003 \001(\006\022\021\n\tstay_time"
    "\030\004 \001(\005\022\033\n\006action\030\005 \001(\0162\013.ActionType\022\020\n\010l"
    "ocation\030\006 \001(\t\022\016\n\006srp_id\030\007 \001(\t\022\024\n\014click_s"
    "ource\030\010 \001(\005\022\017\n\007dislike\030\t \001(\t\022\014\n\004zone\030\n \001"
    "(\t\022\022\n\nhistory_id\030\013 \003(\006\">\n\007ItemTag\022\016\n\006tag"
    "_id\030\001 \001(\005\022\020\n\010tag_name\030\002 \001(\t\022\021\n\ttag_power"
    "\030\003 \001(\002\"\'\n\010ItemWord\022\014\n\004word\030\001 \001(\t\022\r\n\005coun"
    "t\030\002 \001(\005\"P\n\007TopInfo\022\032\n\010top_type\030\001 \001(\0162\010.T"
    "opType\022\022\n\ntop_srp_id\030\002 \003(\t\022\025\n\rtop_circle"
    "_id\030\003 \003(\t\"4\n\nItemSource\022\021\n\tsource_id\030\001 \001"
    "(\006\022\023\n\013source_name\030\002 \001(\t\"\264\002\n\004Item\022\017\n\007item"
    "_id\030\001 \001(\006\022\024\n\014publish_time\030\002 \001(\005\022\021\n\tpush_"
    "time\030\003 \001(\005\022\023\n\013picture_num\030\004 \001(\005\022\r\n\005power"
    "\030\005 \001(\002\022\034\n\titem_type\030\006 \001(\0162\t.ItemType\022\032\n\010"
    "category\030\007 \003(\0132\010.ItemTag\022\027\n\004word\030\010 \003(\0132\t"
    ".ItemWord\022\025\n\003srp\030\t \003(\0132\010.ItemTag\022\030\n\006circ"
    "le\030\n \003(\0132\010.ItemTag\022\032\n\010top_info\030\013 \001(\0132\010.T"
    "opInfo\022\014\n\004zone\030\014 \003(\t\022 \n\013data_source\030\r \001("
    "\0132\013.ItemSource\"\?\n\tSubscribe\022\017\n\007user_id\030\001"
    " \001(\004\022\016\n\006srp_id\030\002 \003(\t\022\021\n\tcircle_id\030\003 \003(\t\""
    "\274\001\n\tRecommend\022\013\n\003log\030\001 \001(\005\022\017\n\007user_id\030\002 "
    "\001(\004\022\023\n\013request_num\030\003 \001(\005\022&\n\016recommend_ty"
    "pe\030\004 \001(\0162\016.RecommendType\022\020\n\010beg_time\030\005 \001"
    "(\005\022\020\n\010end_time\030\006 \001(\005\022\014\n\004zone\030\007 \001(\t\022\"\n\007ne"
    "twork\030\010 \001(\0162\021.RecommendNetwork\"H\n\020Candid"
    "ateSetBase\022\017\n\007user_id\030\001 \001(\004\022\017\n\007item_id\030\002"
    " \003(\006\022\022\n\nhistory_id\030\003 \003(\006\"\222\001\n\023CandidateSe"
    "tPayload\022\r\n\005power\030\001 \003(\002\022\030\n\014publish_time\030"
    "\002 \003(\005B\002\020\001\022\027\n\013category_id\030\003 \003(\005B\002\020\001\022\027\n\013pi"
    "cture_num\030\004 \003(\005B\002\020\001\022 \n\004type\030\005 \003(\0162\016.Cand"
    "idateTypeB\002\020\001\"V\n\014CandidateSet\022\037\n\004base\030\001 "
    "\001(\0132\021.CandidateSetBase\022%\n\007payload\030\002 \001(\0132"
    "\024.CandidateSetPayload\"\027\n\004User\022\017\n\007user_id"
    "\030\001 \001(\004\"!\n\nUserStatus\022\023\n\013is_new_user\030\001 \001("
    "\005\",\n\010Feedback\022\017\n\007user_id\030\001 \001(\004\022\017\n\007item_i"
    "d\030\002 \003(\006\"\"\n\017FeedbackRespond\022\017\n\007respond\030\001 "
    "\001(\005\"\037\n\016AlgorithmPower\022\r\n\005power\030\001 \003(\002\"0\n\010"
    "Category\022\017\n\007user_id\030\001 \001(\004\022\023\n\013request_num"
    "\030\002 \001(\005\")\n\021AlgorithmCategory\022\024\n\010category\030"
    "\001 \003(\005B\002\020\001\"f\n\017TransferRequest\022\025\n\rmain_pro"
    "tocol\030\001 \001(\005\022\024\n\014sub_protocol\030\002 \001(\005\022&\n\010pro"
    "tocol\030\003 \001(\0132\024.google.protobuf.Any\"O\n\017Tra"
    "nsferRespond\022\024\n\014respond_code\030\001 \001(\005\022&\n\010pr"
    "otocol\030\002 \001(\0132\024.google.protobuf.Any\"\036\n\tHe"
    "artBeat\022\021\n\theartbeat\030\001 \001(\t*\316\001\n\nActionTyp"
    "e\022\024\n\020ACTION_TYPE_NONE\020\000\022\025\n\021ACTION_TYPE_C"
    "LICK\020\001\022\024\n\020ACTION_TYPE_LIKE\020\002\022\027\n\023ACTION_T"
    "YPE_COMMENT\020\003\022\030\n\024ACTION_TYPE_FAVORITE\020\004\022"
    "\025\n\021ACTION_TYPE_SHARE\020\005\022\027\n\023ACTION_TYPE_DI"
    "SLIKE\020\006\022\032\n\026ACTION_TYPE_CLOSE_PAGE\020\007*]\n\010I"
    "temType\022\022\n\016ITEM_TYPE_NONE\020\000\022\022\n\016ITEM_TYPE"
    "_NEWS\020\001\022\023\n\017ITEM_TYPE_VIDEO\020\002\022\024\n\020ITEM_TYP"
    "E_CIRCLE\020\003*G\n\007TopType\022\021\n\rTOP_TYPE_NONE\020\000"
    "\022\023\n\017TOP_TYPE_GLOBAL\020\001\022\024\n\020TOP_TYPE_PARTIA"
    "L\020\002*\?\n\rRecommendType\022\026\n\022RECOMMEND_TYPE_R"
    "EC\020\000\022\026\n\022RECOMMEND_TYPE_SUB\020\001*L\n\020Recommen"
    "dNetwork\022\032\n\026RECOMMEND_NETWORK_WIFI\020\000\022\034\n\030"
    "RECOMMEND_NETWORK_MOBILE\020\001*u\n\rCandidateT"
    "ype\022\026\n\022CANDIDATE_TYPE_TOP\020\000\022\031\n\025CANDIDATE"
    "_TYPE_NORMAL\020\001\022\027\n\023CANDIDATE_TYPE_ZONE\020\002\022"
    "\030\n\024CANDIDATE_TYPE_VIDEO\020\003b\006proto3", 2513);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Action::default_instance_ = new Action();
  ItemTag::default_instance_ = new ItemTag();
  ItemWord::default_instance_ = new ItemWord();
  TopInfo::default_instance_ = new TopInfo();
  ItemSource::default_instance_ = new ItemSource();
  Item::default_instance_ = new Item();
  Subscribe::default_instance_ = new Subscribe();
  Recommend::default_instance_ = new Recommend();
  CandidateSetBase::default_instance_ = new CandidateSetBase();
  CandidateSetPayload::default_instance_ = new CandidateSetPayload();
  CandidateSet::default_instance_ = new CandidateSet();
  User::default_instance_ = new User();
  UserStatus::default_instance_ = new UserStatus();
  Feedback::default_instance_ = new Feedback();
  FeedbackRespond::default_instance_ = new FeedbackRespond();
  AlgorithmPower::default_instance_ = new AlgorithmPower();
  Category::default_instance_ = new Category();
  AlgorithmCategory::default_instance_ = new AlgorithmCategory();
  TransferRequest::default_instance_ = new TransferRequest();
  TransferRespond::default_instance_ = new TransferRespond();
  HeartBeat::default_instance_ = new HeartBeat();
  Action::default_instance_->InitAsDefaultInstance();
  ItemTag::default_instance_->InitAsDefaultInstance();
  ItemWord::default_instance_->InitAsDefaultInstance();
  TopInfo::default_instance_->InitAsDefaultInstance();
  ItemSource::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  Subscribe::default_instance_->InitAsDefaultInstance();
  Recommend::default_instance_->InitAsDefaultInstance();
  CandidateSetBase::default_instance_->InitAsDefaultInstance();
  CandidateSetPayload::default_instance_->InitAsDefaultInstance();
  CandidateSet::default_instance_->InitAsDefaultInstance();
  User::default_instance_->InitAsDefaultInstance();
  UserStatus::default_instance_->InitAsDefaultInstance();
  Feedback::default_instance_->InitAsDefaultInstance();
  FeedbackRespond::default_instance_->InitAsDefaultInstance();
  AlgorithmPower::default_instance_->InitAsDefaultInstance();
  Category::default_instance_->InitAsDefaultInstance();
  AlgorithmCategory::default_instance_->InitAsDefaultInstance();
  TransferRequest::default_instance_->InitAsDefaultInstance();
  TransferRespond::default_instance_->InitAsDefaultInstance();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* ActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionType_descriptor_;
}
bool ActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ItemType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemType_descriptor_;
}
bool ItemType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TopType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopType_descriptor_;
}
bool TopType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecommendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendType_descriptor_;
}
bool RecommendType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RecommendNetwork_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendNetwork_descriptor_;
}
bool RecommendNetwork_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CandidateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateType_descriptor_;
}
bool CandidateType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Action::kClickTimeFieldNumber;
const int Action::kUserIdFieldNumber;
const int Action::kItemIdFieldNumber;
const int Action::kStayTimeFieldNumber;
const int Action::kActionFieldNumber;
const int Action::kLocationFieldNumber;
const int Action::kSrpIdFieldNumber;
const int Action::kClickSourceFieldNumber;
const int Action::kDislikeFieldNumber;
const int Action::kZoneFieldNumber;
const int Action::kHistoryIdFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Action)
}

void Action::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Action::Action(const Action& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Action)
}

void Action::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  click_time_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  item_id_ = GOOGLE_ULONGLONG(0);
  stay_time_ = 0;
  action_ = 0;
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srp_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  click_source_ = 0;
  dislike_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:Action)
  SharedDtor();
}

void Action::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srp_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dislike_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Action*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, item_id_);
  ZR_(action_, click_source_);
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  srp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dislike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

  history_id_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 click_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &click_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_item_id;
        break;
      }

      // optional fixed64 item_id = 3;
      case 3: {
        if (tag == 25) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stay_time;
        break;
      }

      // optional int32 stay_time = 4;
      case 4: {
        if (tag == 32) {
         parse_stay_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stay_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }

      // optional .ActionType action = 5;
      case 5: {
        if (tag == 40) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::ActionType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }

      // optional string location = 6;
      case 6: {
        if (tag == 50) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Action.location"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_srp_id;
        break;
      }

      // optional string srp_id = 7;
      case 7: {
        if (tag == 58) {
         parse_srp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srp_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srp_id().data(), this->srp_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Action.srp_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_click_source;
        break;
      }

      // optional int32 click_source = 8;
      case 8: {
        if (tag == 64) {
         parse_click_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &click_source_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_dislike;
        break;
      }

      // optional string dislike = 9;
      case 9: {
        if (tag == 74) {
         parse_dislike:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dislike()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dislike().data(), this->dislike().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Action.dislike"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_zone;
        break;
      }

      // optional string zone = 10;
      case 10: {
        if (tag == 82) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Action.zone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_history_id;
        break;
      }

      // repeated fixed64 history_id = 11;
      case 11: {
        if (tag == 90) {
         parse_history_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_history_id())));
        } else if (tag == 89) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 90, input, this->mutable_history_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Action)
  // optional int32 click_time = 1;
  if (this->click_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->click_time(), output);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional fixed64 item_id = 3;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->item_id(), output);
  }

  // optional int32 stay_time = 4;
  if (this->stay_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->stay_time(), output);
  }

  // optional .ActionType action = 5;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->location(), output);
  }

  // optional string srp_id = 7;
  if (this->srp_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srp_id().data(), this->srp_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.srp_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->srp_id(), output);
  }

  // optional int32 click_source = 8;
  if (this->click_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->click_source(), output);
  }

  // optional string dislike = 9;
  if (this->dislike().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dislike().data(), this->dislike().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.dislike");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->dislike(), output);
  }

  // optional string zone = 10;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->zone(), output);
  }

  // repeated fixed64 history_id = 11;
  if (this->history_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_history_id_cached_byte_size_);
  }
  for (int i = 0; i < this->history_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->history_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Action)
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Action)
  // optional int32 click_time = 1;
  if (this->click_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->click_time(), target);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional fixed64 item_id = 3;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->item_id(), target);
  }

  // optional int32 stay_time = 4;
  if (this->stay_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->stay_time(), target);
  }

  // optional .ActionType action = 5;
  if (this->action() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.location");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }

  // optional string srp_id = 7;
  if (this->srp_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srp_id().data(), this->srp_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.srp_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->srp_id(), target);
  }

  // optional int32 click_source = 8;
  if (this->click_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->click_source(), target);
  }

  // optional string dislike = 9;
  if (this->dislike().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dislike().data(), this->dislike().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.dislike");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->dislike(), target);
  }

  // optional string zone = 10;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Action.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->zone(), target);
  }

  // repeated fixed64 history_id = 11;
  if (this->history_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _history_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->history_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->history_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Action)
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  // optional int32 click_time = 1;
  if (this->click_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->click_time());
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional fixed64 item_id = 3;
  if (this->item_id() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 stay_time = 4;
  if (this->stay_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stay_time());
  }

  // optional .ActionType action = 5;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  // optional string location = 6;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // optional string srp_id = 7;
  if (this->srp_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srp_id());
  }

  // optional int32 click_source = 8;
  if (this->click_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->click_source());
  }

  // optional string dislike = 9;
  if (this->dislike().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dislike());
  }

  // optional string zone = 10;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // repeated fixed64 history_id = 11;
  {
    int data_size = 0;
    data_size = 8 * this->history_id_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _history_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Action* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  history_id_.MergeFrom(from.history_id_);
  if (from.click_time() != 0) {
    set_click_time(from.click_time());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.stay_time() != 0) {
    set_stay_time(from.stay_time());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.srp_id().size() > 0) {

    srp_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srp_id_);
  }
  if (from.click_source() != 0) {
    set_click_source(from.click_source());
  }
  if (from.dislike().size() > 0) {

    dislike_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dislike_);
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {

  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  std::swap(click_time_, other->click_time_);
  std::swap(user_id_, other->user_id_);
  std::swap(item_id_, other->item_id_);
  std::swap(stay_time_, other->stay_time_);
  std::swap(action_, other->action_);
  location_.Swap(&other->location_);
  srp_id_.Swap(&other->srp_id_);
  std::swap(click_source_, other->click_source_);
  dislike_.Swap(&other->dislike_);
  zone_.Swap(&other->zone_);
  history_id_.UnsafeArenaSwap(&other->history_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// optional int32 click_time = 1;
void Action::clear_click_time() {
  click_time_ = 0;
}
 ::google::protobuf::int32 Action::click_time() const {
  // @@protoc_insertion_point(field_get:Action.click_time)
  return click_time_;
}
 void Action::set_click_time(::google::protobuf::int32 value) {
  
  click_time_ = value;
  // @@protoc_insertion_point(field_set:Action.click_time)
}

// optional uint64 user_id = 2;
void Action::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Action::user_id() const {
  // @@protoc_insertion_point(field_get:Action.user_id)
  return user_id_;
}
 void Action::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Action.user_id)
}

// optional fixed64 item_id = 3;
void Action::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Action::item_id() const {
  // @@protoc_insertion_point(field_get:Action.item_id)
  return item_id_;
}
 void Action::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Action.item_id)
}

// optional int32 stay_time = 4;
void Action::clear_stay_time() {
  stay_time_ = 0;
}
 ::google::protobuf::int32 Action::stay_time() const {
  // @@protoc_insertion_point(field_get:Action.stay_time)
  return stay_time_;
}
 void Action::set_stay_time(::google::protobuf::int32 value) {
  
  stay_time_ = value;
  // @@protoc_insertion_point(field_set:Action.stay_time)
}

// optional .ActionType action = 5;
void Action::clear_action() {
  action_ = 0;
}
 ::ActionType Action::action() const {
  // @@protoc_insertion_point(field_get:Action.action)
  return static_cast< ::ActionType >(action_);
}
 void Action::set_action(::ActionType value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:Action.action)
}

// optional string location = 6;
void Action::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Action::location() const {
  // @@protoc_insertion_point(field_get:Action.location)
  return location_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.location)
}
 void Action::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.location)
}
 void Action::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.location)
}
 ::std::string* Action::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:Action.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Action::release_location() {
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:Action.location)
}

// optional string srp_id = 7;
void Action::clear_srp_id() {
  srp_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Action::srp_id() const {
  // @@protoc_insertion_point(field_get:Action.srp_id)
  return srp_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_srp_id(const ::std::string& value) {
  
  srp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.srp_id)
}
 void Action::set_srp_id(const char* value) {
  
  srp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.srp_id)
}
 void Action::set_srp_id(const char* value, size_t size) {
  
  srp_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.srp_id)
}
 ::std::string* Action::mutable_srp_id() {
  
  // @@protoc_insertion_point(field_mutable:Action.srp_id)
  return srp_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Action::release_srp_id() {
  
  return srp_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_allocated_srp_id(::std::string* srp_id) {
  if (srp_id != NULL) {
    
  } else {
    
  }
  srp_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srp_id);
  // @@protoc_insertion_point(field_set_allocated:Action.srp_id)
}

// optional int32 click_source = 8;
void Action::clear_click_source() {
  click_source_ = 0;
}
 ::google::protobuf::int32 Action::click_source() const {
  // @@protoc_insertion_point(field_get:Action.click_source)
  return click_source_;
}
 void Action::set_click_source(::google::protobuf::int32 value) {
  
  click_source_ = value;
  // @@protoc_insertion_point(field_set:Action.click_source)
}

// optional string dislike = 9;
void Action::clear_dislike() {
  dislike_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Action::dislike() const {
  // @@protoc_insertion_point(field_get:Action.dislike)
  return dislike_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_dislike(const ::std::string& value) {
  
  dislike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.dislike)
}
 void Action::set_dislike(const char* value) {
  
  dislike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.dislike)
}
 void Action::set_dislike(const char* value, size_t size) {
  
  dislike_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.dislike)
}
 ::std::string* Action::mutable_dislike() {
  
  // @@protoc_insertion_point(field_mutable:Action.dislike)
  return dislike_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Action::release_dislike() {
  
  return dislike_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_allocated_dislike(::std::string* dislike) {
  if (dislike != NULL) {
    
  } else {
    
  }
  dislike_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dislike);
  // @@protoc_insertion_point(field_set_allocated:Action.dislike)
}

// optional string zone = 10;
void Action::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Action::zone() const {
  // @@protoc_insertion_point(field_get:Action.zone)
  return zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Action.zone)
}
 void Action::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Action.zone)
}
 void Action::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Action.zone)
}
 ::std::string* Action::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:Action.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Action::release_zone() {
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Action::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:Action.zone)
}

// repeated fixed64 history_id = 11;
int Action::history_id_size() const {
  return history_id_.size();
}
void Action::clear_history_id() {
  history_id_.Clear();
}
 ::google::protobuf::uint64 Action::history_id(int index) const {
  // @@protoc_insertion_point(field_get:Action.history_id)
  return history_id_.Get(index);
}
 void Action::set_history_id(int index, ::google::protobuf::uint64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Action.history_id)
}
 void Action::add_history_id(::google::protobuf::uint64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:Action.history_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Action::history_id() const {
  // @@protoc_insertion_point(field_list:Action.history_id)
  return history_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Action::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:Action.history_id)
  return &history_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ItemTag::kTagIdFieldNumber;
const int ItemTag::kTagNameFieldNumber;
const int ItemTag::kTagPowerFieldNumber;
#endif  // !_MSC_VER

ItemTag::ItemTag()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemTag)
}

void ItemTag::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemTag::ItemTag(const ItemTag& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemTag)
}

void ItemTag::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tag_id_ = 0;
  tag_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_power_ = 0;
}

ItemTag::~ItemTag() {
  // @@protoc_insertion_point(destructor:ItemTag)
  SharedDtor();
}

void ItemTag::SharedDtor() {
  tag_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ItemTag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemTag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemTag_descriptor_;
}

const ItemTag& ItemTag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ItemTag* ItemTag::default_instance_ = NULL;

ItemTag* ItemTag::New(::google::protobuf::Arena* arena) const {
  ItemTag* n = new ItemTag;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemTag::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ItemTag*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(tag_id_, tag_power_);
  tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool ItemTag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemTag)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tag_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_tag_name;
        break;
      }

      // optional string tag_name = 2;
      case 2: {
        if (tag == 18) {
         parse_tag_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tag_name().data(), this->tag_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ItemTag.tag_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_tag_power;
        break;
      }

      // optional float tag_power = 3;
      case 3: {
        if (tag == 29) {
         parse_tag_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tag_power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemTag)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemTag)
  return false;
#undef DO_
}

void ItemTag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemTag)
  // optional int32 tag_id = 1;
  if (this->tag_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tag_id(), output);
  }

  // optional string tag_name = 2;
  if (this->tag_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), this->tag_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemTag.tag_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tag_name(), output);
  }

  // optional float tag_power = 3;
  if (this->tag_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tag_power(), output);
  }

  // @@protoc_insertion_point(serialize_end:ItemTag)
}

::google::protobuf::uint8* ItemTag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemTag)
  // optional int32 tag_id = 1;
  if (this->tag_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tag_id(), target);
  }

  // optional string tag_name = 2;
  if (this->tag_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tag_name().data(), this->tag_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemTag.tag_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tag_name(), target);
  }

  // optional float tag_power = 3;
  if (this->tag_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->tag_power(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ItemTag)
  return target;
}

int ItemTag::ByteSize() const {
  int total_size = 0;

  // optional int32 tag_id = 1;
  if (this->tag_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tag_id());
  }

  // optional string tag_name = 2;
  if (this->tag_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->tag_name());
  }

  // optional float tag_power = 3;
  if (this->tag_power() != 0) {
    total_size += 1 + 4;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemTag::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemTag* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemTag>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemTag::MergeFrom(const ItemTag& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.tag_id() != 0) {
    set_tag_id(from.tag_id());
  }
  if (from.tag_name().size() > 0) {

    tag_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_name_);
  }
  if (from.tag_power() != 0) {
    set_tag_power(from.tag_power());
  }
}

void ItemTag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemTag::CopyFrom(const ItemTag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemTag::IsInitialized() const {

  return true;
}

void ItemTag::Swap(ItemTag* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemTag::InternalSwap(ItemTag* other) {
  std::swap(tag_id_, other->tag_id_);
  tag_name_.Swap(&other->tag_name_);
  std::swap(tag_power_, other->tag_power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemTag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemTag_descriptor_;
  metadata.reflection = ItemTag_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemTag

// optional int32 tag_id = 1;
void ItemTag::clear_tag_id() {
  tag_id_ = 0;
}
 ::google::protobuf::int32 ItemTag::tag_id() const {
  // @@protoc_insertion_point(field_get:ItemTag.tag_id)
  return tag_id_;
}
 void ItemTag::set_tag_id(::google::protobuf::int32 value) {
  
  tag_id_ = value;
  // @@protoc_insertion_point(field_set:ItemTag.tag_id)
}

// optional string tag_name = 2;
void ItemTag::clear_tag_name() {
  tag_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ItemTag::tag_name() const {
  // @@protoc_insertion_point(field_get:ItemTag.tag_name)
  return tag_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemTag::set_tag_name(const ::std::string& value) {
  
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemTag.tag_name)
}
 void ItemTag::set_tag_name(const char* value) {
  
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemTag.tag_name)
}
 void ItemTag::set_tag_name(const char* value, size_t size) {
  
  tag_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemTag.tag_name)
}
 ::std::string* ItemTag::mutable_tag_name() {
  
  // @@protoc_insertion_point(field_mutable:ItemTag.tag_name)
  return tag_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ItemTag::release_tag_name() {
  
  return tag_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemTag::set_allocated_tag_name(::std::string* tag_name) {
  if (tag_name != NULL) {
    
  } else {
    
  }
  tag_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tag_name);
  // @@protoc_insertion_point(field_set_allocated:ItemTag.tag_name)
}

// optional float tag_power = 3;
void ItemTag::clear_tag_power() {
  tag_power_ = 0;
}
 float ItemTag::tag_power() const {
  // @@protoc_insertion_point(field_get:ItemTag.tag_power)
  return tag_power_;
}
 void ItemTag::set_tag_power(float value) {
  
  tag_power_ = value;
  // @@protoc_insertion_point(field_set:ItemTag.tag_power)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ItemWord::kWordFieldNumber;
const int ItemWord::kCountFieldNumber;
#endif  // !_MSC_VER

ItemWord::ItemWord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemWord)
}

void ItemWord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemWord::ItemWord(const ItemWord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemWord)
}

void ItemWord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  word_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

ItemWord::~ItemWord() {
  // @@protoc_insertion_point(destructor:ItemWord)
  SharedDtor();
}

void ItemWord::SharedDtor() {
  word_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ItemWord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemWord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemWord_descriptor_;
}

const ItemWord& ItemWord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ItemWord* ItemWord::default_instance_ = NULL;

ItemWord* ItemWord::New(::google::protobuf::Arena* arena) const {
  ItemWord* n = new ItemWord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemWord::Clear() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  count_ = 0;
}

bool ItemWord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemWord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string word = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->word().data(), this->word().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ItemWord.word"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemWord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemWord)
  return false;
#undef DO_
}

void ItemWord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemWord)
  // optional string word = 1;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemWord.word");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->word(), output);
  }

  // optional int32 count = 2;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:ItemWord)
}

::google::protobuf::uint8* ItemWord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemWord)
  // optional string word = 1;
  if (this->word().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->word().data(), this->word().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemWord.word");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->word(), target);
  }

  // optional int32 count = 2;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ItemWord)
  return target;
}

int ItemWord::ByteSize() const {
  int total_size = 0;

  // optional string word = 1;
  if (this->word().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->word());
  }

  // optional int32 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemWord::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemWord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemWord>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemWord::MergeFrom(const ItemWord& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.word().size() > 0) {

    word_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.word_);
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ItemWord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemWord::CopyFrom(const ItemWord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemWord::IsInitialized() const {

  return true;
}

void ItemWord::Swap(ItemWord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemWord::InternalSwap(ItemWord* other) {
  word_.Swap(&other->word_);
  std::swap(count_, other->count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemWord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemWord_descriptor_;
  metadata.reflection = ItemWord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemWord

// optional string word = 1;
void ItemWord::clear_word() {
  word_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ItemWord::word() const {
  // @@protoc_insertion_point(field_get:ItemWord.word)
  return word_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemWord::set_word(const ::std::string& value) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemWord.word)
}
 void ItemWord::set_word(const char* value) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemWord.word)
}
 void ItemWord::set_word(const char* value, size_t size) {
  
  word_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemWord.word)
}
 ::std::string* ItemWord::mutable_word() {
  
  // @@protoc_insertion_point(field_mutable:ItemWord.word)
  return word_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ItemWord::release_word() {
  
  return word_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemWord::set_allocated_word(::std::string* word) {
  if (word != NULL) {
    
  } else {
    
  }
  word_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), word);
  // @@protoc_insertion_point(field_set_allocated:ItemWord.word)
}

// optional int32 count = 2;
void ItemWord::clear_count() {
  count_ = 0;
}
 ::google::protobuf::int32 ItemWord::count() const {
  // @@protoc_insertion_point(field_get:ItemWord.count)
  return count_;
}
 void ItemWord::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:ItemWord.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TopInfo::kTopTypeFieldNumber;
const int TopInfo::kTopSrpIdFieldNumber;
const int TopInfo::kTopCircleIdFieldNumber;
#endif  // !_MSC_VER

TopInfo::TopInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TopInfo)
}

void TopInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TopInfo::TopInfo(const TopInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TopInfo)
}

void TopInfo::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  top_type_ = 0;
}

TopInfo::~TopInfo() {
  // @@protoc_insertion_point(destructor:TopInfo)
  SharedDtor();
}

void TopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopInfo_descriptor_;
}

const TopInfo& TopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

TopInfo* TopInfo::default_instance_ = NULL;

TopInfo* TopInfo::New(::google::protobuf::Arena* arena) const {
  TopInfo* n = new TopInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopInfo::Clear() {
  top_type_ = 0;
  top_srp_id_.Clear();
  top_circle_id_.Clear();
}

bool TopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TopType top_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_top_type(static_cast< ::TopType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_srp_id;
        break;
      }

      // repeated string top_srp_id = 2;
      case 2: {
        if (tag == 18) {
         parse_top_srp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top_srp_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->top_srp_id(this->top_srp_id_size() - 1).data(),
            this->top_srp_id(this->top_srp_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TopInfo.top_srp_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_srp_id;
        if (input->ExpectTag(26)) goto parse_top_circle_id;
        break;
      }

      // repeated string top_circle_id = 3;
      case 3: {
        if (tag == 26) {
         parse_top_circle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_top_circle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->top_circle_id(this->top_circle_id_size() - 1).data(),
            this->top_circle_id(this->top_circle_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TopInfo.top_circle_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_top_circle_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TopInfo)
  return false;
#undef DO_
}

void TopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TopInfo)
  // optional .TopType top_type = 1;
  if (this->top_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->top_type(), output);
  }

  // repeated string top_srp_id = 2;
  for (int i = 0; i < this->top_srp_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top_srp_id(i).data(), this->top_srp_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TopInfo.top_srp_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->top_srp_id(i), output);
  }

  // repeated string top_circle_id = 3;
  for (int i = 0; i < this->top_circle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top_circle_id(i).data(), this->top_circle_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TopInfo.top_circle_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->top_circle_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TopInfo)
}

::google::protobuf::uint8* TopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TopInfo)
  // optional .TopType top_type = 1;
  if (this->top_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->top_type(), target);
  }

  // repeated string top_srp_id = 2;
  for (int i = 0; i < this->top_srp_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top_srp_id(i).data(), this->top_srp_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TopInfo.top_srp_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->top_srp_id(i), target);
  }

  // repeated string top_circle_id = 3;
  for (int i = 0; i < this->top_circle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->top_circle_id(i).data(), this->top_circle_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TopInfo.top_circle_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->top_circle_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TopInfo)
  return target;
}

int TopInfo::ByteSize() const {
  int total_size = 0;

  // optional .TopType top_type = 1;
  if (this->top_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->top_type());
  }

  // repeated string top_srp_id = 2;
  total_size += 1 * this->top_srp_id_size();
  for (int i = 0; i < this->top_srp_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top_srp_id(i));
  }

  // repeated string top_circle_id = 3;
  total_size += 1 * this->top_circle_id_size();
  for (int i = 0; i < this->top_circle_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->top_circle_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TopInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopInfo>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopInfo::MergeFrom(const TopInfo& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  top_srp_id_.MergeFrom(from.top_srp_id_);
  top_circle_id_.MergeFrom(from.top_circle_id_);
  if (from.top_type() != 0) {
    set_top_type(from.top_type());
  }
}

void TopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopInfo::CopyFrom(const TopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopInfo::IsInitialized() const {

  return true;
}

void TopInfo::Swap(TopInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopInfo::InternalSwap(TopInfo* other) {
  std::swap(top_type_, other->top_type_);
  top_srp_id_.UnsafeArenaSwap(&other->top_srp_id_);
  top_circle_id_.UnsafeArenaSwap(&other->top_circle_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopInfo_descriptor_;
  metadata.reflection = TopInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopInfo

// optional .TopType top_type = 1;
void TopInfo::clear_top_type() {
  top_type_ = 0;
}
 ::TopType TopInfo::top_type() const {
  // @@protoc_insertion_point(field_get:TopInfo.top_type)
  return static_cast< ::TopType >(top_type_);
}
 void TopInfo::set_top_type(::TopType value) {
  
  top_type_ = value;
  // @@protoc_insertion_point(field_set:TopInfo.top_type)
}

// repeated string top_srp_id = 2;
int TopInfo::top_srp_id_size() const {
  return top_srp_id_.size();
}
void TopInfo::clear_top_srp_id() {
  top_srp_id_.Clear();
}
 const ::std::string& TopInfo::top_srp_id(int index) const {
  // @@protoc_insertion_point(field_get:TopInfo.top_srp_id)
  return top_srp_id_.Get(index);
}
 ::std::string* TopInfo::mutable_top_srp_id(int index) {
  // @@protoc_insertion_point(field_mutable:TopInfo.top_srp_id)
  return top_srp_id_.Mutable(index);
}
 void TopInfo::set_top_srp_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TopInfo.top_srp_id)
  top_srp_id_.Mutable(index)->assign(value);
}
 void TopInfo::set_top_srp_id(int index, const char* value) {
  top_srp_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TopInfo.top_srp_id)
}
 void TopInfo::set_top_srp_id(int index, const char* value, size_t size) {
  top_srp_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TopInfo.top_srp_id)
}
 ::std::string* TopInfo::add_top_srp_id() {
  return top_srp_id_.Add();
}
 void TopInfo::add_top_srp_id(const ::std::string& value) {
  top_srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TopInfo.top_srp_id)
}
 void TopInfo::add_top_srp_id(const char* value) {
  top_srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TopInfo.top_srp_id)
}
 void TopInfo::add_top_srp_id(const char* value, size_t size) {
  top_srp_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TopInfo.top_srp_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopInfo::top_srp_id() const {
  // @@protoc_insertion_point(field_list:TopInfo.top_srp_id)
  return top_srp_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopInfo::mutable_top_srp_id() {
  // @@protoc_insertion_point(field_mutable_list:TopInfo.top_srp_id)
  return &top_srp_id_;
}

// repeated string top_circle_id = 3;
int TopInfo::top_circle_id_size() const {
  return top_circle_id_.size();
}
void TopInfo::clear_top_circle_id() {
  top_circle_id_.Clear();
}
 const ::std::string& TopInfo::top_circle_id(int index) const {
  // @@protoc_insertion_point(field_get:TopInfo.top_circle_id)
  return top_circle_id_.Get(index);
}
 ::std::string* TopInfo::mutable_top_circle_id(int index) {
  // @@protoc_insertion_point(field_mutable:TopInfo.top_circle_id)
  return top_circle_id_.Mutable(index);
}
 void TopInfo::set_top_circle_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TopInfo.top_circle_id)
  top_circle_id_.Mutable(index)->assign(value);
}
 void TopInfo::set_top_circle_id(int index, const char* value) {
  top_circle_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TopInfo.top_circle_id)
}
 void TopInfo::set_top_circle_id(int index, const char* value, size_t size) {
  top_circle_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TopInfo.top_circle_id)
}
 ::std::string* TopInfo::add_top_circle_id() {
  return top_circle_id_.Add();
}
 void TopInfo::add_top_circle_id(const ::std::string& value) {
  top_circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TopInfo.top_circle_id)
}
 void TopInfo::add_top_circle_id(const char* value) {
  top_circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TopInfo.top_circle_id)
}
 void TopInfo::add_top_circle_id(const char* value, size_t size) {
  top_circle_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TopInfo.top_circle_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopInfo::top_circle_id() const {
  // @@protoc_insertion_point(field_list:TopInfo.top_circle_id)
  return top_circle_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopInfo::mutable_top_circle_id() {
  // @@protoc_insertion_point(field_mutable_list:TopInfo.top_circle_id)
  return &top_circle_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ItemSource::kSourceIdFieldNumber;
const int ItemSource::kSourceNameFieldNumber;
#endif  // !_MSC_VER

ItemSource::ItemSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ItemSource)
}

void ItemSource::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ItemSource::ItemSource(const ItemSource& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ItemSource)
}

void ItemSource::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_id_ = GOOGLE_ULONGLONG(0);
  source_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ItemSource::~ItemSource() {
  // @@protoc_insertion_point(destructor:ItemSource)
  SharedDtor();
}

void ItemSource::SharedDtor() {
  source_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ItemSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSource::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSource_descriptor_;
}

const ItemSource& ItemSource::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

ItemSource* ItemSource::default_instance_ = NULL;

ItemSource* ItemSource::New(::google::protobuf::Arena* arena) const {
  ItemSource* n = new ItemSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ItemSource::Clear() {
  source_id_ = GOOGLE_ULONGLONG(0);
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ItemSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ItemSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 source_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &source_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_source_name;
        break;
      }

      // optional string source_name = 2;
      case 2: {
        if (tag == 18) {
         parse_source_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_name().data(), this->source_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ItemSource.source_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ItemSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ItemSource)
  return false;
#undef DO_
}

void ItemSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ItemSource)
  // optional fixed64 source_id = 1;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->source_id(), output);
  }

  // optional string source_name = 2;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemSource.source_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:ItemSource)
}

::google::protobuf::uint8* ItemSource::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ItemSource)
  // optional fixed64 source_id = 1;
  if (this->source_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->source_id(), target);
  }

  // optional string source_name = 2;
  if (this->source_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_name().data(), this->source_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ItemSource.source_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source_name(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ItemSource)
  return target;
}

int ItemSource::ByteSize() const {
  int total_size = 0;

  // optional fixed64 source_id = 1;
  if (this->source_id() != 0) {
    total_size += 1 + 8;
  }

  // optional string source_name = 2;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_name());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSource::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ItemSource* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ItemSource>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSource::MergeFrom(const ItemSource& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
}

void ItemSource::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSource::CopyFrom(const ItemSource& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSource::IsInitialized() const {

  return true;
}

void ItemSource::Swap(ItemSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ItemSource::InternalSwap(ItemSource* other) {
  std::swap(source_id_, other->source_id_);
  source_name_.Swap(&other->source_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ItemSource::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSource_descriptor_;
  metadata.reflection = ItemSource_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ItemSource

// optional fixed64 source_id = 1;
void ItemSource::clear_source_id() {
  source_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 ItemSource::source_id() const {
  // @@protoc_insertion_point(field_get:ItemSource.source_id)
  return source_id_;
}
 void ItemSource::set_source_id(::google::protobuf::uint64 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:ItemSource.source_id)
}

// optional string source_name = 2;
void ItemSource::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ItemSource::source_name() const {
  // @@protoc_insertion_point(field_get:ItemSource.source_name)
  return source_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemSource::set_source_name(const ::std::string& value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ItemSource.source_name)
}
 void ItemSource::set_source_name(const char* value) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ItemSource.source_name)
}
 void ItemSource::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ItemSource.source_name)
}
 ::std::string* ItemSource::mutable_source_name() {
  
  // @@protoc_insertion_point(field_mutable:ItemSource.source_name)
  return source_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ItemSource::release_source_name() {
  
  return source_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ItemSource::set_allocated_source_name(::std::string* source_name) {
  if (source_name != NULL) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:ItemSource.source_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Item::kItemIdFieldNumber;
const int Item::kPublishTimeFieldNumber;
const int Item::kPushTimeFieldNumber;
const int Item::kPictureNumFieldNumber;
const int Item::kPowerFieldNumber;
const int Item::kItemTypeFieldNumber;
const int Item::kCategoryFieldNumber;
const int Item::kWordFieldNumber;
const int Item::kSrpFieldNumber;
const int Item::kCircleFieldNumber;
const int Item::kTopInfoFieldNumber;
const int Item::kZoneFieldNumber;
const int Item::kDataSourceFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Item)
}

void Item::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  top_info_ = const_cast< ::TopInfo*>(&::TopInfo::default_instance());
  data_source_ = const_cast< ::ItemSource*>(&::ItemSource::default_instance());
}

Item::Item(const Item& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Item)
}

void Item::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  publish_time_ = 0;
  push_time_ = 0;
  picture_num_ = 0;
  power_ = 0;
  item_type_ = 0;
  top_info_ = NULL;
  data_source_ = NULL;
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:Item)
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
    delete top_info_;
    delete data_source_;
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New(::google::protobuf::Arena* arena) const {
  Item* n = new Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Item::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Item*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(item_id_, power_);
  item_type_ = 0;
  if (GetArenaNoVirtual() == NULL && top_info_ != NULL) delete top_info_;
  top_info_ = NULL;
  if (GetArenaNoVirtual() == NULL && data_source_ != NULL) delete data_source_;
  data_source_ = NULL;

#undef ZR_HELPER_
#undef ZR_

  category_.Clear();
  word_.Clear();
  srp_.Clear();
  circle_.Clear();
  zone_.Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 item_id = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &item_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_publish_time;
        break;
      }

      // optional int32 publish_time = 2;
      case 2: {
        if (tag == 16) {
         parse_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &publish_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_push_time;
        break;
      }

      // optional int32 push_time = 3;
      case 3: {
        if (tag == 24) {
         parse_push_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &push_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_picture_num;
        break;
      }

      // optional int32 picture_num = 4;
      case 4: {
        if (tag == 32) {
         parse_picture_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &picture_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_power;
        break;
      }

      // optional float power = 5;
      case 5: {
        if (tag == 45) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &power_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_item_type;
        break;
      }

      // optional .ItemType item_type = 6;
      case 6: {
        if (tag == 48) {
         parse_item_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_item_type(static_cast< ::ItemType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_category;
        break;
      }

      // repeated .ItemTag category = 7;
      case 7: {
        if (tag == 58) {
         parse_category:
          DO_(input->IncrementRecursionDepth());
         parse_loop_category:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_category()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_category;
        if (input->ExpectTag(66)) goto parse_loop_word;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ItemWord word = 8;
      case 8: {
        if (tag == 66) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_word()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_word;
        if (input->ExpectTag(74)) goto parse_loop_srp;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ItemTag srp = 9;
      case 9: {
        if (tag == 74) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_srp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_srp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_srp;
        if (input->ExpectTag(82)) goto parse_loop_circle;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .ItemTag circle = 10;
      case 10: {
        if (tag == 82) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_circle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_circle()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_loop_circle;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(90)) goto parse_top_info;
        break;
      }

      // optional .TopInfo top_info = 11;
      case 11: {
        if (tag == 90) {
         parse_top_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_zone;
        break;
      }

      // repeated string zone = 12;
      case 12: {
        if (tag == 98) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone(this->zone_size() - 1).data(),
            this->zone(this->zone_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Item.zone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_zone;
        if (input->ExpectTag(106)) goto parse_data_source;
        break;
      }

      // optional .ItemSource data_source = 13;
      case 13: {
        if (tag == 106) {
         parse_data_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Item)
  return false;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Item)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->item_id(), output);
  }

  // optional int32 publish_time = 2;
  if (this->publish_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->publish_time(), output);
  }

  // optional int32 push_time = 3;
  if (this->push_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->push_time(), output);
  }

  // optional int32 picture_num = 4;
  if (this->picture_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->picture_num(), output);
  }

  // optional float power = 5;
  if (this->power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->power(), output);
  }

  // optional .ItemType item_type = 6;
  if (this->item_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->item_type(), output);
  }

  // repeated .ItemTag category = 7;
  for (unsigned int i = 0, n = this->category_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->category(i), output);
  }

  // repeated .ItemWord word = 8;
  for (unsigned int i = 0, n = this->word_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->word(i), output);
  }

  // repeated .ItemTag srp = 9;
  for (unsigned int i = 0, n = this->srp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->srp(i), output);
  }

  // repeated .ItemTag circle = 10;
  for (unsigned int i = 0, n = this->circle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->circle(i), output);
  }

  // optional .TopInfo top_info = 11;
  if (this->has_top_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->top_info_, output);
  }

  // repeated string zone = 12;
  for (int i = 0; i < this->zone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone(i).data(), this->zone(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Item.zone");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->zone(i), output);
  }

  // optional .ItemSource data_source = 13;
  if (this->has_data_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->data_source_, output);
  }

  // @@protoc_insertion_point(serialize_end:Item)
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Item)
  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->item_id(), target);
  }

  // optional int32 publish_time = 2;
  if (this->publish_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->publish_time(), target);
  }

  // optional int32 push_time = 3;
  if (this->push_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->push_time(), target);
  }

  // optional int32 picture_num = 4;
  if (this->picture_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->picture_num(), target);
  }

  // optional float power = 5;
  if (this->power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->power(), target);
  }

  // optional .ItemType item_type = 6;
  if (this->item_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->item_type(), target);
  }

  // repeated .ItemTag category = 7;
  for (unsigned int i = 0, n = this->category_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->category(i), target);
  }

  // repeated .ItemWord word = 8;
  for (unsigned int i = 0, n = this->word_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->word(i), target);
  }

  // repeated .ItemTag srp = 9;
  for (unsigned int i = 0, n = this->srp_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->srp(i), target);
  }

  // repeated .ItemTag circle = 10;
  for (unsigned int i = 0, n = this->circle_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->circle(i), target);
  }

  // optional .TopInfo top_info = 11;
  if (this->has_top_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, *this->top_info_, target);
  }

  // repeated string zone = 12;
  for (int i = 0; i < this->zone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone(i).data(), this->zone(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Item.zone");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->zone(i), target);
  }

  // optional .ItemSource data_source = 13;
  if (this->has_data_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, *this->data_source_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Item)
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  // optional fixed64 item_id = 1;
  if (this->item_id() != 0) {
    total_size += 1 + 8;
  }

  // optional int32 publish_time = 2;
  if (this->publish_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->publish_time());
  }

  // optional int32 push_time = 3;
  if (this->push_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->push_time());
  }

  // optional int32 picture_num = 4;
  if (this->picture_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->picture_num());
  }

  // optional float power = 5;
  if (this->power() != 0) {
    total_size += 1 + 4;
  }

  // optional .ItemType item_type = 6;
  if (this->item_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->item_type());
  }

  // optional .TopInfo top_info = 11;
  if (this->has_top_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->top_info_);
  }

  // optional .ItemSource data_source = 13;
  if (this->has_data_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_source_);
  }

  // repeated .ItemTag category = 7;
  total_size += 1 * this->category_size();
  for (int i = 0; i < this->category_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->category(i));
  }

  // repeated .ItemWord word = 8;
  total_size += 1 * this->word_size();
  for (int i = 0; i < this->word_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->word(i));
  }

  // repeated .ItemTag srp = 9;
  total_size += 1 * this->srp_size();
  for (int i = 0; i < this->srp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->srp(i));
  }

  // repeated .ItemTag circle = 10;
  total_size += 1 * this->circle_size();
  for (int i = 0; i < this->circle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->circle(i));
  }

  // repeated string zone = 12;
  total_size += 1 * this->zone_size();
  for (int i = 0; i < this->zone_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->zone(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Item* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Item>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  category_.MergeFrom(from.category_);
  word_.MergeFrom(from.word_);
  srp_.MergeFrom(from.srp_);
  circle_.MergeFrom(from.circle_);
  zone_.MergeFrom(from.zone_);
  if (from.item_id() != 0) {
    set_item_id(from.item_id());
  }
  if (from.publish_time() != 0) {
    set_publish_time(from.publish_time());
  }
  if (from.push_time() != 0) {
    set_push_time(from.push_time());
  }
  if (from.picture_num() != 0) {
    set_picture_num(from.picture_num());
  }
  if (from.power() != 0) {
    set_power(from.power());
  }
  if (from.item_type() != 0) {
    set_item_type(from.item_type());
  }
  if (from.has_top_info()) {
    mutable_top_info()->::TopInfo::MergeFrom(from.top_info());
  }
  if (from.has_data_source()) {
    mutable_data_source()->::ItemSource::MergeFrom(from.data_source());
  }
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {

  return true;
}

void Item::Swap(Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Item::InternalSwap(Item* other) {
  std::swap(item_id_, other->item_id_);
  std::swap(publish_time_, other->publish_time_);
  std::swap(push_time_, other->push_time_);
  std::swap(picture_num_, other->picture_num_);
  std::swap(power_, other->power_);
  std::swap(item_type_, other->item_type_);
  category_.UnsafeArenaSwap(&other->category_);
  word_.UnsafeArenaSwap(&other->word_);
  srp_.UnsafeArenaSwap(&other->srp_);
  circle_.UnsafeArenaSwap(&other->circle_);
  std::swap(top_info_, other->top_info_);
  zone_.UnsafeArenaSwap(&other->zone_);
  std::swap(data_source_, other->data_source_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Item

// optional fixed64 item_id = 1;
void Item::clear_item_id() {
  item_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Item::item_id() const {
  // @@protoc_insertion_point(field_get:Item.item_id)
  return item_id_;
}
 void Item::set_item_id(::google::protobuf::uint64 value) {
  
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Item.item_id)
}

// optional int32 publish_time = 2;
void Item::clear_publish_time() {
  publish_time_ = 0;
}
 ::google::protobuf::int32 Item::publish_time() const {
  // @@protoc_insertion_point(field_get:Item.publish_time)
  return publish_time_;
}
 void Item::set_publish_time(::google::protobuf::int32 value) {
  
  publish_time_ = value;
  // @@protoc_insertion_point(field_set:Item.publish_time)
}

// optional int32 push_time = 3;
void Item::clear_push_time() {
  push_time_ = 0;
}
 ::google::protobuf::int32 Item::push_time() const {
  // @@protoc_insertion_point(field_get:Item.push_time)
  return push_time_;
}
 void Item::set_push_time(::google::protobuf::int32 value) {
  
  push_time_ = value;
  // @@protoc_insertion_point(field_set:Item.push_time)
}

// optional int32 picture_num = 4;
void Item::clear_picture_num() {
  picture_num_ = 0;
}
 ::google::protobuf::int32 Item::picture_num() const {
  // @@protoc_insertion_point(field_get:Item.picture_num)
  return picture_num_;
}
 void Item::set_picture_num(::google::protobuf::int32 value) {
  
  picture_num_ = value;
  // @@protoc_insertion_point(field_set:Item.picture_num)
}

// optional float power = 5;
void Item::clear_power() {
  power_ = 0;
}
 float Item::power() const {
  // @@protoc_insertion_point(field_get:Item.power)
  return power_;
}
 void Item::set_power(float value) {
  
  power_ = value;
  // @@protoc_insertion_point(field_set:Item.power)
}

// optional .ItemType item_type = 6;
void Item::clear_item_type() {
  item_type_ = 0;
}
 ::ItemType Item::item_type() const {
  // @@protoc_insertion_point(field_get:Item.item_type)
  return static_cast< ::ItemType >(item_type_);
}
 void Item::set_item_type(::ItemType value) {
  
  item_type_ = value;
  // @@protoc_insertion_point(field_set:Item.item_type)
}

// repeated .ItemTag category = 7;
int Item::category_size() const {
  return category_.size();
}
void Item::clear_category() {
  category_.Clear();
}
const ::ItemTag& Item::category(int index) const {
  // @@protoc_insertion_point(field_get:Item.category)
  return category_.Get(index);
}
::ItemTag* Item::mutable_category(int index) {
  // @@protoc_insertion_point(field_mutable:Item.category)
  return category_.Mutable(index);
}
::ItemTag* Item::add_category() {
  // @@protoc_insertion_point(field_add:Item.category)
  return category_.Add();
}
::google::protobuf::RepeatedPtrField< ::ItemTag >*
Item::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:Item.category)
  return &category_;
}
const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
Item::category() const {
  // @@protoc_insertion_point(field_list:Item.category)
  return category_;
}

// repeated .ItemWord word = 8;
int Item::word_size() const {
  return word_.size();
}
void Item::clear_word() {
  word_.Clear();
}
const ::ItemWord& Item::word(int index) const {
  // @@protoc_insertion_point(field_get:Item.word)
  return word_.Get(index);
}
::ItemWord* Item::mutable_word(int index) {
  // @@protoc_insertion_point(field_mutable:Item.word)
  return word_.Mutable(index);
}
::ItemWord* Item::add_word() {
  // @@protoc_insertion_point(field_add:Item.word)
  return word_.Add();
}
::google::protobuf::RepeatedPtrField< ::ItemWord >*
Item::mutable_word() {
  // @@protoc_insertion_point(field_mutable_list:Item.word)
  return &word_;
}
const ::google::protobuf::RepeatedPtrField< ::ItemWord >&
Item::word() const {
  // @@protoc_insertion_point(field_list:Item.word)
  return word_;
}

// repeated .ItemTag srp = 9;
int Item::srp_size() const {
  return srp_.size();
}
void Item::clear_srp() {
  srp_.Clear();
}
const ::ItemTag& Item::srp(int index) const {
  // @@protoc_insertion_point(field_get:Item.srp)
  return srp_.Get(index);
}
::ItemTag* Item::mutable_srp(int index) {
  // @@protoc_insertion_point(field_mutable:Item.srp)
  return srp_.Mutable(index);
}
::ItemTag* Item::add_srp() {
  // @@protoc_insertion_point(field_add:Item.srp)
  return srp_.Add();
}
::google::protobuf::RepeatedPtrField< ::ItemTag >*
Item::mutable_srp() {
  // @@protoc_insertion_point(field_mutable_list:Item.srp)
  return &srp_;
}
const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
Item::srp() const {
  // @@protoc_insertion_point(field_list:Item.srp)
  return srp_;
}

// repeated .ItemTag circle = 10;
int Item::circle_size() const {
  return circle_.size();
}
void Item::clear_circle() {
  circle_.Clear();
}
const ::ItemTag& Item::circle(int index) const {
  // @@protoc_insertion_point(field_get:Item.circle)
  return circle_.Get(index);
}
::ItemTag* Item::mutable_circle(int index) {
  // @@protoc_insertion_point(field_mutable:Item.circle)
  return circle_.Mutable(index);
}
::ItemTag* Item::add_circle() {
  // @@protoc_insertion_point(field_add:Item.circle)
  return circle_.Add();
}
::google::protobuf::RepeatedPtrField< ::ItemTag >*
Item::mutable_circle() {
  // @@protoc_insertion_point(field_mutable_list:Item.circle)
  return &circle_;
}
const ::google::protobuf::RepeatedPtrField< ::ItemTag >&
Item::circle() const {
  // @@protoc_insertion_point(field_list:Item.circle)
  return circle_;
}

// optional .TopInfo top_info = 11;
bool Item::has_top_info() const {
  return !_is_default_instance_ && top_info_ != NULL;
}
void Item::clear_top_info() {
  if (GetArenaNoVirtual() == NULL && top_info_ != NULL) delete top_info_;
  top_info_ = NULL;
}
const ::TopInfo& Item::top_info() const {
  // @@protoc_insertion_point(field_get:Item.top_info)
  return top_info_ != NULL ? *top_info_ : *default_instance_->top_info_;
}
::TopInfo* Item::mutable_top_info() {
  
  if (top_info_ == NULL) {
    top_info_ = new ::TopInfo;
  }
  // @@protoc_insertion_point(field_mutable:Item.top_info)
  return top_info_;
}
::TopInfo* Item::release_top_info() {
  
  ::TopInfo* temp = top_info_;
  top_info_ = NULL;
  return temp;
}
void Item::set_allocated_top_info(::TopInfo* top_info) {
  delete top_info_;
  top_info_ = top_info;
  if (top_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Item.top_info)
}

// repeated string zone = 12;
int Item::zone_size() const {
  return zone_.size();
}
void Item::clear_zone() {
  zone_.Clear();
}
 const ::std::string& Item::zone(int index) const {
  // @@protoc_insertion_point(field_get:Item.zone)
  return zone_.Get(index);
}
 ::std::string* Item::mutable_zone(int index) {
  // @@protoc_insertion_point(field_mutable:Item.zone)
  return zone_.Mutable(index);
}
 void Item::set_zone(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Item.zone)
  zone_.Mutable(index)->assign(value);
}
 void Item::set_zone(int index, const char* value) {
  zone_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Item.zone)
}
 void Item::set_zone(int index, const char* value, size_t size) {
  zone_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Item.zone)
}
 ::std::string* Item::add_zone() {
  return zone_.Add();
}
 void Item::add_zone(const ::std::string& value) {
  zone_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Item.zone)
}
 void Item::add_zone(const char* value) {
  zone_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Item.zone)
}
 void Item::add_zone(const char* value, size_t size) {
  zone_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Item.zone)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Item::zone() const {
  // @@protoc_insertion_point(field_list:Item.zone)
  return zone_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Item::mutable_zone() {
  // @@protoc_insertion_point(field_mutable_list:Item.zone)
  return &zone_;
}

// optional .ItemSource data_source = 13;
bool Item::has_data_source() const {
  return !_is_default_instance_ && data_source_ != NULL;
}
void Item::clear_data_source() {
  if (GetArenaNoVirtual() == NULL && data_source_ != NULL) delete data_source_;
  data_source_ = NULL;
}
const ::ItemSource& Item::data_source() const {
  // @@protoc_insertion_point(field_get:Item.data_source)
  return data_source_ != NULL ? *data_source_ : *default_instance_->data_source_;
}
::ItemSource* Item::mutable_data_source() {
  
  if (data_source_ == NULL) {
    data_source_ = new ::ItemSource;
  }
  // @@protoc_insertion_point(field_mutable:Item.data_source)
  return data_source_;
}
::ItemSource* Item::release_data_source() {
  
  ::ItemSource* temp = data_source_;
  data_source_ = NULL;
  return temp;
}
void Item::set_allocated_data_source(::ItemSource* data_source) {
  delete data_source_;
  data_source_ = data_source;
  if (data_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Item.data_source)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Subscribe::kUserIdFieldNumber;
const int Subscribe::kSrpIdFieldNumber;
const int Subscribe::kCircleIdFieldNumber;
#endif  // !_MSC_VER

Subscribe::Subscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Subscribe)
}

void Subscribe::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Subscribe::Subscribe(const Subscribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Subscribe)
}

void Subscribe::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

Subscribe::~Subscribe() {
  // @@protoc_insertion_point(destructor:Subscribe)
  SharedDtor();
}

void Subscribe::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscribe_descriptor_;
}

const Subscribe& Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Subscribe* Subscribe::default_instance_ = NULL;

Subscribe* Subscribe::New(::google::protobuf::Arena* arena) const {
  Subscribe* n = new Subscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subscribe::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  srp_id_.Clear();
  circle_id_.Clear();
}

bool Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Subscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_srp_id;
        break;
      }

      // repeated string srp_id = 2;
      case 2: {
        if (tag == 18) {
         parse_srp_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_srp_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->srp_id(this->srp_id_size() - 1).data(),
            this->srp_id(this->srp_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Subscribe.srp_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_srp_id;
        if (input->ExpectTag(26)) goto parse_circle_id;
        break;
      }

      // repeated string circle_id = 3;
      case 3: {
        if (tag == 26) {
         parse_circle_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_circle_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->circle_id(this->circle_id_size() - 1).data(),
            this->circle_id(this->circle_id_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Subscribe.circle_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_circle_id;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Subscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Subscribe)
  return false;
#undef DO_
}

void Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Subscribe)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated string srp_id = 2;
  for (int i = 0; i < this->srp_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srp_id(i).data(), this->srp_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Subscribe.srp_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->srp_id(i), output);
  }

  // repeated string circle_id = 3;
  for (int i = 0; i < this->circle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->circle_id(i).data(), this->circle_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Subscribe.circle_id");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->circle_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Subscribe)
}

::google::protobuf::uint8* Subscribe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Subscribe)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated string srp_id = 2;
  for (int i = 0; i < this->srp_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->srp_id(i).data(), this->srp_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Subscribe.srp_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->srp_id(i), target);
  }

  // repeated string circle_id = 3;
  for (int i = 0; i < this->circle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->circle_id(i).data(), this->circle_id(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Subscribe.circle_id");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->circle_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Subscribe)
  return target;
}

int Subscribe::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // repeated string srp_id = 2;
  total_size += 1 * this->srp_id_size();
  for (int i = 0; i < this->srp_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->srp_id(i));
  }

  // repeated string circle_id = 3;
  total_size += 1 * this->circle_id_size();
  for (int i = 0; i < this->circle_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->circle_id(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Subscribe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscribe>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Subscribe::MergeFrom(const Subscribe& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  srp_id_.MergeFrom(from.srp_id_);
  circle_id_.MergeFrom(from.circle_id_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscribe::CopyFrom(const Subscribe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {

  return true;
}

void Subscribe::Swap(Subscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subscribe::InternalSwap(Subscribe* other) {
  std::swap(user_id_, other->user_id_);
  srp_id_.UnsafeArenaSwap(&other->srp_id_);
  circle_id_.UnsafeArenaSwap(&other->circle_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscribe_descriptor_;
  metadata.reflection = Subscribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subscribe

// optional uint64 user_id = 1;
void Subscribe::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Subscribe::user_id() const {
  // @@protoc_insertion_point(field_get:Subscribe.user_id)
  return user_id_;
}
 void Subscribe::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Subscribe.user_id)
}

// repeated string srp_id = 2;
int Subscribe::srp_id_size() const {
  return srp_id_.size();
}
void Subscribe::clear_srp_id() {
  srp_id_.Clear();
}
 const ::std::string& Subscribe::srp_id(int index) const {
  // @@protoc_insertion_point(field_get:Subscribe.srp_id)
  return srp_id_.Get(index);
}
 ::std::string* Subscribe::mutable_srp_id(int index) {
  // @@protoc_insertion_point(field_mutable:Subscribe.srp_id)
  return srp_id_.Mutable(index);
}
 void Subscribe::set_srp_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subscribe.srp_id)
  srp_id_.Mutable(index)->assign(value);
}
 void Subscribe::set_srp_id(int index, const char* value) {
  srp_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subscribe.srp_id)
}
 void Subscribe::set_srp_id(int index, const char* value, size_t size) {
  srp_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subscribe.srp_id)
}
 ::std::string* Subscribe::add_srp_id() {
  return srp_id_.Add();
}
 void Subscribe::add_srp_id(const ::std::string& value) {
  srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subscribe.srp_id)
}
 void Subscribe::add_srp_id(const char* value) {
  srp_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subscribe.srp_id)
}
 void Subscribe::add_srp_id(const char* value, size_t size) {
  srp_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subscribe.srp_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Subscribe::srp_id() const {
  // @@protoc_insertion_point(field_list:Subscribe.srp_id)
  return srp_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Subscribe::mutable_srp_id() {
  // @@protoc_insertion_point(field_mutable_list:Subscribe.srp_id)
  return &srp_id_;
}

// repeated string circle_id = 3;
int Subscribe::circle_id_size() const {
  return circle_id_.size();
}
void Subscribe::clear_circle_id() {
  circle_id_.Clear();
}
 const ::std::string& Subscribe::circle_id(int index) const {
  // @@protoc_insertion_point(field_get:Subscribe.circle_id)
  return circle_id_.Get(index);
}
 ::std::string* Subscribe::mutable_circle_id(int index) {
  // @@protoc_insertion_point(field_mutable:Subscribe.circle_id)
  return circle_id_.Mutable(index);
}
 void Subscribe::set_circle_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subscribe.circle_id)
  circle_id_.Mutable(index)->assign(value);
}
 void Subscribe::set_circle_id(int index, const char* value) {
  circle_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subscribe.circle_id)
}
 void Subscribe::set_circle_id(int index, const char* value, size_t size) {
  circle_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subscribe.circle_id)
}
 ::std::string* Subscribe::add_circle_id() {
  return circle_id_.Add();
}
 void Subscribe::add_circle_id(const ::std::string& value) {
  circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subscribe.circle_id)
}
 void Subscribe::add_circle_id(const char* value) {
  circle_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subscribe.circle_id)
}
 void Subscribe::add_circle_id(const char* value, size_t size) {
  circle_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subscribe.circle_id)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Subscribe::circle_id() const {
  // @@protoc_insertion_point(field_list:Subscribe.circle_id)
  return circle_id_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Subscribe::mutable_circle_id() {
  // @@protoc_insertion_point(field_mutable_list:Subscribe.circle_id)
  return &circle_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Recommend::kLogFieldNumber;
const int Recommend::kUserIdFieldNumber;
const int Recommend::kRequestNumFieldNumber;
const int Recommend::kRecommendTypeFieldNumber;
const int Recommend::kBegTimeFieldNumber;
const int Recommend::kEndTimeFieldNumber;
const int Recommend::kZoneFieldNumber;
const int Recommend::kNetworkFieldNumber;
#endif  // !_MSC_VER

Recommend::Recommend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Recommend)
}

void Recommend::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Recommend::Recommend(const Recommend& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Recommend)
}

void Recommend::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  log_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  request_num_ = 0;
  recommend_type_ = 0;
  beg_time_ = 0;
  end_time_ = 0;
  zone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  network_ = 0;
}

Recommend::~Recommend() {
  // @@protoc_insertion_point(destructor:Recommend)
  SharedDtor();
}

void Recommend::SharedDtor() {
  zone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Recommend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Recommend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Recommend_descriptor_;
}

const Recommend& Recommend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Recommend* Recommend::default_instance_ = NULL;

Recommend* Recommend::New(::google::protobuf::Arena* arena) const {
  Recommend* n = new Recommend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Recommend::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Recommend*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, beg_time_);
  ZR_(end_time_, network_);
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool Recommend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Recommend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 log = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &log_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_request_num;
        break;
      }

      // optional int32 request_num = 3;
      case 3: {
        if (tag == 24) {
         parse_request_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_recommend_type;
        break;
      }

      // optional .RecommendType recommend_type = 4;
      case 4: {
        if (tag == 32) {
         parse_recommend_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_recommend_type(static_cast< ::RecommendType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_beg_time;
        break;
      }

      // optional int32 beg_time = 5;
      case 5: {
        if (tag == 40) {
         parse_beg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beg_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // optional int32 end_time = 6;
      case 6: {
        if (tag == 48) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_zone;
        break;
      }

      // optional string zone = 7;
      case 7: {
        if (tag == 58) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Recommend.zone"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_network;
        break;
      }

      // optional .RecommendNetwork network = 8;
      case 8: {
        if (tag == 64) {
         parse_network:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_network(static_cast< ::RecommendNetwork >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Recommend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Recommend)
  return false;
#undef DO_
}

void Recommend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Recommend)
  // optional int32 log = 1;
  if (this->log() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->log(), output);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional int32 request_num = 3;
  if (this->request_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_num(), output);
  }

  // optional .RecommendType recommend_type = 4;
  if (this->recommend_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recommend_type(), output);
  }

  // optional int32 beg_time = 5;
  if (this->beg_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->beg_time(), output);
  }

  // optional int32 end_time = 6;
  if (this->end_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->end_time(), output);
  }

  // optional string zone = 7;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Recommend.zone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->zone(), output);
  }

  // optional .RecommendNetwork network = 8;
  if (this->network() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->network(), output);
  }

  // @@protoc_insertion_point(serialize_end:Recommend)
}

::google::protobuf::uint8* Recommend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Recommend)
  // optional int32 log = 1;
  if (this->log() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->log(), target);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional int32 request_num = 3;
  if (this->request_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_num(), target);
  }

  // optional .RecommendType recommend_type = 4;
  if (this->recommend_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recommend_type(), target);
  }

  // optional int32 beg_time = 5;
  if (this->beg_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->beg_time(), target);
  }

  // optional int32 end_time = 6;
  if (this->end_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->end_time(), target);
  }

  // optional string zone = 7;
  if (this->zone().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Recommend.zone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->zone(), target);
  }

  // optional .RecommendNetwork network = 8;
  if (this->network() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->network(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Recommend)
  return target;
}

int Recommend::ByteSize() const {
  int total_size = 0;

  // optional int32 log = 1;
  if (this->log() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->log());
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional int32 request_num = 3;
  if (this->request_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_num());
  }

  // optional .RecommendType recommend_type = 4;
  if (this->recommend_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->recommend_type());
  }

  // optional int32 beg_time = 5;
  if (this->beg_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->beg_time());
  }

  // optional int32 end_time = 6;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->end_time());
  }

  // optional string zone = 7;
  if (this->zone().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->zone());
  }

  // optional .RecommendNetwork network = 8;
  if (this->network() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->network());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Recommend::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Recommend* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Recommend>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Recommend::MergeFrom(const Recommend& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.log() != 0) {
    set_log(from.log());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.request_num() != 0) {
    set_request_num(from.request_num());
  }
  if (from.recommend_type() != 0) {
    set_recommend_type(from.recommend_type());
  }
  if (from.beg_time() != 0) {
    set_beg_time(from.beg_time());
  }
  if (from.end_time() != 0) {
    set_end_time(from.end_time());
  }
  if (from.zone().size() > 0) {

    zone_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.zone_);
  }
  if (from.network() != 0) {
    set_network(from.network());
  }
}

void Recommend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Recommend::CopyFrom(const Recommend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Recommend::IsInitialized() const {

  return true;
}

void Recommend::Swap(Recommend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Recommend::InternalSwap(Recommend* other) {
  std::swap(log_, other->log_);
  std::swap(user_id_, other->user_id_);
  std::swap(request_num_, other->request_num_);
  std::swap(recommend_type_, other->recommend_type_);
  std::swap(beg_time_, other->beg_time_);
  std::swap(end_time_, other->end_time_);
  zone_.Swap(&other->zone_);
  std::swap(network_, other->network_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Recommend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Recommend_descriptor_;
  metadata.reflection = Recommend_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Recommend

// optional int32 log = 1;
void Recommend::clear_log() {
  log_ = 0;
}
 ::google::protobuf::int32 Recommend::log() const {
  // @@protoc_insertion_point(field_get:Recommend.log)
  return log_;
}
 void Recommend::set_log(::google::protobuf::int32 value) {
  
  log_ = value;
  // @@protoc_insertion_point(field_set:Recommend.log)
}

// optional uint64 user_id = 2;
void Recommend::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Recommend::user_id() const {
  // @@protoc_insertion_point(field_get:Recommend.user_id)
  return user_id_;
}
 void Recommend::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Recommend.user_id)
}

// optional int32 request_num = 3;
void Recommend::clear_request_num() {
  request_num_ = 0;
}
 ::google::protobuf::int32 Recommend::request_num() const {
  // @@protoc_insertion_point(field_get:Recommend.request_num)
  return request_num_;
}
 void Recommend::set_request_num(::google::protobuf::int32 value) {
  
  request_num_ = value;
  // @@protoc_insertion_point(field_set:Recommend.request_num)
}

// optional .RecommendType recommend_type = 4;
void Recommend::clear_recommend_type() {
  recommend_type_ = 0;
}
 ::RecommendType Recommend::recommend_type() const {
  // @@protoc_insertion_point(field_get:Recommend.recommend_type)
  return static_cast< ::RecommendType >(recommend_type_);
}
 void Recommend::set_recommend_type(::RecommendType value) {
  
  recommend_type_ = value;
  // @@protoc_insertion_point(field_set:Recommend.recommend_type)
}

// optional int32 beg_time = 5;
void Recommend::clear_beg_time() {
  beg_time_ = 0;
}
 ::google::protobuf::int32 Recommend::beg_time() const {
  // @@protoc_insertion_point(field_get:Recommend.beg_time)
  return beg_time_;
}
 void Recommend::set_beg_time(::google::protobuf::int32 value) {
  
  beg_time_ = value;
  // @@protoc_insertion_point(field_set:Recommend.beg_time)
}

// optional int32 end_time = 6;
void Recommend::clear_end_time() {
  end_time_ = 0;
}
 ::google::protobuf::int32 Recommend::end_time() const {
  // @@protoc_insertion_point(field_get:Recommend.end_time)
  return end_time_;
}
 void Recommend::set_end_time(::google::protobuf::int32 value) {
  
  end_time_ = value;
  // @@protoc_insertion_point(field_set:Recommend.end_time)
}

// optional string zone = 7;
void Recommend::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Recommend::zone() const {
  // @@protoc_insertion_point(field_get:Recommend.zone)
  return zone_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Recommend::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Recommend.zone)
}
 void Recommend::set_zone(const char* value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Recommend.zone)
}
 void Recommend::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Recommend.zone)
}
 ::std::string* Recommend::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:Recommend.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Recommend::release_zone() {
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Recommend::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:Recommend.zone)
}

// optional .RecommendNetwork network = 8;
void Recommend::clear_network() {
  network_ = 0;
}
 ::RecommendNetwork Recommend::network() const {
  // @@protoc_insertion_point(field_get:Recommend.network)
  return static_cast< ::RecommendNetwork >(network_);
}
 void Recommend::set_network(::RecommendNetwork value) {
  
  network_ = value;
  // @@protoc_insertion_point(field_set:Recommend.network)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CandidateSetBase::kUserIdFieldNumber;
const int CandidateSetBase::kItemIdFieldNumber;
const int CandidateSetBase::kHistoryIdFieldNumber;
#endif  // !_MSC_VER

CandidateSetBase::CandidateSetBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CandidateSetBase)
}

void CandidateSetBase::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CandidateSetBase::CandidateSetBase(const CandidateSetBase& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CandidateSetBase)
}

void CandidateSetBase::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

CandidateSetBase::~CandidateSetBase() {
  // @@protoc_insertion_point(destructor:CandidateSetBase)
  SharedDtor();
}

void CandidateSetBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CandidateSetBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateSetBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateSetBase_descriptor_;
}

const CandidateSetBase& CandidateSetBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CandidateSetBase* CandidateSetBase::default_instance_ = NULL;

CandidateSetBase* CandidateSetBase::New(::google::protobuf::Arena* arena) const {
  CandidateSetBase* n = new CandidateSetBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CandidateSetBase::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  item_id_.Clear();
  history_id_.Clear();
}

bool CandidateSetBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CandidateSetBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_id;
        break;
      }

      // repeated fixed64 item_id = 2;
      case 2: {
        if (tag == 18) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_item_id())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 18, input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_history_id;
        break;
      }

      // repeated fixed64 history_id = 3;
      case 3: {
        if (tag == 26) {
         parse_history_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_history_id())));
        } else if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 26, input, this->mutable_history_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CandidateSetBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CandidateSetBase)
  return false;
#undef DO_
}

void CandidateSetBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CandidateSetBase)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated fixed64 item_id = 2;
  if (this->item_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_item_id_cached_byte_size_);
  }
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->item_id(i), output);
  }

  // repeated fixed64 history_id = 3;
  if (this->history_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_history_id_cached_byte_size_);
  }
  for (int i = 0; i < this->history_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->history_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CandidateSetBase)
}

::google::protobuf::uint8* CandidateSetBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CandidateSetBase)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated fixed64 item_id = 2;
  if (this->item_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _item_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->item_id(i), target);
  }

  // repeated fixed64 history_id = 3;
  if (this->history_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _history_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->history_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->history_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CandidateSetBase)
  return target;
}

int CandidateSetBase::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // repeated fixed64 item_id = 2;
  {
    int data_size = 0;
    data_size = 8 * this->item_id_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _item_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated fixed64 history_id = 3;
  {
    int data_size = 0;
    data_size = 8 * this->history_id_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _history_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateSetBase::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CandidateSetBase* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateSetBase>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandidateSetBase::MergeFrom(const CandidateSetBase& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_id_.MergeFrom(from.item_id_);
  history_id_.MergeFrom(from.history_id_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void CandidateSetBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateSetBase::CopyFrom(const CandidateSetBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateSetBase::IsInitialized() const {

  return true;
}

void CandidateSetBase::Swap(CandidateSetBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateSetBase::InternalSwap(CandidateSetBase* other) {
  std::swap(user_id_, other->user_id_);
  item_id_.UnsafeArenaSwap(&other->item_id_);
  history_id_.UnsafeArenaSwap(&other->history_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CandidateSetBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateSetBase_descriptor_;
  metadata.reflection = CandidateSetBase_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CandidateSetBase

// optional uint64 user_id = 1;
void CandidateSetBase::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 CandidateSetBase::user_id() const {
  // @@protoc_insertion_point(field_get:CandidateSetBase.user_id)
  return user_id_;
}
 void CandidateSetBase::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:CandidateSetBase.user_id)
}

// repeated fixed64 item_id = 2;
int CandidateSetBase::item_id_size() const {
  return item_id_.size();
}
void CandidateSetBase::clear_item_id() {
  item_id_.Clear();
}
 ::google::protobuf::uint64 CandidateSetBase::item_id(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetBase.item_id)
  return item_id_.Get(index);
}
 void CandidateSetBase::set_item_id(int index, ::google::protobuf::uint64 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetBase.item_id)
}
 void CandidateSetBase::add_item_id(::google::protobuf::uint64 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetBase.item_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CandidateSetBase::item_id() const {
  // @@protoc_insertion_point(field_list:CandidateSetBase.item_id)
  return item_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CandidateSetBase::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetBase.item_id)
  return &item_id_;
}

// repeated fixed64 history_id = 3;
int CandidateSetBase::history_id_size() const {
  return history_id_.size();
}
void CandidateSetBase::clear_history_id() {
  history_id_.Clear();
}
 ::google::protobuf::uint64 CandidateSetBase::history_id(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetBase.history_id)
  return history_id_.Get(index);
}
 void CandidateSetBase::set_history_id(int index, ::google::protobuf::uint64 value) {
  history_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetBase.history_id)
}
 void CandidateSetBase::add_history_id(::google::protobuf::uint64 value) {
  history_id_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetBase.history_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CandidateSetBase::history_id() const {
  // @@protoc_insertion_point(field_list:CandidateSetBase.history_id)
  return history_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CandidateSetBase::mutable_history_id() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetBase.history_id)
  return &history_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CandidateSetPayload::kPowerFieldNumber;
const int CandidateSetPayload::kPublishTimeFieldNumber;
const int CandidateSetPayload::kCategoryIdFieldNumber;
const int CandidateSetPayload::kPictureNumFieldNumber;
const int CandidateSetPayload::kTypeFieldNumber;
#endif  // !_MSC_VER

CandidateSetPayload::CandidateSetPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CandidateSetPayload)
}

void CandidateSetPayload::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CandidateSetPayload::CandidateSetPayload(const CandidateSetPayload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CandidateSetPayload)
}

void CandidateSetPayload::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CandidateSetPayload::~CandidateSetPayload() {
  // @@protoc_insertion_point(destructor:CandidateSetPayload)
  SharedDtor();
}

void CandidateSetPayload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CandidateSetPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateSetPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateSetPayload_descriptor_;
}

const CandidateSetPayload& CandidateSetPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CandidateSetPayload* CandidateSetPayload::default_instance_ = NULL;

CandidateSetPayload* CandidateSetPayload::New(::google::protobuf::Arena* arena) const {
  CandidateSetPayload* n = new CandidateSetPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CandidateSetPayload::Clear() {
  power_.Clear();
  publish_time_.Clear();
  category_id_.Clear();
  picture_num_.Clear();
  type_.Clear();
}

bool CandidateSetPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CandidateSetPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float power = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_power())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_power())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_publish_time;
        break;
      }

      // repeated int32 publish_time = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_publish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_publish_time())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_publish_time())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_category_id;
        break;
      }

      // repeated int32 category_id = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_category_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category_id())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_category_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_picture_num;
        break;
      }

      // repeated int32 picture_num = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_picture_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_picture_num())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_picture_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_type;
        break;
      }

      // repeated .CandidateType type = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_type:
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_type(static_cast< ::CandidateType >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 40) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_type(static_cast< ::CandidateType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CandidateSetPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CandidateSetPayload)
  return false;
#undef DO_
}

void CandidateSetPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CandidateSetPayload)
  // repeated float power = 1;
  if (this->power_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_power_cached_byte_size_);
  }
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->power(i), output);
  }

  // repeated int32 publish_time = 2 [packed = true];
  if (this->publish_time_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_publish_time_cached_byte_size_);
  }
  for (int i = 0; i < this->publish_time_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->publish_time(i), output);
  }

  // repeated int32 category_id = 3 [packed = true];
  if (this->category_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_category_id_cached_byte_size_);
  }
  for (int i = 0; i < this->category_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->category_id(i), output);
  }

  // repeated int32 picture_num = 4 [packed = true];
  if (this->picture_num_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_picture_num_cached_byte_size_);
  }
  for (int i = 0; i < this->picture_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->picture_num(i), output);
  }

  // repeated .CandidateType type = 5 [packed = true];
  if (this->type_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_type_cached_byte_size_);
  }
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->type(i), output);
  }

  // @@protoc_insertion_point(serialize_end:CandidateSetPayload)
}

::google::protobuf::uint8* CandidateSetPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CandidateSetPayload)
  // repeated float power = 1;
  if (this->power_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _power_cached_byte_size_, target);
  }
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->power(i), target);
  }

  // repeated int32 publish_time = 2 [packed = true];
  if (this->publish_time_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _publish_time_cached_byte_size_, target);
  }
  for (int i = 0; i < this->publish_time_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->publish_time(i), target);
  }

  // repeated int32 category_id = 3 [packed = true];
  if (this->category_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _category_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->category_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->category_id(i), target);
  }

  // repeated int32 picture_num = 4 [packed = true];
  if (this->picture_num_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _picture_num_cached_byte_size_, target);
  }
  for (int i = 0; i < this->picture_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->picture_num(i), target);
  }

  // repeated .CandidateType type = 5 [packed = true];
  if (this->type_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _type_cached_byte_size_, target);
  }
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->type(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CandidateSetPayload)
  return target;
}

int CandidateSetPayload::ByteSize() const {
  int total_size = 0;

  // repeated float power = 1;
  {
    int data_size = 0;
    data_size = 4 * this->power_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _power_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 publish_time = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->publish_time_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->publish_time(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _publish_time_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 category_id = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->category_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _category_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 picture_num = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->picture_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->picture_num(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _picture_num_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .CandidateType type = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _type_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateSetPayload::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CandidateSetPayload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateSetPayload>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandidateSetPayload::MergeFrom(const CandidateSetPayload& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  power_.MergeFrom(from.power_);
  publish_time_.MergeFrom(from.publish_time_);
  category_id_.MergeFrom(from.category_id_);
  picture_num_.MergeFrom(from.picture_num_);
  type_.MergeFrom(from.type_);
}

void CandidateSetPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateSetPayload::CopyFrom(const CandidateSetPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateSetPayload::IsInitialized() const {

  return true;
}

void CandidateSetPayload::Swap(CandidateSetPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateSetPayload::InternalSwap(CandidateSetPayload* other) {
  power_.UnsafeArenaSwap(&other->power_);
  publish_time_.UnsafeArenaSwap(&other->publish_time_);
  category_id_.UnsafeArenaSwap(&other->category_id_);
  picture_num_.UnsafeArenaSwap(&other->picture_num_);
  type_.UnsafeArenaSwap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CandidateSetPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateSetPayload_descriptor_;
  metadata.reflection = CandidateSetPayload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CandidateSetPayload

// repeated float power = 1;
int CandidateSetPayload::power_size() const {
  return power_.size();
}
void CandidateSetPayload::clear_power() {
  power_.Clear();
}
 float CandidateSetPayload::power(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.power)
  return power_.Get(index);
}
 void CandidateSetPayload::set_power(int index, float value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.power)
}
 void CandidateSetPayload::add_power(float value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.power)
}
 const ::google::protobuf::RepeatedField< float >&
CandidateSetPayload::power() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.power)
  return power_;
}
 ::google::protobuf::RepeatedField< float >*
CandidateSetPayload::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.power)
  return &power_;
}

// repeated int32 publish_time = 2 [packed = true];
int CandidateSetPayload::publish_time_size() const {
  return publish_time_.size();
}
void CandidateSetPayload::clear_publish_time() {
  publish_time_.Clear();
}
 ::google::protobuf::int32 CandidateSetPayload::publish_time(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.publish_time)
  return publish_time_.Get(index);
}
 void CandidateSetPayload::set_publish_time(int index, ::google::protobuf::int32 value) {
  publish_time_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.publish_time)
}
 void CandidateSetPayload::add_publish_time(::google::protobuf::int32 value) {
  publish_time_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.publish_time)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CandidateSetPayload::publish_time() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.publish_time)
  return publish_time_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CandidateSetPayload::mutable_publish_time() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.publish_time)
  return &publish_time_;
}

// repeated int32 category_id = 3 [packed = true];
int CandidateSetPayload::category_id_size() const {
  return category_id_.size();
}
void CandidateSetPayload::clear_category_id() {
  category_id_.Clear();
}
 ::google::protobuf::int32 CandidateSetPayload::category_id(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.category_id)
  return category_id_.Get(index);
}
 void CandidateSetPayload::set_category_id(int index, ::google::protobuf::int32 value) {
  category_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.category_id)
}
 void CandidateSetPayload::add_category_id(::google::protobuf::int32 value) {
  category_id_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.category_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CandidateSetPayload::category_id() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.category_id)
  return category_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CandidateSetPayload::mutable_category_id() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.category_id)
  return &category_id_;
}

// repeated int32 picture_num = 4 [packed = true];
int CandidateSetPayload::picture_num_size() const {
  return picture_num_.size();
}
void CandidateSetPayload::clear_picture_num() {
  picture_num_.Clear();
}
 ::google::protobuf::int32 CandidateSetPayload::picture_num(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.picture_num)
  return picture_num_.Get(index);
}
 void CandidateSetPayload::set_picture_num(int index, ::google::protobuf::int32 value) {
  picture_num_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.picture_num)
}
 void CandidateSetPayload::add_picture_num(::google::protobuf::int32 value) {
  picture_num_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.picture_num)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CandidateSetPayload::picture_num() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.picture_num)
  return picture_num_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CandidateSetPayload::mutable_picture_num() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.picture_num)
  return &picture_num_;
}

// repeated .CandidateType type = 5 [packed = true];
int CandidateSetPayload::type_size() const {
  return type_.size();
}
void CandidateSetPayload::clear_type() {
  type_.Clear();
}
 ::CandidateType CandidateSetPayload::type(int index) const {
  // @@protoc_insertion_point(field_get:CandidateSetPayload.type)
  return static_cast< ::CandidateType >(type_.Get(index));
}
 void CandidateSetPayload::set_type(int index, ::CandidateType value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:CandidateSetPayload.type)
}
 void CandidateSetPayload::add_type(::CandidateType value) {
  type_.Add(value);
  // @@protoc_insertion_point(field_add:CandidateSetPayload.type)
}
 const ::google::protobuf::RepeatedField<int>&
CandidateSetPayload::type() const {
  // @@protoc_insertion_point(field_list:CandidateSetPayload.type)
  return type_;
}
 ::google::protobuf::RepeatedField<int>*
CandidateSetPayload::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:CandidateSetPayload.type)
  return &type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int CandidateSet::kBaseFieldNumber;
const int CandidateSet::kPayloadFieldNumber;
#endif  // !_MSC_VER

CandidateSet::CandidateSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CandidateSet)
}

void CandidateSet::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  base_ = const_cast< ::CandidateSetBase*>(&::CandidateSetBase::default_instance());
  payload_ = const_cast< ::CandidateSetPayload*>(&::CandidateSetPayload::default_instance());
}

CandidateSet::CandidateSet(const CandidateSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CandidateSet)
}

void CandidateSet::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  base_ = NULL;
  payload_ = NULL;
}

CandidateSet::~CandidateSet() {
  // @@protoc_insertion_point(destructor:CandidateSet)
  SharedDtor();
}

void CandidateSet::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete payload_;
  }
}

void CandidateSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandidateSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandidateSet_descriptor_;
}

const CandidateSet& CandidateSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

CandidateSet* CandidateSet::default_instance_ = NULL;

CandidateSet* CandidateSet::New(::google::protobuf::Arena* arena) const {
  CandidateSet* n = new CandidateSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CandidateSet::Clear() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}

bool CandidateSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CandidateSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CandidateSetBase base = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // optional .CandidateSetPayload payload = 2;
      case 2: {
        if (tag == 18) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CandidateSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CandidateSet)
  return false;
#undef DO_
}

void CandidateSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CandidateSet)
  // optional .CandidateSetBase base = 1;
  if (this->has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->base_, output);
  }

  // optional .CandidateSetPayload payload = 2;
  if (this->has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->payload_, output);
  }

  // @@protoc_insertion_point(serialize_end:CandidateSet)
}

::google::protobuf::uint8* CandidateSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CandidateSet)
  // optional .CandidateSetBase base = 1;
  if (this->has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->base_, target);
  }

  // optional .CandidateSetPayload payload = 2;
  if (this->has_payload()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->payload_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:CandidateSet)
  return target;
}

int CandidateSet::ByteSize() const {
  int total_size = 0;

  // optional .CandidateSetBase base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->base_);
  }

  // optional .CandidateSetPayload payload = 2;
  if (this->has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->payload_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandidateSet::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CandidateSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CandidateSet>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandidateSet::MergeFrom(const CandidateSet& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_base()) {
    mutable_base()->::CandidateSetBase::MergeFrom(from.base());
  }
  if (from.has_payload()) {
    mutable_payload()->::CandidateSetPayload::MergeFrom(from.payload());
  }
}

void CandidateSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandidateSet::CopyFrom(const CandidateSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandidateSet::IsInitialized() const {

  return true;
}

void CandidateSet::Swap(CandidateSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CandidateSet::InternalSwap(CandidateSet* other) {
  std::swap(base_, other->base_);
  std::swap(payload_, other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CandidateSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandidateSet_descriptor_;
  metadata.reflection = CandidateSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CandidateSet

// optional .CandidateSetBase base = 1;
bool CandidateSet::has_base() const {
  return !_is_default_instance_ && base_ != NULL;
}
void CandidateSet::clear_base() {
  if (GetArenaNoVirtual() == NULL && base_ != NULL) delete base_;
  base_ = NULL;
}
const ::CandidateSetBase& CandidateSet::base() const {
  // @@protoc_insertion_point(field_get:CandidateSet.base)
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
::CandidateSetBase* CandidateSet::mutable_base() {
  
  if (base_ == NULL) {
    base_ = new ::CandidateSetBase;
  }
  // @@protoc_insertion_point(field_mutable:CandidateSet.base)
  return base_;
}
::CandidateSetBase* CandidateSet::release_base() {
  
  ::CandidateSetBase* temp = base_;
  base_ = NULL;
  return temp;
}
void CandidateSet::set_allocated_base(::CandidateSetBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CandidateSet.base)
}

// optional .CandidateSetPayload payload = 2;
bool CandidateSet::has_payload() const {
  return !_is_default_instance_ && payload_ != NULL;
}
void CandidateSet::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
const ::CandidateSetPayload& CandidateSet::payload() const {
  // @@protoc_insertion_point(field_get:CandidateSet.payload)
  return payload_ != NULL ? *payload_ : *default_instance_->payload_;
}
::CandidateSetPayload* CandidateSet::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::CandidateSetPayload;
  }
  // @@protoc_insertion_point(field_mutable:CandidateSet.payload)
  return payload_;
}
::CandidateSetPayload* CandidateSet::release_payload() {
  
  ::CandidateSetPayload* temp = payload_;
  payload_ = NULL;
  return temp;
}
void CandidateSet::set_allocated_payload(::CandidateSetPayload* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:CandidateSet.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int User::kUserIdFieldNumber;
#endif  // !_MSC_VER

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:User)
}

void User::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

User::User(const User& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:User)
}

void User::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

User::~User() {
  // @@protoc_insertion_point(destructor:User)
  SharedDtor();
}

void User::SharedDtor() {
  if (this != default_instance_) {
  }
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User_descriptor_;
}

const User& User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

User* User::default_instance_ = NULL;

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:User)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:User)
}

::google::protobuf::uint8* User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:User)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:User)
  return target;
}

int User::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const User* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {

  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = User_descriptor_;
  metadata.reflection = User_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// optional uint64 user_id = 1;
void User::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 User::user_id() const {
  // @@protoc_insertion_point(field_get:User.user_id)
  return user_id_;
}
 void User::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:User.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int UserStatus::kIsNewUserFieldNumber;
#endif  // !_MSC_VER

UserStatus::UserStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UserStatus)
}

void UserStatus::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserStatus::UserStatus(const UserStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:UserStatus)
}

void UserStatus::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  is_new_user_ = 0;
}

UserStatus::~UserStatus() {
  // @@protoc_insertion_point(destructor:UserStatus)
  SharedDtor();
}

void UserStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatus_descriptor_;
}

const UserStatus& UserStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

UserStatus* UserStatus::default_instance_ = NULL;

UserStatus* UserStatus::New(::google::protobuf::Arena* arena) const {
  UserStatus* n = new UserStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserStatus::Clear() {
  is_new_user_ = 0;
}

bool UserStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UserStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_new_user = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_new_user_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UserStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UserStatus)
  return false;
#undef DO_
}

void UserStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UserStatus)
  // optional int32 is_new_user = 1;
  if (this->is_new_user() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_new_user(), output);
  }

  // @@protoc_insertion_point(serialize_end:UserStatus)
}

::google::protobuf::uint8* UserStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UserStatus)
  // optional int32 is_new_user = 1;
  if (this->is_new_user() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_new_user(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:UserStatus)
  return target;
}

int UserStatus::ByteSize() const {
  int total_size = 0;

  // optional int32 is_new_user = 1;
  if (this->is_new_user() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->is_new_user());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatus::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserStatus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserStatus>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatus::MergeFrom(const UserStatus& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.is_new_user() != 0) {
    set_is_new_user(from.is_new_user());
  }
}

void UserStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatus::CopyFrom(const UserStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatus::IsInitialized() const {

  return true;
}

void UserStatus::Swap(UserStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserStatus::InternalSwap(UserStatus* other) {
  std::swap(is_new_user_, other->is_new_user_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatus_descriptor_;
  metadata.reflection = UserStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserStatus

// optional int32 is_new_user = 1;
void UserStatus::clear_is_new_user() {
  is_new_user_ = 0;
}
 ::google::protobuf::int32 UserStatus::is_new_user() const {
  // @@protoc_insertion_point(field_get:UserStatus.is_new_user)
  return is_new_user_;
}
 void UserStatus::set_is_new_user(::google::protobuf::int32 value) {
  
  is_new_user_ = value;
  // @@protoc_insertion_point(field_set:UserStatus.is_new_user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Feedback::kUserIdFieldNumber;
const int Feedback::kItemIdFieldNumber;
#endif  // !_MSC_VER

Feedback::Feedback()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Feedback)
}

void Feedback::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Feedback::Feedback(const Feedback& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Feedback)
}

void Feedback::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

Feedback::~Feedback() {
  // @@protoc_insertion_point(destructor:Feedback)
  SharedDtor();
}

void Feedback::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Feedback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Feedback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Feedback_descriptor_;
}

const Feedback& Feedback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Feedback* Feedback::default_instance_ = NULL;

Feedback* Feedback::New(::google::protobuf::Arena* arena) const {
  Feedback* n = new Feedback;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Feedback::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  item_id_.Clear();
}

bool Feedback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Feedback)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_item_id;
        break;
      }

      // repeated fixed64 item_id = 2;
      case 2: {
        if (tag == 18) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_item_id())));
        } else if (tag == 17) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 18, input, this->mutable_item_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Feedback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Feedback)
  return false;
#undef DO_
}

void Feedback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Feedback)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated fixed64 item_id = 2;
  if (this->item_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_item_id_cached_byte_size_);
  }
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64NoTag(
      this->item_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:Feedback)
}

::google::protobuf::uint8* Feedback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Feedback)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated fixed64 item_id = 2;
  if (this->item_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _item_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed64NoTagToArray(this->item_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Feedback)
  return target;
}

int Feedback::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // repeated fixed64 item_id = 2;
  {
    int data_size = 0;
    data_size = 8 * this->item_id_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _item_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Feedback::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Feedback* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Feedback>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Feedback::MergeFrom(const Feedback& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  item_id_.MergeFrom(from.item_id_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void Feedback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feedback::CopyFrom(const Feedback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feedback::IsInitialized() const {

  return true;
}

void Feedback::Swap(Feedback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Feedback::InternalSwap(Feedback* other) {
  std::swap(user_id_, other->user_id_);
  item_id_.UnsafeArenaSwap(&other->item_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Feedback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Feedback_descriptor_;
  metadata.reflection = Feedback_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Feedback

// optional uint64 user_id = 1;
void Feedback::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Feedback::user_id() const {
  // @@protoc_insertion_point(field_get:Feedback.user_id)
  return user_id_;
}
 void Feedback::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Feedback.user_id)
}

// repeated fixed64 item_id = 2;
int Feedback::item_id_size() const {
  return item_id_.size();
}
void Feedback::clear_item_id() {
  item_id_.Clear();
}
 ::google::protobuf::uint64 Feedback::item_id(int index) const {
  // @@protoc_insertion_point(field_get:Feedback.item_id)
  return item_id_.Get(index);
}
 void Feedback::set_item_id(int index, ::google::protobuf::uint64 value) {
  item_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:Feedback.item_id)
}
 void Feedback::add_item_id(::google::protobuf::uint64 value) {
  item_id_.Add(value);
  // @@protoc_insertion_point(field_add:Feedback.item_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Feedback::item_id() const {
  // @@protoc_insertion_point(field_list:Feedback.item_id)
  return item_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Feedback::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable_list:Feedback.item_id)
  return &item_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int FeedbackRespond::kRespondFieldNumber;
#endif  // !_MSC_VER

FeedbackRespond::FeedbackRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:FeedbackRespond)
}

void FeedbackRespond::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

FeedbackRespond::FeedbackRespond(const FeedbackRespond& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FeedbackRespond)
}

void FeedbackRespond::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  respond_ = 0;
}

FeedbackRespond::~FeedbackRespond() {
  // @@protoc_insertion_point(destructor:FeedbackRespond)
  SharedDtor();
}

void FeedbackRespond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FeedbackRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeedbackRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeedbackRespond_descriptor_;
}

const FeedbackRespond& FeedbackRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

FeedbackRespond* FeedbackRespond::default_instance_ = NULL;

FeedbackRespond* FeedbackRespond::New(::google::protobuf::Arena* arena) const {
  FeedbackRespond* n = new FeedbackRespond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeedbackRespond::Clear() {
  respond_ = 0;
}

bool FeedbackRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FeedbackRespond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 respond = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respond_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FeedbackRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FeedbackRespond)
  return false;
#undef DO_
}

void FeedbackRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FeedbackRespond)
  // optional int32 respond = 1;
  if (this->respond() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->respond(), output);
  }

  // @@protoc_insertion_point(serialize_end:FeedbackRespond)
}

::google::protobuf::uint8* FeedbackRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:FeedbackRespond)
  // optional int32 respond = 1;
  if (this->respond() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->respond(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FeedbackRespond)
  return target;
}

int FeedbackRespond::ByteSize() const {
  int total_size = 0;

  // optional int32 respond = 1;
  if (this->respond() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->respond());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeedbackRespond::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FeedbackRespond* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeedbackRespond>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeedbackRespond::MergeFrom(const FeedbackRespond& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.respond() != 0) {
    set_respond(from.respond());
  }
}

void FeedbackRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeedbackRespond::CopyFrom(const FeedbackRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedbackRespond::IsInitialized() const {

  return true;
}

void FeedbackRespond::Swap(FeedbackRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeedbackRespond::InternalSwap(FeedbackRespond* other) {
  std::swap(respond_, other->respond_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeedbackRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeedbackRespond_descriptor_;
  metadata.reflection = FeedbackRespond_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeedbackRespond

// optional int32 respond = 1;
void FeedbackRespond::clear_respond() {
  respond_ = 0;
}
 ::google::protobuf::int32 FeedbackRespond::respond() const {
  // @@protoc_insertion_point(field_get:FeedbackRespond.respond)
  return respond_;
}
 void FeedbackRespond::set_respond(::google::protobuf::int32 value) {
  
  respond_ = value;
  // @@protoc_insertion_point(field_set:FeedbackRespond.respond)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AlgorithmPower::kPowerFieldNumber;
#endif  // !_MSC_VER

AlgorithmPower::AlgorithmPower()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AlgorithmPower)
}

void AlgorithmPower::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AlgorithmPower::AlgorithmPower(const AlgorithmPower& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AlgorithmPower)
}

void AlgorithmPower::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AlgorithmPower::~AlgorithmPower() {
  // @@protoc_insertion_point(destructor:AlgorithmPower)
  SharedDtor();
}

void AlgorithmPower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlgorithmPower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlgorithmPower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgorithmPower_descriptor_;
}

const AlgorithmPower& AlgorithmPower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AlgorithmPower* AlgorithmPower::default_instance_ = NULL;

AlgorithmPower* AlgorithmPower::New(::google::protobuf::Arena* arena) const {
  AlgorithmPower* n = new AlgorithmPower;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlgorithmPower::Clear() {
  power_.Clear();
}

bool AlgorithmPower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AlgorithmPower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float power = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_power())));
        } else if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_power())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AlgorithmPower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AlgorithmPower)
  return false;
#undef DO_
}

void AlgorithmPower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AlgorithmPower)
  // repeated float power = 1;
  if (this->power_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_power_cached_byte_size_);
  }
  for (int i = 0; i < this->power_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->power(i), output);
  }

  // @@protoc_insertion_point(serialize_end:AlgorithmPower)
}

::google::protobuf::uint8* AlgorithmPower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmPower)
  // repeated float power = 1;
  if (this->power_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _power_cached_byte_size_, target);
  }
  for (int i = 0; i < this->power_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->power(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmPower)
  return target;
}

int AlgorithmPower::ByteSize() const {
  int total_size = 0;

  // repeated float power = 1;
  {
    int data_size = 0;
    data_size = 4 * this->power_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _power_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlgorithmPower::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AlgorithmPower* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgorithmPower>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlgorithmPower::MergeFrom(const AlgorithmPower& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  power_.MergeFrom(from.power_);
}

void AlgorithmPower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmPower::CopyFrom(const AlgorithmPower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmPower::IsInitialized() const {

  return true;
}

void AlgorithmPower::Swap(AlgorithmPower* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmPower::InternalSwap(AlgorithmPower* other) {
  power_.UnsafeArenaSwap(&other->power_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlgorithmPower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlgorithmPower_descriptor_;
  metadata.reflection = AlgorithmPower_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlgorithmPower

// repeated float power = 1;
int AlgorithmPower::power_size() const {
  return power_.size();
}
void AlgorithmPower::clear_power() {
  power_.Clear();
}
 float AlgorithmPower::power(int index) const {
  // @@protoc_insertion_point(field_get:AlgorithmPower.power)
  return power_.Get(index);
}
 void AlgorithmPower::set_power(int index, float value) {
  power_.Set(index, value);
  // @@protoc_insertion_point(field_set:AlgorithmPower.power)
}
 void AlgorithmPower::add_power(float value) {
  power_.Add(value);
  // @@protoc_insertion_point(field_add:AlgorithmPower.power)
}
 const ::google::protobuf::RepeatedField< float >&
AlgorithmPower::power() const {
  // @@protoc_insertion_point(field_list:AlgorithmPower.power)
  return power_;
}
 ::google::protobuf::RepeatedField< float >*
AlgorithmPower::mutable_power() {
  // @@protoc_insertion_point(field_mutable_list:AlgorithmPower.power)
  return &power_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Category::kUserIdFieldNumber;
const int Category::kRequestNumFieldNumber;
#endif  // !_MSC_VER

Category::Category()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Category)
}

void Category::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Category::Category(const Category& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Category)
}

void Category::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  request_num_ = 0;
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:Category)
  SharedDtor();
}

void Category::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Category::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Category::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Category_descriptor_;
}

const Category& Category::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

Category* Category::default_instance_ = NULL;

Category* Category::New(::google::protobuf::Arena* arena) const {
  Category* n = new Category;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Category::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Category*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, request_num_);

#undef ZR_HELPER_
#undef ZR_

}

bool Category::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Category)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_num;
        break;
      }

      // optional int32 request_num = 2;
      case 2: {
        if (tag == 16) {
         parse_request_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Category)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Category)
  return false;
#undef DO_
}

void Category::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Category)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 request_num = 2;
  if (this->request_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->request_num(), output);
  }

  // @@protoc_insertion_point(serialize_end:Category)
}

::google::protobuf::uint8* Category::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Category)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 request_num = 2;
  if (this->request_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->request_num(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Category)
  return target;
}

int Category::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional int32 request_num = 2;
  if (this->request_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_num());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Category::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Category* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Category>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Category::MergeFrom(const Category& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.request_num() != 0) {
    set_request_num(from.request_num());
  }
}

void Category::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Category::CopyFrom(const Category& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {

  return true;
}

void Category::Swap(Category* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Category::InternalSwap(Category* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(request_num_, other->request_num_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Category::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Category_descriptor_;
  metadata.reflection = Category_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Category

// optional uint64 user_id = 1;
void Category::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Category::user_id() const {
  // @@protoc_insertion_point(field_get:Category.user_id)
  return user_id_;
}
 void Category::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:Category.user_id)
}

// optional int32 request_num = 2;
void Category::clear_request_num() {
  request_num_ = 0;
}
 ::google::protobuf::int32 Category::request_num() const {
  // @@protoc_insertion_point(field_get:Category.request_num)
  return request_num_;
}
 void Category::set_request_num(::google::protobuf::int32 value) {
  
  request_num_ = value;
  // @@protoc_insertion_point(field_set:Category.request_num)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AlgorithmCategory::kCategoryFieldNumber;
#endif  // !_MSC_VER

AlgorithmCategory::AlgorithmCategory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AlgorithmCategory)
}

void AlgorithmCategory::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AlgorithmCategory::AlgorithmCategory(const AlgorithmCategory& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:AlgorithmCategory)
}

void AlgorithmCategory::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

AlgorithmCategory::~AlgorithmCategory() {
  // @@protoc_insertion_point(destructor:AlgorithmCategory)
  SharedDtor();
}

void AlgorithmCategory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlgorithmCategory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlgorithmCategory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlgorithmCategory_descriptor_;
}

const AlgorithmCategory& AlgorithmCategory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

AlgorithmCategory* AlgorithmCategory::default_instance_ = NULL;

AlgorithmCategory* AlgorithmCategory::New(::google::protobuf::Arena* arena) const {
  AlgorithmCategory* n = new AlgorithmCategory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AlgorithmCategory::Clear() {
  category_.Clear();
}

bool AlgorithmCategory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AlgorithmCategory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 category = 1 [packed = true];
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_category())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10, input, this->mutable_category())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AlgorithmCategory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AlgorithmCategory)
  return false;
#undef DO_
}

void AlgorithmCategory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AlgorithmCategory)
  // repeated int32 category = 1 [packed = true];
  if (this->category_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_category_cached_byte_size_);
  }
  for (int i = 0; i < this->category_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->category(i), output);
  }

  // @@protoc_insertion_point(serialize_end:AlgorithmCategory)
}

::google::protobuf::uint8* AlgorithmCategory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AlgorithmCategory)
  // repeated int32 category = 1 [packed = true];
  if (this->category_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _category_cached_byte_size_, target);
  }
  for (int i = 0; i < this->category_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->category(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:AlgorithmCategory)
  return target;
}

int AlgorithmCategory::ByteSize() const {
  int total_size = 0;

  // repeated int32 category = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->category_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->category(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _category_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlgorithmCategory::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AlgorithmCategory* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AlgorithmCategory>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlgorithmCategory::MergeFrom(const AlgorithmCategory& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  category_.MergeFrom(from.category_);
}

void AlgorithmCategory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlgorithmCategory::CopyFrom(const AlgorithmCategory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmCategory::IsInitialized() const {

  return true;
}

void AlgorithmCategory::Swap(AlgorithmCategory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AlgorithmCategory::InternalSwap(AlgorithmCategory* other) {
  category_.UnsafeArenaSwap(&other->category_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AlgorithmCategory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlgorithmCategory_descriptor_;
  metadata.reflection = AlgorithmCategory_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AlgorithmCategory

// repeated int32 category = 1 [packed = true];
int AlgorithmCategory::category_size() const {
  return category_.size();
}
void AlgorithmCategory::clear_category() {
  category_.Clear();
}
 ::google::protobuf::int32 AlgorithmCategory::category(int index) const {
  // @@protoc_insertion_point(field_get:AlgorithmCategory.category)
  return category_.Get(index);
}
 void AlgorithmCategory::set_category(int index, ::google::protobuf::int32 value) {
  category_.Set(index, value);
  // @@protoc_insertion_point(field_set:AlgorithmCategory.category)
}
 void AlgorithmCategory::add_category(::google::protobuf::int32 value) {
  category_.Add(value);
  // @@protoc_insertion_point(field_add:AlgorithmCategory.category)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AlgorithmCategory::category() const {
  // @@protoc_insertion_point(field_list:AlgorithmCategory.category)
  return category_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AlgorithmCategory::mutable_category() {
  // @@protoc_insertion_point(field_mutable_list:AlgorithmCategory.category)
  return &category_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TransferRequest::kMainProtocolFieldNumber;
const int TransferRequest::kSubProtocolFieldNumber;
const int TransferRequest::kProtocolFieldNumber;
#endif  // !_MSC_VER

TransferRequest::TransferRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransferRequest)
}

void TransferRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  protocol_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

TransferRequest::TransferRequest(const TransferRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TransferRequest)
}

void TransferRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  main_protocol_ = 0;
  sub_protocol_ = 0;
  protocol_ = NULL;
}

TransferRequest::~TransferRequest() {
  // @@protoc_insertion_point(destructor:TransferRequest)
  SharedDtor();
}

void TransferRequest::SharedDtor() {
  if (this != default_instance_) {
    delete protocol_;
  }
}

void TransferRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferRequest_descriptor_;
}

const TransferRequest& TransferRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

TransferRequest* TransferRequest::default_instance_ = NULL;

TransferRequest* TransferRequest::New(::google::protobuf::Arena* arena) const {
  TransferRequest* n = new TransferRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferRequest::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TransferRequest*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(main_protocol_, sub_protocol_);
  if (GetArenaNoVirtual() == NULL && protocol_ != NULL) delete protocol_;
  protocol_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool TransferRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransferRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 main_protocol = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_protocol_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sub_protocol;
        break;
      }

      // optional int32 sub_protocol = 2;
      case 2: {
        if (tag == 16) {
         parse_sub_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_protocol_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_protocol;
        break;
      }

      // optional .google.protobuf.Any protocol = 3;
      case 3: {
        if (tag == 26) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransferRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransferRequest)
  return false;
#undef DO_
}

void TransferRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransferRequest)
  // optional int32 main_protocol = 1;
  if (this->main_protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->main_protocol(), output);
  }

  // optional int32 sub_protocol = 2;
  if (this->sub_protocol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sub_protocol(), output);
  }

  // optional .google.protobuf.Any protocol = 3;
  if (this->has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->protocol_, output);
  }

  // @@protoc_insertion_point(serialize_end:TransferRequest)
}

::google::protobuf::uint8* TransferRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferRequest)
  // optional int32 main_protocol = 1;
  if (this->main_protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->main_protocol(), target);
  }

  // optional int32 sub_protocol = 2;
  if (this->sub_protocol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sub_protocol(), target);
  }

  // optional .google.protobuf.Any protocol = 3;
  if (this->has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->protocol_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TransferRequest)
  return target;
}

int TransferRequest::ByteSize() const {
  int total_size = 0;

  // optional int32 main_protocol = 1;
  if (this->main_protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->main_protocol());
  }

  // optional int32 sub_protocol = 2;
  if (this->sub_protocol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sub_protocol());
  }

  // optional .google.protobuf.Any protocol = 3;
  if (this->has_protocol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->protocol_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferRequest::MergeFrom(const TransferRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.main_protocol() != 0) {
    set_main_protocol(from.main_protocol());
  }
  if (from.sub_protocol() != 0) {
    set_sub_protocol(from.sub_protocol());
  }
  if (from.has_protocol()) {
    mutable_protocol()->::google::protobuf::Any::MergeFrom(from.protocol());
  }
}

void TransferRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRequest::CopyFrom(const TransferRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRequest::IsInitialized() const {

  return true;
}

void TransferRequest::Swap(TransferRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRequest::InternalSwap(TransferRequest* other) {
  std::swap(main_protocol_, other->main_protocol_);
  std::swap(sub_protocol_, other->sub_protocol_);
  std::swap(protocol_, other->protocol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferRequest_descriptor_;
  metadata.reflection = TransferRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferRequest

// optional int32 main_protocol = 1;
void TransferRequest::clear_main_protocol() {
  main_protocol_ = 0;
}
 ::google::protobuf::int32 TransferRequest::main_protocol() const {
  // @@protoc_insertion_point(field_get:TransferRequest.main_protocol)
  return main_protocol_;
}
 void TransferRequest::set_main_protocol(::google::protobuf::int32 value) {
  
  main_protocol_ = value;
  // @@protoc_insertion_point(field_set:TransferRequest.main_protocol)
}

// optional int32 sub_protocol = 2;
void TransferRequest::clear_sub_protocol() {
  sub_protocol_ = 0;
}
 ::google::protobuf::int32 TransferRequest::sub_protocol() const {
  // @@protoc_insertion_point(field_get:TransferRequest.sub_protocol)
  return sub_protocol_;
}
 void TransferRequest::set_sub_protocol(::google::protobuf::int32 value) {
  
  sub_protocol_ = value;
  // @@protoc_insertion_point(field_set:TransferRequest.sub_protocol)
}

// optional .google.protobuf.Any protocol = 3;
bool TransferRequest::has_protocol() const {
  return !_is_default_instance_ && protocol_ != NULL;
}
void TransferRequest::clear_protocol() {
  if (GetArenaNoVirtual() == NULL && protocol_ != NULL) delete protocol_;
  protocol_ = NULL;
}
const ::google::protobuf::Any& TransferRequest::protocol() const {
  // @@protoc_insertion_point(field_get:TransferRequest.protocol)
  return protocol_ != NULL ? *protocol_ : *default_instance_->protocol_;
}
::google::protobuf::Any* TransferRequest::mutable_protocol() {
  
  if (protocol_ == NULL) {
    protocol_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:TransferRequest.protocol)
  return protocol_;
}
::google::protobuf::Any* TransferRequest::release_protocol() {
  
  ::google::protobuf::Any* temp = protocol_;
  protocol_ = NULL;
  return temp;
}
void TransferRequest::set_allocated_protocol(::google::protobuf::Any* protocol) {
  delete protocol_;
  protocol_ = protocol;
  if (protocol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TransferRequest.protocol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TransferRespond::kRespondCodeFieldNumber;
const int TransferRespond::kProtocolFieldNumber;
#endif  // !_MSC_VER

TransferRespond::TransferRespond()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TransferRespond)
}

void TransferRespond::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  protocol_ = const_cast< ::google::protobuf::Any*>(&::google::protobuf::Any::default_instance());
}

TransferRespond::TransferRespond(const TransferRespond& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TransferRespond)
}

void TransferRespond::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  respond_code_ = 0;
  protocol_ = NULL;
}

TransferRespond::~TransferRespond() {
  // @@protoc_insertion_point(destructor:TransferRespond)
  SharedDtor();
}

void TransferRespond::SharedDtor() {
  if (this != default_instance_) {
    delete protocol_;
  }
}

void TransferRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferRespond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferRespond_descriptor_;
}

const TransferRespond& TransferRespond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

TransferRespond* TransferRespond::default_instance_ = NULL;

TransferRespond* TransferRespond::New(::google::protobuf::Arena* arena) const {
  TransferRespond* n = new TransferRespond;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TransferRespond::Clear() {
  respond_code_ = 0;
  if (GetArenaNoVirtual() == NULL && protocol_ != NULL) delete protocol_;
  protocol_ = NULL;
}

bool TransferRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TransferRespond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 respond_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &respond_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_protocol;
        break;
      }

      // optional .google.protobuf.Any protocol = 2;
      case 2: {
        if (tag == 18) {
         parse_protocol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_protocol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TransferRespond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TransferRespond)
  return false;
#undef DO_
}

void TransferRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TransferRespond)
  // optional int32 respond_code = 1;
  if (this->respond_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->respond_code(), output);
  }

  // optional .google.protobuf.Any protocol = 2;
  if (this->has_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->protocol_, output);
  }

  // @@protoc_insertion_point(serialize_end:TransferRespond)
}

::google::protobuf::uint8* TransferRespond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TransferRespond)
  // optional int32 respond_code = 1;
  if (this->respond_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->respond_code(), target);
  }

  // optional .google.protobuf.Any protocol = 2;
  if (this->has_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->protocol_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TransferRespond)
  return target;
}

int TransferRespond::ByteSize() const {
  int total_size = 0;

  // optional int32 respond_code = 1;
  if (this->respond_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->respond_code());
  }

  // optional .google.protobuf.Any protocol = 2;
  if (this->has_protocol()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->protocol_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferRespond::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TransferRespond* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TransferRespond>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferRespond::MergeFrom(const TransferRespond& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.respond_code() != 0) {
    set_respond_code(from.respond_code());
  }
  if (from.has_protocol()) {
    mutable_protocol()->::google::protobuf::Any::MergeFrom(from.protocol());
  }
}

void TransferRespond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferRespond::CopyFrom(const TransferRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferRespond::IsInitialized() const {

  return true;
}

void TransferRespond::Swap(TransferRespond* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TransferRespond::InternalSwap(TransferRespond* other) {
  std::swap(respond_code_, other->respond_code_);
  std::swap(protocol_, other->protocol_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TransferRespond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferRespond_descriptor_;
  metadata.reflection = TransferRespond_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TransferRespond

// optional int32 respond_code = 1;
void TransferRespond::clear_respond_code() {
  respond_code_ = 0;
}
 ::google::protobuf::int32 TransferRespond::respond_code() const {
  // @@protoc_insertion_point(field_get:TransferRespond.respond_code)
  return respond_code_;
}
 void TransferRespond::set_respond_code(::google::protobuf::int32 value) {
  
  respond_code_ = value;
  // @@protoc_insertion_point(field_set:TransferRespond.respond_code)
}

// optional .google.protobuf.Any protocol = 2;
bool TransferRespond::has_protocol() const {
  return !_is_default_instance_ && protocol_ != NULL;
}
void TransferRespond::clear_protocol() {
  if (GetArenaNoVirtual() == NULL && protocol_ != NULL) delete protocol_;
  protocol_ = NULL;
}
const ::google::protobuf::Any& TransferRespond::protocol() const {
  // @@protoc_insertion_point(field_get:TransferRespond.protocol)
  return protocol_ != NULL ? *protocol_ : *default_instance_->protocol_;
}
::google::protobuf::Any* TransferRespond::mutable_protocol() {
  
  if (protocol_ == NULL) {
    protocol_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:TransferRespond.protocol)
  return protocol_;
}
::google::protobuf::Any* TransferRespond::release_protocol() {
  
  ::google::protobuf::Any* temp = protocol_;
  protocol_ = NULL;
  return temp;
}
void TransferRespond::set_allocated_protocol(::google::protobuf::Any* protocol) {
  delete protocol_;
  protocol_ = protocol;
  if (protocol) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:TransferRespond.protocol)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int HeartBeat::kHeartbeatFieldNumber;
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HeartBeat)
}

void HeartBeat::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  heartbeat_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  heartbeat_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
  heartbeat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string heartbeat = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_heartbeat()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->heartbeat().data(), this->heartbeat().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HeartBeat.heartbeat"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeat)
  // optional string heartbeat = 1;
  if (this->heartbeat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heartbeat().data(), this->heartbeat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HeartBeat.heartbeat");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->heartbeat(), output);
  }

  // @@protoc_insertion_point(serialize_end:HeartBeat)
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeat)
  // optional string heartbeat = 1;
  if (this->heartbeat().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->heartbeat().data(), this->heartbeat().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HeartBeat.heartbeat");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->heartbeat(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  // optional string heartbeat = 1;
  if (this->heartbeat().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->heartbeat());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.heartbeat().size() > 0) {

    heartbeat_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.heartbeat_);
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  heartbeat_.Swap(&other->heartbeat_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// optional string heartbeat = 1;
void HeartBeat::clear_heartbeat() {
  heartbeat_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& HeartBeat::heartbeat() const {
  // @@protoc_insertion_point(field_get:HeartBeat.heartbeat)
  return heartbeat_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeat::set_heartbeat(const ::std::string& value) {
  
  heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HeartBeat.heartbeat)
}
 void HeartBeat::set_heartbeat(const char* value) {
  
  heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HeartBeat.heartbeat)
}
 void HeartBeat::set_heartbeat(const char* value, size_t size) {
  
  heartbeat_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HeartBeat.heartbeat)
}
 ::std::string* HeartBeat::mutable_heartbeat() {
  
  // @@protoc_insertion_point(field_mutable:HeartBeat.heartbeat)
  return heartbeat_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HeartBeat::release_heartbeat() {
  
  return heartbeat_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HeartBeat::set_allocated_heartbeat(::std::string* heartbeat) {
  if (heartbeat != NULL) {
    
  } else {
    
  }
  heartbeat_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), heartbeat);
  // @@protoc_insertion_point(field_set_allocated:HeartBeat.heartbeat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
